
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00001222  000012b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001222  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  0080011e  0080011e  000012d4  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  000012d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00002ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00003428  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001750  00000000  00000000  00003548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000764  00000000  00000000  00004c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000741  00000000  00000000  000053fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ab0  00000000  00000000  00005b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f7  00000000  00000000  000065f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a6b  00000000  00000000  00006ce7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__vector_1>
       8:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_2>
       c:	0c 94 af 02 	jmp	0x55e	; 0x55e <__vector_3>
      10:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__vector_4>
      14:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <__vector_5>
      18:	0c 94 24 03 	jmp	0x648	; 0x648 <__vector_6>
      1c:	0c 94 4b 03 	jmp	0x696	; 0x696 <__vector_7>
      20:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__vector_8>
      24:	0c 94 99 03 	jmp	0x732	; 0x732 <__vector_9>
      28:	0c 94 c0 03 	jmp	0x780	; 0x780 <__vector_10>
      2c:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__vector_11>
      30:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__vector_12>
      34:	0c 94 35 04 	jmp	0x86a	; 0x86a <__vector_13>
      38:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__vector_14>
      3c:	0c 94 83 04 	jmp	0x906	; 0x906 <__vector_15>
      40:	0c 94 aa 04 	jmp	0x954	; 0x954 <__vector_16>
      44:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__vector_17>
      48:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__vector_18>
      4c:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__vector_19>
      50:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__vector_20>
      54:	0c 94 6d 05 	jmp	0xada	; 0xada <__vector_21>
      58:	0c 94 94 05 	jmp	0xb28	; 0xb28 <__vector_22>
      5c:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__vector_23>
      60:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <__vector_24>
      64:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__vector_25>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e2       	ldi	r30, 0x22	; 34
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 31       	cpi	r26, 0x1E	; 30
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	ae e1       	ldi	r26, 0x1E	; 30
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 36       	cpi	r26, 0x69	; 105
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 30 06 	call	0xc60	; 0xc60 <main>
      9e:	0c 94 0f 09 	jmp	0x121e	; 0x121e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DIO_init>:
*/


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
      a6:	fc 01       	movw	r30, r24
  uint8_t RET=0;
  static uint8_t Multiple_init=0;
  if (DIO_info == NULL)
      a8:	00 97       	sbiw	r24, 0x00	; 0
      aa:	09 f4       	brne	.+2      	; 0xae <DIO_init+0x8>
      ac:	5e c0       	rjmp	.+188    	; 0x16a <DIO_init+0xc4>
  {
    RET=NULL_PTR+DIO_MODULE;

  }else{
    u8_is_init=1;
      ae:	81 e0       	ldi	r24, 0x01	; 1
      b0:	80 93 1e 01 	sts	0x011E, r24
    switch(DIO_info->dir)
      b4:	82 81       	ldd	r24, Z+2	; 0x02
      b6:	88 23       	and	r24, r24
      b8:	21 f0       	breq	.+8      	; 0xc2 <DIO_init+0x1c>
      ba:	8f 3f       	cpi	r24, 0xFF	; 255
      bc:	09 f0       	breq	.+2      	; 0xc0 <DIO_init+0x1a>
      be:	57 c0       	rjmp	.+174    	; 0x16e <DIO_init+0xc8>
      c0:	2c c0       	rjmp	.+88     	; 0x11a <DIO_init+0x74>
    {
    case INPUT:
      switch(DIO_info ->GPIO)
      c2:	80 81       	ld	r24, Z
      c4:	82 30       	cpi	r24, 0x02	; 2
      c6:	89 f0       	breq	.+34     	; 0xea <DIO_init+0x44>
      c8:	83 30       	cpi	r24, 0x03	; 3
      ca:	d9 f0       	breq	.+54     	; 0x102 <DIO_init+0x5c>
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	09 f0       	breq	.+2      	; 0xd2 <DIO_init+0x2c>
      d0:	50 c0       	rjmp	.+160    	; 0x172 <DIO_init+0xcc>
      {
      case GPIOB:
        PORTB_DIR &=(~(DIO_info->pins)) ;
      d2:	94 b1       	in	r25, 0x04	; 4
      d4:	81 81       	ldd	r24, Z+1	; 0x01
      d6:	80 95       	com	r24
      d8:	89 23       	and	r24, r25
      da:	84 b9       	out	0x04, r24	; 4
        Multiple_init+=2;
      dc:	80 91 1f 01 	lds	r24, 0x011F
      e0:	8e 5f       	subi	r24, 0xFE	; 254
      e2:	80 93 1f 01 	sts	0x011F, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
      e6:	80 e0       	ldi	r24, 0x00	; 0
      switch(DIO_info ->GPIO)
      {
      case GPIOB:
        PORTB_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=2;
        break;
      e8:	08 95       	ret
      case GPIOC:
        PORTC_DIR &=(~(DIO_info->pins)) ;
      ea:	97 b1       	in	r25, 0x07	; 7
      ec:	81 81       	ldd	r24, Z+1	; 0x01
      ee:	80 95       	com	r24
      f0:	89 23       	and	r24, r25
      f2:	87 b9       	out	0x07, r24	; 7
        Multiple_init+=3;
      f4:	80 91 1f 01 	lds	r24, 0x011F
      f8:	8d 5f       	subi	r24, 0xFD	; 253
      fa:	80 93 1f 01 	sts	0x011F, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
      fe:	80 e0       	ldi	r24, 0x00	; 0
        Multiple_init+=2;
        break;
      case GPIOC:
        PORTC_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=3;
        break;
     100:	08 95       	ret
      case GPIOD:
        PORTD_DIR &=(~(DIO_info->pins)) ;
     102:	9a b1       	in	r25, 0x0a	; 10
     104:	81 81       	ldd	r24, Z+1	; 0x01
     106:	80 95       	com	r24
     108:	89 23       	and	r24, r25
     10a:	8a b9       	out	0x0a, r24	; 10
        Multiple_init+=4;
     10c:	80 91 1f 01 	lds	r24, 0x011F
     110:	8c 5f       	subi	r24, 0xFC	; 252
     112:	80 93 1f 01 	sts	0x011F, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     116:	80 e0       	ldi	r24, 0x00	; 0
        Multiple_init+=3;
        break;
      case GPIOD:
        PORTD_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=4;
        break;
     118:	08 95       	ret
        break;
      }
      break;

      case OUTPUT:
        switch(DIO_info ->GPIO)
     11a:	80 81       	ld	r24, Z
     11c:	82 30       	cpi	r24, 0x02	; 2
     11e:	79 f0       	breq	.+30     	; 0x13e <DIO_init+0x98>
     120:	83 30       	cpi	r24, 0x03	; 3
     122:	c1 f0       	breq	.+48     	; 0x154 <DIO_init+0xae>
     124:	81 30       	cpi	r24, 0x01	; 1
     126:	39 f5       	brne	.+78     	; 0x176 <DIO_init+0xd0>
        {
        case GPIOB:
          PORTB_DIR |=(DIO_info->pins)  ;
     128:	94 b1       	in	r25, 0x04	; 4
     12a:	81 81       	ldd	r24, Z+1	; 0x01
     12c:	89 2b       	or	r24, r25
     12e:	84 b9       	out	0x04, r24	; 4
          Multiple_init+=2;
     130:	80 91 1f 01 	lds	r24, 0x011F
     134:	8e 5f       	subi	r24, 0xFE	; 254
     136:	80 93 1f 01 	sts	0x011F, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     13a:	80 e0       	ldi	r24, 0x00	; 0
        switch(DIO_info ->GPIO)
        {
        case GPIOB:
          PORTB_DIR |=(DIO_info->pins)  ;
          Multiple_init+=2;
          break;
     13c:	08 95       	ret
        case GPIOC:
          PORTC_DIR |=(DIO_info->pins)  ;
     13e:	97 b1       	in	r25, 0x07	; 7
     140:	81 81       	ldd	r24, Z+1	; 0x01
     142:	89 2b       	or	r24, r25
     144:	87 b9       	out	0x07, r24	; 7
          Multiple_init+=3;
     146:	80 91 1f 01 	lds	r24, 0x011F
     14a:	8d 5f       	subi	r24, 0xFD	; 253
     14c:	80 93 1f 01 	sts	0x011F, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     150:	80 e0       	ldi	r24, 0x00	; 0
          Multiple_init+=2;
          break;
        case GPIOC:
          PORTC_DIR |=(DIO_info->pins)  ;
          Multiple_init+=3;
          break;
     152:	08 95       	ret
        case GPIOD:
          PORTD_DIR |=(DIO_info->pins)  ;
     154:	9a b1       	in	r25, 0x0a	; 10
     156:	81 81       	ldd	r24, Z+1	; 0x01
     158:	89 2b       	or	r24, r25
     15a:	8a b9       	out	0x0a, r24	; 10
          Multiple_init+=4;
     15c:	80 91 1f 01 	lds	r24, 0x011F
     160:	8c 5f       	subi	r24, 0xFC	; 252
     162:	80 93 1f 01 	sts	0x011F, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     166:	80 e0       	ldi	r24, 0x00	; 0
          Multiple_init+=3;
          break;
        case GPIOD:
          PORTD_DIR |=(DIO_info->pins)  ;
          Multiple_init+=4;
          break;
     168:	08 95       	ret
{
  uint8_t RET=0;
  static uint8_t Multiple_init=0;
  if (DIO_info == NULL)
  {
    RET=NULL_PTR+DIO_MODULE;
     16a:	86 e1       	ldi	r24, 0x16	; 22
     16c:	08 95       	ret
          break;
        }

        break;
        default:
          RET=E_NOK+DIO_MODULE+INVALID_DIRECTION;
     16e:	83 e2       	ldi	r24, 0x23	; 35
     170:	08 95       	ret
      case GPIOD:
        PORTD_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=4;
        break;
      default:
        RET=E_NOK+DIO_MODULE+INVALID_PORT;
     172:	85 e2       	ldi	r24, 0x25	; 37
     174:	08 95       	ret
        case GPIOD:
          PORTD_DIR |=(DIO_info->pins)  ;
          Multiple_init+=4;
          break;
        default:
          RET=E_NOK+DIO_MODULE+INVALID_PORT;
     176:	85 e2       	ldi	r24, 0x25	; 37
    }


  }
  return RET;
}
     178:	08 95       	ret

0000017a <DIO_deinit>:

void DIO_deinit(void){
  u8_is_init=0;
     17a:	10 92 1e 01 	sts	0x011E, r1
}
     17e:	08 95       	ret

00000180 <DIO_is_init>:

void DIO_is_init(void){
  u8_is_init=1;
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	80 93 1e 01 	sts	0x011E, r24
}
     186:	08 95       	ret

00000188 <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;

if(u8_is_init==1){
     188:	90 91 1e 01 	lds	r25, 0x011E
     18c:	91 30       	cpi	r25, 0x01	; 1
     18e:	91 f5       	brne	.+100    	; 0x1f4 <DIO_Write+0x6c>
switch(value){
     190:	44 23       	and	r20, r20
     192:	19 f0       	breq	.+6      	; 0x19a <DIO_Write+0x12>
     194:	4f 3f       	cpi	r20, 0xFF	; 255
     196:	81 f5       	brne	.+96     	; 0x1f8 <DIO_Write+0x70>
     198:	18 c0       	rjmp	.+48     	; 0x1ca <DIO_Write+0x42>
case LOW:
{
  switch (GPIO)
     19a:	82 30       	cpi	r24, 0x02	; 2
     19c:	51 f0       	breq	.+20     	; 0x1b2 <DIO_Write+0x2a>
     19e:	83 30       	cpi	r24, 0x03	; 3
     1a0:	71 f0       	breq	.+28     	; 0x1be <DIO_Write+0x36>
     1a2:	81 30       	cpi	r24, 0x01	; 1
     1a4:	59 f5       	brne	.+86     	; 0x1fc <DIO_Write+0x74>
  {
  case GPIOB:
    PORTB_DATA &= ~(pins);
     1a6:	85 b1       	in	r24, 0x05	; 5
     1a8:	60 95       	com	r22
     1aa:	68 23       	and	r22, r24
     1ac:	65 b9       	out	0x05, r22	; 5
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1ae:	84 e1       	ldi	r24, 0x14	; 20
{
  switch (GPIO)
  {
  case GPIOB:
    PORTB_DATA &= ~(pins);
    break;
     1b0:	08 95       	ret
  case GPIOC:
    PORTC_DATA &= ~(pins);
     1b2:	88 b1       	in	r24, 0x08	; 8
     1b4:	60 95       	com	r22
     1b6:	68 23       	and	r22, r24
     1b8:	68 b9       	out	0x08, r22	; 8
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1ba:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    PORTB_DATA &= ~(pins);
    break;
  case GPIOC:
    PORTC_DATA &= ~(pins);
    break;
     1bc:	08 95       	ret
  case GPIOD:
    PORTD_DATA &= ~(pins);
     1be:	8b b1       	in	r24, 0x0b	; 11
     1c0:	60 95       	com	r22
     1c2:	68 23       	and	r22, r24
     1c4:	6b b9       	out	0x0b, r22	; 11
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1c6:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    PORTC_DATA &= ~(pins);
    break;
  case GPIOD:
    PORTD_DATA &= ~(pins);
    break;
     1c8:	08 95       	ret
    break;
  }
  break;
}
case HIGH:{
  switch (GPIO)
     1ca:	82 30       	cpi	r24, 0x02	; 2
     1cc:	49 f0       	breq	.+18     	; 0x1e0 <DIO_Write+0x58>
     1ce:	83 30       	cpi	r24, 0x03	; 3
     1d0:	61 f0       	breq	.+24     	; 0x1ea <DIO_Write+0x62>
     1d2:	81 30       	cpi	r24, 0x01	; 1
     1d4:	a9 f4       	brne	.+42     	; 0x200 <DIO_Write+0x78>
  { 
  case GPIOB:
    PORTB_DATA |=(pins);
     1d6:	85 b1       	in	r24, 0x05	; 5
     1d8:	68 2b       	or	r22, r24
     1da:	65 b9       	out	0x05, r22	; 5
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1dc:	84 e1       	ldi	r24, 0x14	; 20
case HIGH:{
  switch (GPIO)
  { 
  case GPIOB:
    PORTB_DATA |=(pins);
    break;
     1de:	08 95       	ret
  case GPIOC:
    PORTC_DATA |=(pins);
     1e0:	88 b1       	in	r24, 0x08	; 8
     1e2:	68 2b       	or	r22, r24
     1e4:	68 b9       	out	0x08, r22	; 8
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1e6:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    PORTB_DATA |=(pins);
    break;
  case GPIOC:
    PORTC_DATA |=(pins);
    break;
     1e8:	08 95       	ret
  case GPIOD:
    PORTD_DATA |=(pins);
     1ea:	8b b1       	in	r24, 0x0b	; 11
     1ec:	68 2b       	or	r22, r24
     1ee:	6b b9       	out	0x0b, r22	; 11
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1f0:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    PORTC_DATA |=(pins);
    break;
  case GPIOD:
    PORTD_DATA |=(pins);
    break;
     1f2:	08 95       	ret
default:
  Ret+=INVALID_VALUE;
  break;
}

}else{Ret+=NOT_INIT;}
     1f4:	88 e1       	ldi	r24, 0x18	; 24
     1f6:	08 95       	ret
    break;
  }
  break;
}
default:
  Ret+=INVALID_VALUE;
     1f8:	86 e2       	ldi	r24, 0x26	; 38
     1fa:	08 95       	ret
    break;
  case GPIOD:
    PORTD_DATA &= ~(pins);
    break;
  default:
    Ret+=INVALID_PORT;
     1fc:	84 e2       	ldi	r24, 0x24	; 36
     1fe:	08 95       	ret
    break;
  case GPIOD:
    PORTD_DATA |=(pins);
    break;
  default:
    Ret+=INVALID_PORT;
     200:	84 e2       	ldi	r24, 0x24	; 36
  break;
}

}else{Ret+=NOT_INIT;}
return Ret;
}
     202:	08 95       	ret

00000204 <DIO_Read>:


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
if(u8_is_init==1){
     204:	90 91 1e 01 	lds	r25, 0x011E
     208:	91 30       	cpi	r25, 0x01	; 1
     20a:	01 f5       	brne	.+64     	; 0x24c <DIO_Read+0x48>
  switch (GPIO)
     20c:	82 30       	cpi	r24, 0x02	; 2
     20e:	51 f0       	breq	.+20     	; 0x224 <DIO_Read+0x20>
     210:	83 30       	cpi	r24, 0x03	; 3
     212:	71 f0       	breq	.+28     	; 0x230 <DIO_Read+0x2c>
     214:	81 30       	cpi	r24, 0x01	; 1
     216:	91 f4       	brne	.+36     	; 0x23c <DIO_Read+0x38>
  { 
  case GPIOB:
    *data=(PORTB_PIN & pins);
     218:	83 b1       	in	r24, 0x03	; 3
     21a:	68 23       	and	r22, r24
     21c:	fa 01       	movw	r30, r20
     21e:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
     220:	84 e1       	ldi	r24, 0x14	; 20
if(u8_is_init==1){
  switch (GPIO)
  { 
  case GPIOB:
    *data=(PORTB_PIN & pins);
    break;
     222:	0d c0       	rjmp	.+26     	; 0x23e <DIO_Read+0x3a>
  case GPIOC:
    *data=(PORTC_PIN & pins);
     224:	86 b1       	in	r24, 0x06	; 6
     226:	68 23       	and	r22, r24
     228:	fa 01       	movw	r30, r20
     22a:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
     22c:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    *data=(PORTB_PIN & pins);
    break;
  case GPIOC:
    *data=(PORTC_PIN & pins);
    break;
     22e:	07 c0       	rjmp	.+14     	; 0x23e <DIO_Read+0x3a>
  case GPIOD:
    *data=(PORTD_PIN & pins);
     230:	89 b1       	in	r24, 0x09	; 9
     232:	68 23       	and	r22, r24
     234:	fa 01       	movw	r30, r20
     236:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
     238:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    *data=(PORTC_PIN & pins);
    break;
  case GPIOD:
    *data=(PORTD_PIN & pins);
    break;
     23a:	01 c0       	rjmp	.+2      	; 0x23e <DIO_Read+0x3a>
    default:
    ret+=INVALID_PORT;
     23c:	84 e2       	ldi	r24, 0x24	; 36
    break;
  }
  if(*data > 0)
     23e:	fa 01       	movw	r30, r20
     240:	90 81       	ld	r25, Z
     242:	99 23       	and	r25, r25
     244:	21 f0       	breq	.+8      	; 0x24e <DIO_Read+0x4a>
  {
    *data = 1;
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	90 83       	st	Z, r25
     24a:	08 95       	ret
  }
}else{ret+=NOT_INIT;}
     24c:	88 e1       	ldi	r24, 0x18	; 24
return ret;
}
     24e:	08 95       	ret

00000250 <DIO_Toggle>:
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
if(u8_is_init==1){
     250:	90 91 1e 01 	lds	r25, 0x011E
     254:	91 30       	cpi	r25, 0x01	; 1
     256:	a9 f4       	brne	.+42     	; 0x282 <DIO_Toggle+0x32>
  switch (GPIO)
     258:	82 30       	cpi	r24, 0x02	; 2
     25a:	49 f0       	breq	.+18     	; 0x26e <DIO_Toggle+0x1e>
     25c:	83 30       	cpi	r24, 0x03	; 3
     25e:	61 f0       	breq	.+24     	; 0x278 <DIO_Toggle+0x28>
     260:	81 30       	cpi	r24, 0x01	; 1
     262:	89 f4       	brne	.+34     	; 0x286 <DIO_Toggle+0x36>
  {
  case GPIOB:
    PORTB_DATA ^=(pins);
     264:	85 b1       	in	r24, 0x05	; 5
     266:	68 27       	eor	r22, r24
     268:	65 b9       	out	0x05, r22	; 5
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
     26a:	84 e1       	ldi	r24, 0x14	; 20
if(u8_is_init==1){
  switch (GPIO)
  {
  case GPIOB:
    PORTB_DATA ^=(pins);
    break;
     26c:	08 95       	ret
  case GPIOC:
    PORTC_DATA ^=(pins);
     26e:	88 b1       	in	r24, 0x08	; 8
     270:	68 27       	eor	r22, r24
     272:	68 b9       	out	0x08, r22	; 8
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
     274:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    PORTB_DATA ^=(pins);
    break;
  case GPIOC:
    PORTC_DATA ^=(pins);
    break;
     276:	08 95       	ret
  case GPIOD:
    PORTD_DATA ^=(pins);
     278:	8b b1       	in	r24, 0x0b	; 11
     27a:	68 27       	eor	r22, r24
     27c:	6b b9       	out	0x0b, r22	; 11
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
     27e:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    PORTC_DATA ^=(pins);
    break;
  case GPIOD:
    PORTD_DATA ^=(pins);
    break;
     280:	08 95       	ret
  default:
    ret+=INVALID_PORT;
    break;
  }
}else{ret+=NOT_INIT;}
     282:	88 e1       	ldi	r24, 0x18	; 24
     284:	08 95       	ret
    break;
  case GPIOD:
    PORTD_DATA ^=(pins);
    break;
  default:
    ret+=INVALID_PORT;
     286:	84 e2       	ldi	r24, 0x24	; 36
    break;
  }
}else{ret+=NOT_INIT;}
  return ret;
}
     288:	08 95       	ret

0000028a <Icu_Init>:
static volatile uint32_t u32_Time_rising_edge=0;
static volatile uint32_t u32_Time_faling_edge=0;
static volatile uint32_t Timer_High=0;
static volatile uint32_t Timer_Low=0;
ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	ec 01       	movw	r28, r24
  uint8_t Ret=0;
//Enable Global int
G_interrupt_Enable();
     290:	0e 94 42 02 	call	0x484	; 0x484 <G_interrupt_Enable>
//Enable EXTI
switch(Icu_Cfg->ICU_Ch_No)
     294:	88 81       	ld	r24, Y
     296:	88 23       	and	r24, r24
     298:	19 f0       	breq	.+6      	; 0x2a0 <Icu_Init+0x16>
     29a:	81 30       	cpi	r24, 0x01	; 1
     29c:	91 f4       	brne	.+36     	; 0x2c2 <Icu_Init+0x38>
     29e:	09 c0       	rjmp	.+18     	; 0x2b2 <Icu_Init+0x28>
{
case ICU_CH0:
EX_interrupt0_enable0();
     2a0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <EX_interrupt0_enable0>
INT0_external_interrupt = (Icu_Cfg->external_int);
     2a4:	8a 81       	ldd	r24, Y+2	; 0x02
     2a6:	9b 81       	ldd	r25, Y+3	; 0x03
     2a8:	90 93 12 01 	sts	0x0112, r25
     2ac:	80 93 11 01 	sts	0x0111, r24

break;
     2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <Icu_Init+0x38>
case ICU_CH1:
EX_interrupt1_enable1();
     2b2:	0e 94 46 02 	call	0x48c	; 0x48c <EX_interrupt1_enable1>
INT1_external_interrupt = (Icu_Cfg->external_int);
     2b6:	8a 81       	ldd	r24, Y+2	; 0x02
     2b8:	9b 81       	ldd	r25, Y+3	; 0x03
     2ba:	90 93 64 01 	sts	0x0164, r25
     2be:	80 93 63 01 	sts	0x0163, r24

break;
}

switch(Icu_Cfg->ICU_Ch_Timer)
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	81 30       	cpi	r24, 0x01	; 1
     2c6:	61 f4       	brne	.+24     	; 0x2e0 <Icu_Init+0x56>
    TCCR0=0x05;
    TIMSK0=0x01;
    break;
    */
   case ICU_TIMER_CH1:
   TCCR1B=0x05;
     2c8:	85 e0       	ldi	r24, 0x05	; 5
     2ca:	80 93 81 00 	sts	0x0081, r24
	TIMSK1=0x01;
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	80 93 6f 00 	sts	0x006F, r24
	TIMER1OVF=(Icu_Cfg->timer_int);
     2d4:	8c 81       	ldd	r24, Y+4	; 0x04
     2d6:	9d 81       	ldd	r25, Y+5	; 0x05
     2d8:	90 93 10 01 	sts	0x0110, r25
     2dc:	80 93 0f 01 	sts	0x010F, r24
 */
}


return Ret;
}
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <Icu_ReadTime>:
 *          - E_NOK : not successful                   *
 * Description  : calculates the time between 2 edges              *
 ***************************************************************************/

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time)
{
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
uint8_t Ret=0;
switch(Icu_Channel)
     2ec:	81 30       	cpi	r24, 0x01	; 1
     2ee:	29 f4       	brne	.+10     	; 0x2fa <Icu_ReadTime+0x12>
 /* case ICU_TIMER_CH0:
  TCCR0|=0x03;
  Ret=E_OK;
  break;
 */ case ICU_TIMER_CH1:
  TCCR1B|=0x05;
     2f0:	e1 e8       	ldi	r30, 0x81	; 129
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	85 60       	ori	r24, 0x05	; 5
     2f8:	80 83       	st	Z, r24
  default:
  Ret=E_NOK;
  break;
}

switch(Icu_EdgeToEdge)
     2fa:	61 30       	cpi	r22, 0x01	; 1
     2fc:	01 f1       	breq	.+64     	; 0x33e <Icu_ReadTime+0x56>
     2fe:	61 30       	cpi	r22, 0x01	; 1
     300:	18 f0       	brcs	.+6      	; 0x308 <Icu_ReadTime+0x20>
     302:	62 30       	cpi	r22, 0x02	; 2
     304:	d1 f5       	brne	.+116    	; 0x37a <Icu_ReadTime+0x92>
     306:	2a c0       	rjmp	.+84     	; 0x35c <Icu_ReadTime+0x74>
{
  case ICU_RISE_TO_RISE:
  *Icu_Time=Timer_High+Timer_Low;
     308:	80 91 24 01 	lds	r24, 0x0124
     30c:	90 91 25 01 	lds	r25, 0x0125
     310:	a0 91 26 01 	lds	r26, 0x0126
     314:	b0 91 27 01 	lds	r27, 0x0127
     318:	00 91 20 01 	lds	r16, 0x0120
     31c:	10 91 21 01 	lds	r17, 0x0121
     320:	20 91 22 01 	lds	r18, 0x0122
     324:	30 91 23 01 	lds	r19, 0x0123
     328:	80 0f       	add	r24, r16
     32a:	91 1f       	adc	r25, r17
     32c:	a2 1f       	adc	r26, r18
     32e:	b3 1f       	adc	r27, r19
     330:	fa 01       	movw	r30, r20
     332:	80 83       	st	Z, r24
     334:	91 83       	std	Z+1, r25	; 0x01
     336:	a2 83       	std	Z+2, r26	; 0x02
     338:	b3 83       	std	Z+3, r27	; 0x03
  Ret=E_OK;
     33a:	80 e0       	ldi	r24, 0x00	; 0
  break;
     33c:	1f c0       	rjmp	.+62     	; 0x37c <Icu_ReadTime+0x94>
  case ICU_RISE_TO_FALL:
  *Icu_Time=Timer_High;
     33e:	80 91 24 01 	lds	r24, 0x0124
     342:	90 91 25 01 	lds	r25, 0x0125
     346:	a0 91 26 01 	lds	r26, 0x0126
     34a:	b0 91 27 01 	lds	r27, 0x0127
     34e:	fa 01       	movw	r30, r20
     350:	80 83       	st	Z, r24
     352:	91 83       	std	Z+1, r25	; 0x01
     354:	a2 83       	std	Z+2, r26	; 0x02
     356:	b3 83       	std	Z+3, r27	; 0x03
  Ret=E_OK;
     358:	80 e0       	ldi	r24, 0x00	; 0
  break;
     35a:	10 c0       	rjmp	.+32     	; 0x37c <Icu_ReadTime+0x94>
  case ICU_FALE_TO_RISE:
  *Icu_Time=Timer_Low;
     35c:	80 91 20 01 	lds	r24, 0x0120
     360:	90 91 21 01 	lds	r25, 0x0121
     364:	a0 91 22 01 	lds	r26, 0x0122
     368:	b0 91 23 01 	lds	r27, 0x0123
     36c:	fa 01       	movw	r30, r20
     36e:	80 83       	st	Z, r24
     370:	91 83       	std	Z+1, r25	; 0x01
     372:	a2 83       	std	Z+2, r26	; 0x02
     374:	b3 83       	std	Z+3, r27	; 0x03
  Ret=E_OK;
     376:	80 e0       	ldi	r24, 0x00	; 0
  break;
     378:	01 c0       	rjmp	.+2      	; 0x37c <Icu_ReadTime+0x94>

  default:
  Ret=E_NOK;
     37a:	81 e0       	ldi	r24, 0x01	; 1
  break;
}

return Ret;
}
     37c:	1f 91       	pop	r17
     37e:	0f 91       	pop	r16
     380:	08 95       	ret

00000382 <EXTI0>:

void EXTI0(void)
{
  //u32_sgv_TimerVal=(uint32_t)TCNT1;
  u32_sgv_TimerVal=TCNT1;
     382:	80 91 84 00 	lds	r24, 0x0084
     386:	90 91 85 00 	lds	r25, 0x0085
     38a:	a0 e0       	ldi	r26, 0x00	; 0
     38c:	b0 e0       	ldi	r27, 0x00	; 0
     38e:	80 93 31 01 	sts	0x0131, r24
     392:	90 93 32 01 	sts	0x0132, r25
     396:	a0 93 33 01 	sts	0x0133, r26
     39a:	b0 93 34 01 	sts	0x0134, r27
  u8_ovf_happend=0;
     39e:	10 92 30 01 	sts	0x0130, r1
//  if(READBIT(EXTERNAL_INTERRUPT_CONTROL,6))
    if(READBIT(EXTERNAL_INTERRUPT_CONTROL,ISC00) && READBIT(EXTERNAL_INTERRUPT_CONTROL,ISC01))
     3a2:	80 91 69 00 	lds	r24, 0x0069
     3a6:	80 ff       	sbrs	r24, 0
     3a8:	37 c0       	rjmp	.+110    	; 0x418 <EXTI0+0x96>
     3aa:	80 91 69 00 	lds	r24, 0x0069
     3ae:	86 95       	lsr	r24
     3b0:	80 ff       	sbrs	r24, 0
     3b2:	32 c0       	rjmp	.+100    	; 0x418 <EXTI0+0x96>
    {
		
    u32_Time_rising_edge=u32_sgv_TimerVal;
     3b4:	80 91 31 01 	lds	r24, 0x0131
     3b8:	90 91 32 01 	lds	r25, 0x0132
     3bc:	a0 91 33 01 	lds	r26, 0x0133
     3c0:	b0 91 34 01 	lds	r27, 0x0134
     3c4:	80 93 2c 01 	sts	0x012C, r24
     3c8:	90 93 2d 01 	sts	0x012D, r25
     3cc:	a0 93 2e 01 	sts	0x012E, r26
     3d0:	b0 93 2f 01 	sts	0x012F, r27
    Timer_Low = u32_Time_rising_edge - u32_Time_faling_edge;
     3d4:	80 91 2c 01 	lds	r24, 0x012C
     3d8:	90 91 2d 01 	lds	r25, 0x012D
     3dc:	a0 91 2e 01 	lds	r26, 0x012E
     3e0:	b0 91 2f 01 	lds	r27, 0x012F
     3e4:	40 91 28 01 	lds	r20, 0x0128
     3e8:	50 91 29 01 	lds	r21, 0x0129
     3ec:	60 91 2a 01 	lds	r22, 0x012A
     3f0:	70 91 2b 01 	lds	r23, 0x012B
     3f4:	84 1b       	sub	r24, r20
     3f6:	95 0b       	sbc	r25, r21
     3f8:	a6 0b       	sbc	r26, r22
     3fa:	b7 0b       	sbc	r27, r23
     3fc:	80 93 20 01 	sts	0x0120, r24
     400:	90 93 21 01 	sts	0x0121, r25
     404:	a0 93 22 01 	sts	0x0122, r26
     408:	b0 93 23 01 	sts	0x0123, r27
    /*****************************************/
    CLEAR_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC00);  /*Make it falling*/
     40c:	e9 e6       	ldi	r30, 0x69	; 105
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	8e 7f       	andi	r24, 0xFE	; 254
     414:	80 83       	st	Z, r24
     416:	08 95       	ret
    /***************************************/
   }else{
      u32_Time_faling_edge=u32_sgv_TimerVal;
     418:	80 91 31 01 	lds	r24, 0x0131
     41c:	90 91 32 01 	lds	r25, 0x0132
     420:	a0 91 33 01 	lds	r26, 0x0133
     424:	b0 91 34 01 	lds	r27, 0x0134
     428:	80 93 28 01 	sts	0x0128, r24
     42c:	90 93 29 01 	sts	0x0129, r25
     430:	a0 93 2a 01 	sts	0x012A, r26
     434:	b0 93 2b 01 	sts	0x012B, r27
      Timer_High =u32_Time_faling_edge - u32_Time_rising_edge;
     438:	80 91 28 01 	lds	r24, 0x0128
     43c:	90 91 29 01 	lds	r25, 0x0129
     440:	a0 91 2a 01 	lds	r26, 0x012A
     444:	b0 91 2b 01 	lds	r27, 0x012B
     448:	40 91 2c 01 	lds	r20, 0x012C
     44c:	50 91 2d 01 	lds	r21, 0x012D
     450:	60 91 2e 01 	lds	r22, 0x012E
     454:	70 91 2f 01 	lds	r23, 0x012F
     458:	84 1b       	sub	r24, r20
     45a:	95 0b       	sbc	r25, r21
     45c:	a6 0b       	sbc	r26, r22
     45e:	b7 0b       	sbc	r27, r23
     460:	80 93 24 01 	sts	0x0124, r24
     464:	90 93 25 01 	sts	0x0125, r25
     468:	a0 93 26 01 	sts	0x0126, r26
     46c:	b0 93 27 01 	sts	0x0127, r27
   /*********************************/
      SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC00);    /*Make it Rising*/
     470:	e9 e6       	ldi	r30, 0x69	; 105
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	81 60       	ori	r24, 0x01	; 1
     478:	80 83       	st	Z, r24
     47a:	08 95       	ret

0000047c <timer_interrupt1>:
 }

}
void timer_interrupt1(void)
{
  u8_ovf_happend=1;
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 30 01 	sts	0x0130, r24

}
     482:	08 95       	ret

00000484 <G_interrupt_Enable>:
ptr_to_Fun ANA_COMP;
ptr_to_Fun TWI_I2C;
ptr_to_Fun SPM_RDY;
void G_interrupt_Enable(void)
{
 SREG |=(0x80);
     484:	8f b7       	in	r24, 0x3f	; 63
     486:	80 68       	ori	r24, 0x80	; 128
     488:	8f bf       	out	0x3f, r24	; 63
}
     48a:	08 95       	ret

0000048c <EX_interrupt1_enable1>:

void EX_interrupt1_enable1(void)
{
CLEAR_BIT(PORTD_DIR,3);/*Input*/
     48c:	53 98       	cbi	0x0a, 3	; 10
SET_BIT(PORTD_DATA,3);/*Pullup*/
     48e:	5b 9a       	sbi	0x0b, 3	; 11
SET_BIT(EXTERNAL_INTERRUPT_MASK_REG,INT1);/*EXT1*/
     490:	e9 9a       	sbi	0x1d, 1	; 29
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC10);/*Rising*/
     492:	e9 e6       	ldi	r30, 0x69	; 105
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	84 60       	ori	r24, 0x04	; 4
     49a:	80 83       	st	Z, r24
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC11);/*Rising*/
     49c:	80 81       	ld	r24, Z
     49e:	88 60       	ori	r24, 0x08	; 8
     4a0:	80 83       	st	Z, r24
}
     4a2:	08 95       	ret

000004a4 <EX_interrupt0_enable0>:
void EX_interrupt0_enable0(void)
{
CLEAR_BIT(PORTD_DIR,2);/*Input*/
     4a4:	52 98       	cbi	0x0a, 2	; 10
//SET_BIT(PORTD_DATA,2);/*Pullup*/
SET_BIT(EXTERNAL_INTERRUPT_MASK_REG,INT0);/*EXT0*/
     4a6:	e8 9a       	sbi	0x1d, 0	; 29
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC00);/*Rising*/
     4a8:	e9 e6       	ldi	r30, 0x69	; 105
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	81 60       	ori	r24, 0x01	; 1
     4b0:	80 83       	st	Z, r24
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC01);/*Rising*/
     4b2:	80 81       	ld	r24, Z
     4b4:	82 60       	ori	r24, 0x02	; 2
     4b6:	80 83       	st	Z, r24
}
     4b8:	08 95       	ret

000004ba <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
     4ba:	8f b7       	in	r24, 0x3f	; 63
     4bc:	8f 77       	andi	r24, 0x7F	; 127
     4be:	8f bf       	out	0x3f, r24	; 63
}
     4c0:	08 95       	ret

000004c2 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     4c2:	1f 92       	push	r1
     4c4:	0f 92       	push	r0
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	0f 92       	push	r0
     4ca:	11 24       	eor	r1, r1
     4cc:	2f 93       	push	r18
     4ce:	3f 93       	push	r19
     4d0:	4f 93       	push	r20
     4d2:	5f 93       	push	r21
     4d4:	6f 93       	push	r22
     4d6:	7f 93       	push	r23
     4d8:	8f 93       	push	r24
     4da:	9f 93       	push	r25
     4dc:	af 93       	push	r26
     4de:	bf 93       	push	r27
     4e0:	ef 93       	push	r30
     4e2:	ff 93       	push	r31
  INT0_external_interrupt();
     4e4:	e0 91 11 01 	lds	r30, 0x0111
     4e8:	f0 91 12 01 	lds	r31, 0x0112
     4ec:	09 95       	icall
}
     4ee:	ff 91       	pop	r31
     4f0:	ef 91       	pop	r30
     4f2:	bf 91       	pop	r27
     4f4:	af 91       	pop	r26
     4f6:	9f 91       	pop	r25
     4f8:	8f 91       	pop	r24
     4fa:	7f 91       	pop	r23
     4fc:	6f 91       	pop	r22
     4fe:	5f 91       	pop	r21
     500:	4f 91       	pop	r20
     502:	3f 91       	pop	r19
     504:	2f 91       	pop	r18
     506:	0f 90       	pop	r0
     508:	0f be       	out	0x3f, r0	; 63
     50a:	0f 90       	pop	r0
     50c:	1f 90       	pop	r1
     50e:	18 95       	reti

00000510 <__vector_2>:


void __vector_2(void) __attribute__((signal));
void
 __vector_2(void)
{
     510:	1f 92       	push	r1
     512:	0f 92       	push	r0
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	0f 92       	push	r0
     518:	11 24       	eor	r1, r1
     51a:	2f 93       	push	r18
     51c:	3f 93       	push	r19
     51e:	4f 93       	push	r20
     520:	5f 93       	push	r21
     522:	6f 93       	push	r22
     524:	7f 93       	push	r23
     526:	8f 93       	push	r24
     528:	9f 93       	push	r25
     52a:	af 93       	push	r26
     52c:	bf 93       	push	r27
     52e:	ef 93       	push	r30
     530:	ff 93       	push	r31
  INT1_external_interrupt();
     532:	e0 91 63 01 	lds	r30, 0x0163
     536:	f0 91 64 01 	lds	r31, 0x0164
     53a:	09 95       	icall
}
     53c:	ff 91       	pop	r31
     53e:	ef 91       	pop	r30
     540:	bf 91       	pop	r27
     542:	af 91       	pop	r26
     544:	9f 91       	pop	r25
     546:	8f 91       	pop	r24
     548:	7f 91       	pop	r23
     54a:	6f 91       	pop	r22
     54c:	5f 91       	pop	r21
     54e:	4f 91       	pop	r20
     550:	3f 91       	pop	r19
     552:	2f 91       	pop	r18
     554:	0f 90       	pop	r0
     556:	0f be       	out	0x3f, r0	; 63
     558:	0f 90       	pop	r0
     55a:	1f 90       	pop	r1
     55c:	18 95       	reti

0000055e <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     55e:	1f 92       	push	r1
     560:	0f 92       	push	r0
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	0f 92       	push	r0
     566:	11 24       	eor	r1, r1
     568:	2f 93       	push	r18
     56a:	3f 93       	push	r19
     56c:	4f 93       	push	r20
     56e:	5f 93       	push	r21
     570:	6f 93       	push	r22
     572:	7f 93       	push	r23
     574:	8f 93       	push	r24
     576:	9f 93       	push	r25
     578:	af 93       	push	r26
     57a:	bf 93       	push	r27
     57c:	ef 93       	push	r30
     57e:	ff 93       	push	r31
  Pin_Change_Interrupt_Request_0();
     580:	e0 91 49 01 	lds	r30, 0x0149
     584:	f0 91 4a 01 	lds	r31, 0x014A
     588:	09 95       	icall
}
     58a:	ff 91       	pop	r31
     58c:	ef 91       	pop	r30
     58e:	bf 91       	pop	r27
     590:	af 91       	pop	r26
     592:	9f 91       	pop	r25
     594:	8f 91       	pop	r24
     596:	7f 91       	pop	r23
     598:	6f 91       	pop	r22
     59a:	5f 91       	pop	r21
     59c:	4f 91       	pop	r20
     59e:	3f 91       	pop	r19
     5a0:	2f 91       	pop	r18
     5a2:	0f 90       	pop	r0
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	0f 90       	pop	r0
     5a8:	1f 90       	pop	r1
     5aa:	18 95       	reti

000005ac <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     5ac:	1f 92       	push	r1
     5ae:	0f 92       	push	r0
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	0f 92       	push	r0
     5b4:	11 24       	eor	r1, r1
     5b6:	2f 93       	push	r18
     5b8:	3f 93       	push	r19
     5ba:	4f 93       	push	r20
     5bc:	5f 93       	push	r21
     5be:	6f 93       	push	r22
     5c0:	7f 93       	push	r23
     5c2:	8f 93       	push	r24
     5c4:	9f 93       	push	r25
     5c6:	af 93       	push	r26
     5c8:	bf 93       	push	r27
     5ca:	ef 93       	push	r30
     5cc:	ff 93       	push	r31
Pin_Change_Interrupt_Request_1();
     5ce:	e0 91 5d 01 	lds	r30, 0x015D
     5d2:	f0 91 5e 01 	lds	r31, 0x015E
     5d6:	09 95       	icall
}
     5d8:	ff 91       	pop	r31
     5da:	ef 91       	pop	r30
     5dc:	bf 91       	pop	r27
     5de:	af 91       	pop	r26
     5e0:	9f 91       	pop	r25
     5e2:	8f 91       	pop	r24
     5e4:	7f 91       	pop	r23
     5e6:	6f 91       	pop	r22
     5e8:	5f 91       	pop	r21
     5ea:	4f 91       	pop	r20
     5ec:	3f 91       	pop	r19
     5ee:	2f 91       	pop	r18
     5f0:	0f 90       	pop	r0
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	0f 90       	pop	r0
     5f6:	1f 90       	pop	r1
     5f8:	18 95       	reti

000005fa <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     5fa:	1f 92       	push	r1
     5fc:	0f 92       	push	r0
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	0f 92       	push	r0
     602:	11 24       	eor	r1, r1
     604:	2f 93       	push	r18
     606:	3f 93       	push	r19
     608:	4f 93       	push	r20
     60a:	5f 93       	push	r21
     60c:	6f 93       	push	r22
     60e:	7f 93       	push	r23
     610:	8f 93       	push	r24
     612:	9f 93       	push	r25
     614:	af 93       	push	r26
     616:	bf 93       	push	r27
     618:	ef 93       	push	r30
     61a:	ff 93       	push	r31
  Pin_Change_Interrupt_Request_2();
     61c:	e0 91 4f 01 	lds	r30, 0x014F
     620:	f0 91 50 01 	lds	r31, 0x0150
     624:	09 95       	icall
}
     626:	ff 91       	pop	r31
     628:	ef 91       	pop	r30
     62a:	bf 91       	pop	r27
     62c:	af 91       	pop	r26
     62e:	9f 91       	pop	r25
     630:	8f 91       	pop	r24
     632:	7f 91       	pop	r23
     634:	6f 91       	pop	r22
     636:	5f 91       	pop	r21
     638:	4f 91       	pop	r20
     63a:	3f 91       	pop	r19
     63c:	2f 91       	pop	r18
     63e:	0f 90       	pop	r0
     640:	0f be       	out	0x3f, r0	; 63
     642:	0f 90       	pop	r0
     644:	1f 90       	pop	r1
     646:	18 95       	reti

00000648 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     648:	1f 92       	push	r1
     64a:	0f 92       	push	r0
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	0f 92       	push	r0
     650:	11 24       	eor	r1, r1
     652:	2f 93       	push	r18
     654:	3f 93       	push	r19
     656:	4f 93       	push	r20
     658:	5f 93       	push	r21
     65a:	6f 93       	push	r22
     65c:	7f 93       	push	r23
     65e:	8f 93       	push	r24
     660:	9f 93       	push	r25
     662:	af 93       	push	r26
     664:	bf 93       	push	r27
     666:	ef 93       	push	r30
     668:	ff 93       	push	r31
  watch_dog_interrupt();
     66a:	e0 91 41 01 	lds	r30, 0x0141
     66e:	f0 91 42 01 	lds	r31, 0x0142
     672:	09 95       	icall
}
     674:	ff 91       	pop	r31
     676:	ef 91       	pop	r30
     678:	bf 91       	pop	r27
     67a:	af 91       	pop	r26
     67c:	9f 91       	pop	r25
     67e:	8f 91       	pop	r24
     680:	7f 91       	pop	r23
     682:	6f 91       	pop	r22
     684:	5f 91       	pop	r21
     686:	4f 91       	pop	r20
     688:	3f 91       	pop	r19
     68a:	2f 91       	pop	r18
     68c:	0f 90       	pop	r0
     68e:	0f be       	out	0x3f, r0	; 63
     690:	0f 90       	pop	r0
     692:	1f 90       	pop	r1
     694:	18 95       	reti

00000696 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
     696:	1f 92       	push	r1
     698:	0f 92       	push	r0
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	0f 92       	push	r0
     69e:	11 24       	eor	r1, r1
     6a0:	2f 93       	push	r18
     6a2:	3f 93       	push	r19
     6a4:	4f 93       	push	r20
     6a6:	5f 93       	push	r21
     6a8:	6f 93       	push	r22
     6aa:	7f 93       	push	r23
     6ac:	8f 93       	push	r24
     6ae:	9f 93       	push	r25
     6b0:	af 93       	push	r26
     6b2:	bf 93       	push	r27
     6b4:	ef 93       	push	r30
     6b6:	ff 93       	push	r31
TIMER2COMPA();
     6b8:	e0 91 5b 01 	lds	r30, 0x015B
     6bc:	f0 91 5c 01 	lds	r31, 0x015C
     6c0:	09 95       	icall
}
     6c2:	ff 91       	pop	r31
     6c4:	ef 91       	pop	r30
     6c6:	bf 91       	pop	r27
     6c8:	af 91       	pop	r26
     6ca:	9f 91       	pop	r25
     6cc:	8f 91       	pop	r24
     6ce:	7f 91       	pop	r23
     6d0:	6f 91       	pop	r22
     6d2:	5f 91       	pop	r21
     6d4:	4f 91       	pop	r20
     6d6:	3f 91       	pop	r19
     6d8:	2f 91       	pop	r18
     6da:	0f 90       	pop	r0
     6dc:	0f be       	out	0x3f, r0	; 63
     6de:	0f 90       	pop	r0
     6e0:	1f 90       	pop	r1
     6e2:	18 95       	reti

000006e4 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
     6e4:	1f 92       	push	r1
     6e6:	0f 92       	push	r0
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	0f 92       	push	r0
     6ec:	11 24       	eor	r1, r1
     6ee:	2f 93       	push	r18
     6f0:	3f 93       	push	r19
     6f2:	4f 93       	push	r20
     6f4:	5f 93       	push	r21
     6f6:	6f 93       	push	r22
     6f8:	7f 93       	push	r23
     6fa:	8f 93       	push	r24
     6fc:	9f 93       	push	r25
     6fe:	af 93       	push	r26
     700:	bf 93       	push	r27
     702:	ef 93       	push	r30
     704:	ff 93       	push	r31
  TIMER2COMPB();
     706:	e0 91 4b 01 	lds	r30, 0x014B
     70a:	f0 91 4c 01 	lds	r31, 0x014C
     70e:	09 95       	icall
}
     710:	ff 91       	pop	r31
     712:	ef 91       	pop	r30
     714:	bf 91       	pop	r27
     716:	af 91       	pop	r26
     718:	9f 91       	pop	r25
     71a:	8f 91       	pop	r24
     71c:	7f 91       	pop	r23
     71e:	6f 91       	pop	r22
     720:	5f 91       	pop	r21
     722:	4f 91       	pop	r20
     724:	3f 91       	pop	r19
     726:	2f 91       	pop	r18
     728:	0f 90       	pop	r0
     72a:	0f be       	out	0x3f, r0	; 63
     72c:	0f 90       	pop	r0
     72e:	1f 90       	pop	r1
     730:	18 95       	reti

00000732 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
     732:	1f 92       	push	r1
     734:	0f 92       	push	r0
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	0f 92       	push	r0
     73a:	11 24       	eor	r1, r1
     73c:	2f 93       	push	r18
     73e:	3f 93       	push	r19
     740:	4f 93       	push	r20
     742:	5f 93       	push	r21
     744:	6f 93       	push	r22
     746:	7f 93       	push	r23
     748:	8f 93       	push	r24
     74a:	9f 93       	push	r25
     74c:	af 93       	push	r26
     74e:	bf 93       	push	r27
     750:	ef 93       	push	r30
     752:	ff 93       	push	r31
  TIMER2OVF();
     754:	e0 91 3f 01 	lds	r30, 0x013F
     758:	f0 91 40 01 	lds	r31, 0x0140
     75c:	09 95       	icall
}
     75e:	ff 91       	pop	r31
     760:	ef 91       	pop	r30
     762:	bf 91       	pop	r27
     764:	af 91       	pop	r26
     766:	9f 91       	pop	r25
     768:	8f 91       	pop	r24
     76a:	7f 91       	pop	r23
     76c:	6f 91       	pop	r22
     76e:	5f 91       	pop	r21
     770:	4f 91       	pop	r20
     772:	3f 91       	pop	r19
     774:	2f 91       	pop	r18
     776:	0f 90       	pop	r0
     778:	0f be       	out	0x3f, r0	; 63
     77a:	0f 90       	pop	r0
     77c:	1f 90       	pop	r1
     77e:	18 95       	reti

00000780 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     780:	1f 92       	push	r1
     782:	0f 92       	push	r0
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	0f 92       	push	r0
     788:	11 24       	eor	r1, r1
     78a:	2f 93       	push	r18
     78c:	3f 93       	push	r19
     78e:	4f 93       	push	r20
     790:	5f 93       	push	r21
     792:	6f 93       	push	r22
     794:	7f 93       	push	r23
     796:	8f 93       	push	r24
     798:	9f 93       	push	r25
     79a:	af 93       	push	r26
     79c:	bf 93       	push	r27
     79e:	ef 93       	push	r30
     7a0:	ff 93       	push	r31

  TIMER1CAPT();
     7a2:	e0 91 67 01 	lds	r30, 0x0167
     7a6:	f0 91 68 01 	lds	r31, 0x0168
     7aa:	09 95       	icall
}
     7ac:	ff 91       	pop	r31
     7ae:	ef 91       	pop	r30
     7b0:	bf 91       	pop	r27
     7b2:	af 91       	pop	r26
     7b4:	9f 91       	pop	r25
     7b6:	8f 91       	pop	r24
     7b8:	7f 91       	pop	r23
     7ba:	6f 91       	pop	r22
     7bc:	5f 91       	pop	r21
     7be:	4f 91       	pop	r20
     7c0:	3f 91       	pop	r19
     7c2:	2f 91       	pop	r18
     7c4:	0f 90       	pop	r0
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	0f 90       	pop	r0
     7ca:	1f 90       	pop	r1
     7cc:	18 95       	reti

000007ce <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     7ce:	1f 92       	push	r1
     7d0:	0f 92       	push	r0
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	0f 92       	push	r0
     7d6:	11 24       	eor	r1, r1
     7d8:	2f 93       	push	r18
     7da:	3f 93       	push	r19
     7dc:	4f 93       	push	r20
     7de:	5f 93       	push	r21
     7e0:	6f 93       	push	r22
     7e2:	7f 93       	push	r23
     7e4:	8f 93       	push	r24
     7e6:	9f 93       	push	r25
     7e8:	af 93       	push	r26
     7ea:	bf 93       	push	r27
     7ec:	ef 93       	push	r30
     7ee:	ff 93       	push	r31

  TIMER1COMPA();
     7f0:	e0 91 47 01 	lds	r30, 0x0147
     7f4:	f0 91 48 01 	lds	r31, 0x0148
     7f8:	09 95       	icall
}
     7fa:	ff 91       	pop	r31
     7fc:	ef 91       	pop	r30
     7fe:	bf 91       	pop	r27
     800:	af 91       	pop	r26
     802:	9f 91       	pop	r25
     804:	8f 91       	pop	r24
     806:	7f 91       	pop	r23
     808:	6f 91       	pop	r22
     80a:	5f 91       	pop	r21
     80c:	4f 91       	pop	r20
     80e:	3f 91       	pop	r19
     810:	2f 91       	pop	r18
     812:	0f 90       	pop	r0
     814:	0f be       	out	0x3f, r0	; 63
     816:	0f 90       	pop	r0
     818:	1f 90       	pop	r1
     81a:	18 95       	reti

0000081c <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
     81c:	1f 92       	push	r1
     81e:	0f 92       	push	r0
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	0f 92       	push	r0
     824:	11 24       	eor	r1, r1
     826:	2f 93       	push	r18
     828:	3f 93       	push	r19
     82a:	4f 93       	push	r20
     82c:	5f 93       	push	r21
     82e:	6f 93       	push	r22
     830:	7f 93       	push	r23
     832:	8f 93       	push	r24
     834:	9f 93       	push	r25
     836:	af 93       	push	r26
     838:	bf 93       	push	r27
     83a:	ef 93       	push	r30
     83c:	ff 93       	push	r31
  TIMER1COMPB();
     83e:	e0 91 45 01 	lds	r30, 0x0145
     842:	f0 91 46 01 	lds	r31, 0x0146
     846:	09 95       	icall
}
     848:	ff 91       	pop	r31
     84a:	ef 91       	pop	r30
     84c:	bf 91       	pop	r27
     84e:	af 91       	pop	r26
     850:	9f 91       	pop	r25
     852:	8f 91       	pop	r24
     854:	7f 91       	pop	r23
     856:	6f 91       	pop	r22
     858:	5f 91       	pop	r21
     85a:	4f 91       	pop	r20
     85c:	3f 91       	pop	r19
     85e:	2f 91       	pop	r18
     860:	0f 90       	pop	r0
     862:	0f be       	out	0x3f, r0	; 63
     864:	0f 90       	pop	r0
     866:	1f 90       	pop	r1
     868:	18 95       	reti

0000086a <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     86a:	1f 92       	push	r1
     86c:	0f 92       	push	r0
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	0f 92       	push	r0
     872:	11 24       	eor	r1, r1
     874:	2f 93       	push	r18
     876:	3f 93       	push	r19
     878:	4f 93       	push	r20
     87a:	5f 93       	push	r21
     87c:	6f 93       	push	r22
     87e:	7f 93       	push	r23
     880:	8f 93       	push	r24
     882:	9f 93       	push	r25
     884:	af 93       	push	r26
     886:	bf 93       	push	r27
     888:	ef 93       	push	r30
     88a:	ff 93       	push	r31
  TIMER1OVF();
     88c:	e0 91 0f 01 	lds	r30, 0x010F
     890:	f0 91 10 01 	lds	r31, 0x0110
     894:	09 95       	icall
}
     896:	ff 91       	pop	r31
     898:	ef 91       	pop	r30
     89a:	bf 91       	pop	r27
     89c:	af 91       	pop	r26
     89e:	9f 91       	pop	r25
     8a0:	8f 91       	pop	r24
     8a2:	7f 91       	pop	r23
     8a4:	6f 91       	pop	r22
     8a6:	5f 91       	pop	r21
     8a8:	4f 91       	pop	r20
     8aa:	3f 91       	pop	r19
     8ac:	2f 91       	pop	r18
     8ae:	0f 90       	pop	r0
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	0f 90       	pop	r0
     8b4:	1f 90       	pop	r1
     8b6:	18 95       	reti

000008b8 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
     8b8:	1f 92       	push	r1
     8ba:	0f 92       	push	r0
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	0f 92       	push	r0
     8c0:	11 24       	eor	r1, r1
     8c2:	2f 93       	push	r18
     8c4:	3f 93       	push	r19
     8c6:	4f 93       	push	r20
     8c8:	5f 93       	push	r21
     8ca:	6f 93       	push	r22
     8cc:	7f 93       	push	r23
     8ce:	8f 93       	push	r24
     8d0:	9f 93       	push	r25
     8d2:	af 93       	push	r26
     8d4:	bf 93       	push	r27
     8d6:	ef 93       	push	r30
     8d8:	ff 93       	push	r31
  TIMER0COMPA();
     8da:	e0 91 65 01 	lds	r30, 0x0165
     8de:	f0 91 66 01 	lds	r31, 0x0166
     8e2:	09 95       	icall
}
     8e4:	ff 91       	pop	r31
     8e6:	ef 91       	pop	r30
     8e8:	bf 91       	pop	r27
     8ea:	af 91       	pop	r26
     8ec:	9f 91       	pop	r25
     8ee:	8f 91       	pop	r24
     8f0:	7f 91       	pop	r23
     8f2:	6f 91       	pop	r22
     8f4:	5f 91       	pop	r21
     8f6:	4f 91       	pop	r20
     8f8:	3f 91       	pop	r19
     8fa:	2f 91       	pop	r18
     8fc:	0f 90       	pop	r0
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	0f 90       	pop	r0
     902:	1f 90       	pop	r1
     904:	18 95       	reti

00000906 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
     906:	1f 92       	push	r1
     908:	0f 92       	push	r0
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	0f 92       	push	r0
     90e:	11 24       	eor	r1, r1
     910:	2f 93       	push	r18
     912:	3f 93       	push	r19
     914:	4f 93       	push	r20
     916:	5f 93       	push	r21
     918:	6f 93       	push	r22
     91a:	7f 93       	push	r23
     91c:	8f 93       	push	r24
     91e:	9f 93       	push	r25
     920:	af 93       	push	r26
     922:	bf 93       	push	r27
     924:	ef 93       	push	r30
     926:	ff 93       	push	r31
  TIMER0COMPB();
     928:	e0 91 55 01 	lds	r30, 0x0155
     92c:	f0 91 56 01 	lds	r31, 0x0156
     930:	09 95       	icall
}
     932:	ff 91       	pop	r31
     934:	ef 91       	pop	r30
     936:	bf 91       	pop	r27
     938:	af 91       	pop	r26
     93a:	9f 91       	pop	r25
     93c:	8f 91       	pop	r24
     93e:	7f 91       	pop	r23
     940:	6f 91       	pop	r22
     942:	5f 91       	pop	r21
     944:	4f 91       	pop	r20
     946:	3f 91       	pop	r19
     948:	2f 91       	pop	r18
     94a:	0f 90       	pop	r0
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	0f 90       	pop	r0
     950:	1f 90       	pop	r1
     952:	18 95       	reti

00000954 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     954:	1f 92       	push	r1
     956:	0f 92       	push	r0
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	0f 92       	push	r0
     95c:	11 24       	eor	r1, r1
     95e:	2f 93       	push	r18
     960:	3f 93       	push	r19
     962:	4f 93       	push	r20
     964:	5f 93       	push	r21
     966:	6f 93       	push	r22
     968:	7f 93       	push	r23
     96a:	8f 93       	push	r24
     96c:	9f 93       	push	r25
     96e:	af 93       	push	r26
     970:	bf 93       	push	r27
     972:	ef 93       	push	r30
     974:	ff 93       	push	r31
  TIMER0OVF_INT();
     976:	e0 91 51 01 	lds	r30, 0x0151
     97a:	f0 91 52 01 	lds	r31, 0x0152
     97e:	09 95       	icall
}
     980:	ff 91       	pop	r31
     982:	ef 91       	pop	r30
     984:	bf 91       	pop	r27
     986:	af 91       	pop	r26
     988:	9f 91       	pop	r25
     98a:	8f 91       	pop	r24
     98c:	7f 91       	pop	r23
     98e:	6f 91       	pop	r22
     990:	5f 91       	pop	r21
     992:	4f 91       	pop	r20
     994:	3f 91       	pop	r19
     996:	2f 91       	pop	r18
     998:	0f 90       	pop	r0
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	0f 90       	pop	r0
     99e:	1f 90       	pop	r1
     9a0:	18 95       	reti

000009a2 <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
     9a2:	1f 92       	push	r1
     9a4:	0f 92       	push	r0
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	0f 92       	push	r0
     9aa:	11 24       	eor	r1, r1
     9ac:	2f 93       	push	r18
     9ae:	3f 93       	push	r19
     9b0:	4f 93       	push	r20
     9b2:	5f 93       	push	r21
     9b4:	6f 93       	push	r22
     9b6:	7f 93       	push	r23
     9b8:	8f 93       	push	r24
     9ba:	9f 93       	push	r25
     9bc:	af 93       	push	r26
     9be:	bf 93       	push	r27
     9c0:	ef 93       	push	r30
     9c2:	ff 93       	push	r31
  SPI_STC();
     9c4:	e0 91 4d 01 	lds	r30, 0x014D
     9c8:	f0 91 4e 01 	lds	r31, 0x014E
     9cc:	09 95       	icall
}
     9ce:	ff 91       	pop	r31
     9d0:	ef 91       	pop	r30
     9d2:	bf 91       	pop	r27
     9d4:	af 91       	pop	r26
     9d6:	9f 91       	pop	r25
     9d8:	8f 91       	pop	r24
     9da:	7f 91       	pop	r23
     9dc:	6f 91       	pop	r22
     9de:	5f 91       	pop	r21
     9e0:	4f 91       	pop	r20
     9e2:	3f 91       	pop	r19
     9e4:	2f 91       	pop	r18
     9e6:	0f 90       	pop	r0
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	0f 90       	pop	r0
     9ec:	1f 90       	pop	r1
     9ee:	18 95       	reti

000009f0 <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
     9f0:	1f 92       	push	r1
     9f2:	0f 92       	push	r0
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	0f 92       	push	r0
     9f8:	11 24       	eor	r1, r1
     9fa:	2f 93       	push	r18
     9fc:	3f 93       	push	r19
     9fe:	4f 93       	push	r20
     a00:	5f 93       	push	r21
     a02:	6f 93       	push	r22
     a04:	7f 93       	push	r23
     a06:	8f 93       	push	r24
     a08:	9f 93       	push	r25
     a0a:	af 93       	push	r26
     a0c:	bf 93       	push	r27
     a0e:	ef 93       	push	r30
     a10:	ff 93       	push	r31
  USART_RXC();
     a12:	e0 91 3d 01 	lds	r30, 0x013D
     a16:	f0 91 3e 01 	lds	r31, 0x013E
     a1a:	09 95       	icall
}
     a1c:	ff 91       	pop	r31
     a1e:	ef 91       	pop	r30
     a20:	bf 91       	pop	r27
     a22:	af 91       	pop	r26
     a24:	9f 91       	pop	r25
     a26:	8f 91       	pop	r24
     a28:	7f 91       	pop	r23
     a2a:	6f 91       	pop	r22
     a2c:	5f 91       	pop	r21
     a2e:	4f 91       	pop	r20
     a30:	3f 91       	pop	r19
     a32:	2f 91       	pop	r18
     a34:	0f 90       	pop	r0
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	0f 90       	pop	r0
     a3a:	1f 90       	pop	r1
     a3c:	18 95       	reti

00000a3e <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
     a3e:	1f 92       	push	r1
     a40:	0f 92       	push	r0
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	0f 92       	push	r0
     a46:	11 24       	eor	r1, r1
     a48:	2f 93       	push	r18
     a4a:	3f 93       	push	r19
     a4c:	4f 93       	push	r20
     a4e:	5f 93       	push	r21
     a50:	6f 93       	push	r22
     a52:	7f 93       	push	r23
     a54:	8f 93       	push	r24
     a56:	9f 93       	push	r25
     a58:	af 93       	push	r26
     a5a:	bf 93       	push	r27
     a5c:	ef 93       	push	r30
     a5e:	ff 93       	push	r31
  USART_UDRE();
     a60:	e0 91 61 01 	lds	r30, 0x0161
     a64:	f0 91 62 01 	lds	r31, 0x0162
     a68:	09 95       	icall
}
     a6a:	ff 91       	pop	r31
     a6c:	ef 91       	pop	r30
     a6e:	bf 91       	pop	r27
     a70:	af 91       	pop	r26
     a72:	9f 91       	pop	r25
     a74:	8f 91       	pop	r24
     a76:	7f 91       	pop	r23
     a78:	6f 91       	pop	r22
     a7a:	5f 91       	pop	r21
     a7c:	4f 91       	pop	r20
     a7e:	3f 91       	pop	r19
     a80:	2f 91       	pop	r18
     a82:	0f 90       	pop	r0
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	0f 90       	pop	r0
     a88:	1f 90       	pop	r1
     a8a:	18 95       	reti

00000a8c <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
     a8c:	1f 92       	push	r1
     a8e:	0f 92       	push	r0
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	0f 92       	push	r0
     a94:	11 24       	eor	r1, r1
     a96:	2f 93       	push	r18
     a98:	3f 93       	push	r19
     a9a:	4f 93       	push	r20
     a9c:	5f 93       	push	r21
     a9e:	6f 93       	push	r22
     aa0:	7f 93       	push	r23
     aa2:	8f 93       	push	r24
     aa4:	9f 93       	push	r25
     aa6:	af 93       	push	r26
     aa8:	bf 93       	push	r27
     aaa:	ef 93       	push	r30
     aac:	ff 93       	push	r31
  USART_TXC();
     aae:	e0 91 5f 01 	lds	r30, 0x015F
     ab2:	f0 91 60 01 	lds	r31, 0x0160
     ab6:	09 95       	icall
}
     ab8:	ff 91       	pop	r31
     aba:	ef 91       	pop	r30
     abc:	bf 91       	pop	r27
     abe:	af 91       	pop	r26
     ac0:	9f 91       	pop	r25
     ac2:	8f 91       	pop	r24
     ac4:	7f 91       	pop	r23
     ac6:	6f 91       	pop	r22
     ac8:	5f 91       	pop	r21
     aca:	4f 91       	pop	r20
     acc:	3f 91       	pop	r19
     ace:	2f 91       	pop	r18
     ad0:	0f 90       	pop	r0
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	0f 90       	pop	r0
     ad6:	1f 90       	pop	r1
     ad8:	18 95       	reti

00000ada <__vector_21>:

void __vector_21(void) __attribute__((signal));
void __vector_21(void)
{
     ada:	1f 92       	push	r1
     adc:	0f 92       	push	r0
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	0f 92       	push	r0
     ae2:	11 24       	eor	r1, r1
     ae4:	2f 93       	push	r18
     ae6:	3f 93       	push	r19
     ae8:	4f 93       	push	r20
     aea:	5f 93       	push	r21
     aec:	6f 93       	push	r22
     aee:	7f 93       	push	r23
     af0:	8f 93       	push	r24
     af2:	9f 93       	push	r25
     af4:	af 93       	push	r26
     af6:	bf 93       	push	r27
     af8:	ef 93       	push	r30
     afa:	ff 93       	push	r31
  ADC_INT();
     afc:	e0 91 57 01 	lds	r30, 0x0157
     b00:	f0 91 58 01 	lds	r31, 0x0158
     b04:	09 95       	icall
}
     b06:	ff 91       	pop	r31
     b08:	ef 91       	pop	r30
     b0a:	bf 91       	pop	r27
     b0c:	af 91       	pop	r26
     b0e:	9f 91       	pop	r25
     b10:	8f 91       	pop	r24
     b12:	7f 91       	pop	r23
     b14:	6f 91       	pop	r22
     b16:	5f 91       	pop	r21
     b18:	4f 91       	pop	r20
     b1a:	3f 91       	pop	r19
     b1c:	2f 91       	pop	r18
     b1e:	0f 90       	pop	r0
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	0f 90       	pop	r0
     b24:	1f 90       	pop	r1
     b26:	18 95       	reti

00000b28 <__vector_22>:

void __vector_22(void) __attribute__((signal));
void __vector_22(void)
{
     b28:	1f 92       	push	r1
     b2a:	0f 92       	push	r0
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	0f 92       	push	r0
     b30:	11 24       	eor	r1, r1
     b32:	2f 93       	push	r18
     b34:	3f 93       	push	r19
     b36:	4f 93       	push	r20
     b38:	5f 93       	push	r21
     b3a:	6f 93       	push	r22
     b3c:	7f 93       	push	r23
     b3e:	8f 93       	push	r24
     b40:	9f 93       	push	r25
     b42:	af 93       	push	r26
     b44:	bf 93       	push	r27
     b46:	ef 93       	push	r30
     b48:	ff 93       	push	r31
  EE_RDY();
     b4a:	e0 91 59 01 	lds	r30, 0x0159
     b4e:	f0 91 5a 01 	lds	r31, 0x015A
     b52:	09 95       	icall
}
     b54:	ff 91       	pop	r31
     b56:	ef 91       	pop	r30
     b58:	bf 91       	pop	r27
     b5a:	af 91       	pop	r26
     b5c:	9f 91       	pop	r25
     b5e:	8f 91       	pop	r24
     b60:	7f 91       	pop	r23
     b62:	6f 91       	pop	r22
     b64:	5f 91       	pop	r21
     b66:	4f 91       	pop	r20
     b68:	3f 91       	pop	r19
     b6a:	2f 91       	pop	r18
     b6c:	0f 90       	pop	r0
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	0f 90       	pop	r0
     b72:	1f 90       	pop	r1
     b74:	18 95       	reti

00000b76 <__vector_23>:

void __vector_23(void) __attribute__((signal));
void __vector_23(void)
{
     b76:	1f 92       	push	r1
     b78:	0f 92       	push	r0
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	0f 92       	push	r0
     b7e:	11 24       	eor	r1, r1
     b80:	2f 93       	push	r18
     b82:	3f 93       	push	r19
     b84:	4f 93       	push	r20
     b86:	5f 93       	push	r21
     b88:	6f 93       	push	r22
     b8a:	7f 93       	push	r23
     b8c:	8f 93       	push	r24
     b8e:	9f 93       	push	r25
     b90:	af 93       	push	r26
     b92:	bf 93       	push	r27
     b94:	ef 93       	push	r30
     b96:	ff 93       	push	r31
  ANA_COMP();
     b98:	e0 91 53 01 	lds	r30, 0x0153
     b9c:	f0 91 54 01 	lds	r31, 0x0154
     ba0:	09 95       	icall
}
     ba2:	ff 91       	pop	r31
     ba4:	ef 91       	pop	r30
     ba6:	bf 91       	pop	r27
     ba8:	af 91       	pop	r26
     baa:	9f 91       	pop	r25
     bac:	8f 91       	pop	r24
     bae:	7f 91       	pop	r23
     bb0:	6f 91       	pop	r22
     bb2:	5f 91       	pop	r21
     bb4:	4f 91       	pop	r20
     bb6:	3f 91       	pop	r19
     bb8:	2f 91       	pop	r18
     bba:	0f 90       	pop	r0
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	0f 90       	pop	r0
     bc0:	1f 90       	pop	r1
     bc2:	18 95       	reti

00000bc4 <__vector_24>:

void __vector_24(void) __attribute__((signal));
void __vector_24(void)
{
     bc4:	1f 92       	push	r1
     bc6:	0f 92       	push	r0
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	0f 92       	push	r0
     bcc:	11 24       	eor	r1, r1
     bce:	2f 93       	push	r18
     bd0:	3f 93       	push	r19
     bd2:	4f 93       	push	r20
     bd4:	5f 93       	push	r21
     bd6:	6f 93       	push	r22
     bd8:	7f 93       	push	r23
     bda:	8f 93       	push	r24
     bdc:	9f 93       	push	r25
     bde:	af 93       	push	r26
     be0:	bf 93       	push	r27
     be2:	ef 93       	push	r30
     be4:	ff 93       	push	r31
  TWI_I2C();
     be6:	e0 91 3b 01 	lds	r30, 0x013B
     bea:	f0 91 3c 01 	lds	r31, 0x013C
     bee:	09 95       	icall
}
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <__vector_25>:

void __vector_25(void) __attribute__((signal));
void __vector_25(void)
{
     c12:	1f 92       	push	r1
     c14:	0f 92       	push	r0
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	0f 92       	push	r0
     c1a:	11 24       	eor	r1, r1
     c1c:	2f 93       	push	r18
     c1e:	3f 93       	push	r19
     c20:	4f 93       	push	r20
     c22:	5f 93       	push	r21
     c24:	6f 93       	push	r22
     c26:	7f 93       	push	r23
     c28:	8f 93       	push	r24
     c2a:	9f 93       	push	r25
     c2c:	af 93       	push	r26
     c2e:	bf 93       	push	r27
     c30:	ef 93       	push	r30
     c32:	ff 93       	push	r31
  SPM_RDY();
     c34:	e0 91 43 01 	lds	r30, 0x0143
     c38:	f0 91 44 01 	lds	r31, 0x0144
     c3c:	09 95       	icall
}
     c3e:	ff 91       	pop	r31
     c40:	ef 91       	pop	r30
     c42:	bf 91       	pop	r27
     c44:	af 91       	pop	r26
     c46:	9f 91       	pop	r25
     c48:	8f 91       	pop	r24
     c4a:	7f 91       	pop	r23
     c4c:	6f 91       	pop	r22
     c4e:	5f 91       	pop	r21
     c50:	4f 91       	pop	r20
     c52:	3f 91       	pop	r19
     c54:	2f 91       	pop	r18
     c56:	0f 90       	pop	r0
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	0f 90       	pop	r0
     c5c:	1f 90       	pop	r1
     c5e:	18 95       	reti

00000c60 <main>:
#include "DIO.h"
#include "ICU.h"
static uint32_t timespend=0;
int main(void)
{
	DIO_init(&Dio_configurationD);
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_init>
	Pwm_Init(&PWM_Configuration_0);
     c68:	85 e1       	ldi	r24, 0x15	; 21
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	0e 94 51 06 	call	0xca2	; 0xca2 <Pwm_Init>
	DIO_Write(GPIOD,PIN6,HIGH);
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	60 e4       	ldi	r22, 0x40	; 64
     c74:	4f ef       	ldi	r20, 0xFF	; 255
     c76:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
  Icu_Init(&ICU_Configuration);
     c7a:	89 e0       	ldi	r24, 0x09	; 9
     c7c:	91 e0       	ldi	r25, 0x01	; 1
     c7e:	0e 94 45 01 	call	0x28a	; 0x28a <Icu_Init>
	while(1)
    {
		Pwm_Start(PWM_CH0,60,10);
	  Icu_ReadTime(ICU_CH0,ICU_RISE_TO_FALL,&timespend);
     c82:	c5 e3       	ldi	r28, 0x35	; 53
     c84:	d1 e0       	ldi	r29, 0x01	; 1
	Pwm_Init(&PWM_Configuration_0);
	DIO_Write(GPIOD,PIN6,HIGH);
  Icu_Init(&ICU_Configuration);
	while(1)
    {
		Pwm_Start(PWM_CH0,60,10);
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	6c e3       	ldi	r22, 0x3C	; 60
     c8a:	2a e0       	ldi	r18, 0x0A	; 10
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	40 e0       	ldi	r20, 0x00	; 0
     c90:	50 e0       	ldi	r21, 0x00	; 0
     c92:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Pwm_Start>
	  Icu_ReadTime(ICU_CH0,ICU_RISE_TO_FALL,&timespend);
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	61 e0       	ldi	r22, 0x01	; 1
     c9a:	ae 01       	movw	r20, r28
     c9c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <Icu_ReadTime>
     ca0:	f2 cf       	rjmp	.-28     	; 0xc86 <main+0x26>

00000ca2 <Pwm_Init>:
/* Return type : void                                                            */
/*                                                                               */
/* Description: initialize the PWM configuration                                 */
/*********************************************************************************/
ERROR_STATUS Pwm_Init(Pwm_Cfg_s *Pwm_Cfg)
{
     ca2:	fc 01       	movw	r30, r24
  uint8_t Ret=0;
  switch(Pwm_Cfg->Channel)
     ca4:	80 81       	ld	r24, Z
     ca6:	88 23       	and	r24, r24
     ca8:	29 f4       	brne	.+10     	; 0xcb4 <Pwm_Init+0x12>
    {
      case PWM_CH0:
      TCCR0|=T0_PWM_FAST |T0_NON_INVERTING;
     caa:	84 b5       	in	r24, 0x24	; 36
     cac:	95 b5       	in	r25, 0x25	; 37
     cae:	83 68       	ori	r24, 0x83	; 131
     cb0:	95 bd       	out	0x25, r25	; 37
     cb2:	84 bd       	out	0x24, r24	; 36
      break;
      default:
      Ret=E_NOK;
      break;*/
    }
  sgl_Prescaler=Pwm_Cfg->Prescaler;
     cb4:	81 81       	ldd	r24, Z+1	; 0x01
     cb6:	80 93 39 01 	sts	0x0139, r24
  u32g_T1_Prescaler=en_prescal;
  OCR1A =u16_outputCompareA;
  OCR1B =u16_outputCompareB;
  TCNT1=u16_initialValue;
  */
}
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	08 95       	ret

00000cbe <Pwm_Start>:
/*-------------------------------------------------------                        */
/*((all this calculations are for phase correct mode))                           */
/*all this calculation for F_CPU 16MHz                                           */
/*********************************************************************************/
ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{uint8_t Ret=0;
     cbe:	0f 93       	push	r16
     cc0:	1f 93       	push	r17
     cc2:	96 2f       	mov	r25, r22
     cc4:	ba 01       	movw	r22, r20
     cc6:	a9 01       	movw	r20, r18
  float dutyReal;
uint32_t pwm_time_on = MAX_HOLD;

if(Frequncy <= 31372 && Frequncy > 3921 )
     cc8:	8a 01       	movw	r16, r20
     cca:	9b 01       	movw	r18, r22
     ccc:	02 55       	subi	r16, 0x52	; 82
     cce:	1f 40       	sbci	r17, 0x0F	; 15
     cd0:	20 40       	sbci	r18, 0x00	; 0
     cd2:	30 40       	sbci	r19, 0x00	; 0
     cd4:	0b 33       	cpi	r16, 0x3B	; 59
     cd6:	eb e6       	ldi	r30, 0x6B	; 107
     cd8:	1e 07       	cpc	r17, r30
     cda:	e0 e0       	ldi	r30, 0x00	; 0
     cdc:	2e 07       	cpc	r18, r30
     cde:	e0 e0       	ldi	r30, 0x00	; 0
     ce0:	3e 07       	cpc	r19, r30
     ce2:	18 f4       	brcc	.+6      	; 0xcea <Pwm_Start+0x2c>
  sgl_Prescaler=PWM_PRESCALER_NO;
     ce4:	10 92 39 01 	sts	0x0139, r1
     ce8:	64 c0       	rjmp	.+200    	; 0xdb2 <Pwm_Start+0xf4>
else if(Frequncy <= 3921 && Frequncy > 980)
     cea:	8a 01       	movw	r16, r20
     cec:	9b 01       	movw	r18, r22
     cee:	05 5d       	subi	r16, 0xD5	; 213
     cf0:	13 40       	sbci	r17, 0x03	; 3
     cf2:	20 40       	sbci	r18, 0x00	; 0
     cf4:	30 40       	sbci	r19, 0x00	; 0
     cf6:	0d 37       	cpi	r16, 0x7D	; 125
     cf8:	eb e0       	ldi	r30, 0x0B	; 11
     cfa:	1e 07       	cpc	r17, r30
     cfc:	e0 e0       	ldi	r30, 0x00	; 0
     cfe:	2e 07       	cpc	r18, r30
     d00:	e0 e0       	ldi	r30, 0x00	; 0
     d02:	3e 07       	cpc	r19, r30
     d04:	20 f4       	brcc	.+8      	; 0xd0e <Pwm_Start+0x50>
  sgl_Prescaler=PWM_PRESCALER_8;
     d06:	21 e0       	ldi	r18, 0x01	; 1
     d08:	20 93 39 01 	sts	0x0139, r18
     d0c:	58 c0       	rjmp	.+176    	; 0xdbe <Pwm_Start+0x100>
else if(Frequncy <= 980 && Frequncy > 490)
     d0e:	8a 01       	movw	r16, r20
     d10:	9b 01       	movw	r18, r22
     d12:	0b 5e       	subi	r16, 0xEB	; 235
     d14:	11 40       	sbci	r17, 0x01	; 1
     d16:	20 40       	sbci	r18, 0x00	; 0
     d18:	30 40       	sbci	r19, 0x00	; 0
     d1a:	0a 3e       	cpi	r16, 0xEA	; 234
     d1c:	e1 e0       	ldi	r30, 0x01	; 1
     d1e:	1e 07       	cpc	r17, r30
     d20:	e0 e0       	ldi	r30, 0x00	; 0
     d22:	2e 07       	cpc	r18, r30
     d24:	e0 e0       	ldi	r30, 0x00	; 0
     d26:	3e 07       	cpc	r19, r30
     d28:	20 f4       	brcc	.+8      	; 0xd32 <Pwm_Start+0x74>
  sgl_Prescaler=PWM_PRESCALER_32;
     d2a:	22 e0       	ldi	r18, 0x02	; 2
     d2c:	20 93 39 01 	sts	0x0139, r18
     d30:	4c c0       	rjmp	.+152    	; 0xdca <Pwm_Start+0x10c>
else if(Frequncy <= 490 && Frequncy > 122)
     d32:	8a 01       	movw	r16, r20
     d34:	9b 01       	movw	r18, r22
     d36:	0b 57       	subi	r16, 0x7B	; 123
     d38:	10 40       	sbci	r17, 0x00	; 0
     d3a:	20 40       	sbci	r18, 0x00	; 0
     d3c:	30 40       	sbci	r19, 0x00	; 0
     d3e:	00 37       	cpi	r16, 0x70	; 112
     d40:	e1 e0       	ldi	r30, 0x01	; 1
     d42:	1e 07       	cpc	r17, r30
     d44:	e0 e0       	ldi	r30, 0x00	; 0
     d46:	2e 07       	cpc	r18, r30
     d48:	e0 e0       	ldi	r30, 0x00	; 0
     d4a:	3e 07       	cpc	r19, r30
     d4c:	20 f4       	brcc	.+8      	; 0xd56 <Pwm_Start+0x98>
  sgl_Prescaler=PWM_PRESCALER_64;
     d4e:	23 e0       	ldi	r18, 0x03	; 3
     d50:	20 93 39 01 	sts	0x0139, r18
     d54:	45 c0       	rjmp	.+138    	; 0xde0 <Pwm_Start+0x122>
else if(Frequncy <= 122 && Frequncy > 31)
     d56:	8a 01       	movw	r16, r20
     d58:	9b 01       	movw	r18, r22
     d5a:	00 52       	subi	r16, 0x20	; 32
     d5c:	10 40       	sbci	r17, 0x00	; 0
     d5e:	20 40       	sbci	r18, 0x00	; 0
     d60:	30 40       	sbci	r19, 0x00	; 0
     d62:	0b 35       	cpi	r16, 0x5B	; 91
     d64:	11 05       	cpc	r17, r1
     d66:	21 05       	cpc	r18, r1
     d68:	31 05       	cpc	r19, r1
     d6a:	20 f4       	brcc	.+8      	; 0xd74 <Pwm_Start+0xb6>
  sgl_Prescaler=PWM_PRESCALER_256;
     d6c:	24 e0       	ldi	r18, 0x04	; 4
     d6e:	20 93 39 01 	sts	0x0139, r18
     d72:	3c c0       	rjmp	.+120    	; 0xdec <Pwm_Start+0x12e>
else if(Frequncy <= 31 && Frequncy > 0)
     d74:	41 50       	subi	r20, 0x01	; 1
     d76:	50 40       	sbci	r21, 0x00	; 0
     d78:	60 40       	sbci	r22, 0x00	; 0
     d7a:	70 40       	sbci	r23, 0x00	; 0
     d7c:	4f 31       	cpi	r20, 0x1F	; 31
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	20 f4       	brcc	.+8      	; 0xd8e <Pwm_Start+0xd0>
  sgl_Prescaler=PWM_PRESCALER_1024;
     d86:	25 e0       	ldi	r18, 0x05	; 5
     d88:	20 93 39 01 	sts	0x0139, r18
     d8c:	35 c0       	rjmp	.+106    	; 0xdf8 <Pwm_Start+0x13a>
else{Ret=E_NOK;}
switch(sgl_Prescaler)
     d8e:	20 91 39 01 	lds	r18, 0x0139
     d92:	22 30       	cpi	r18, 0x02	; 2
     d94:	d1 f0       	breq	.+52     	; 0xdca <Pwm_Start+0x10c>
     d96:	23 30       	cpi	r18, 0x03	; 3
     d98:	28 f4       	brcc	.+10     	; 0xda4 <Pwm_Start+0xe6>
     d9a:	22 23       	and	r18, r18
     d9c:	51 f0       	breq	.+20     	; 0xdb2 <Pwm_Start+0xf4>
     d9e:	21 30       	cpi	r18, 0x01	; 1
     da0:	89 f5       	brne	.+98     	; 0xe04 <Pwm_Start+0x146>
     da2:	0d c0       	rjmp	.+26     	; 0xdbe <Pwm_Start+0x100>
     da4:	24 30       	cpi	r18, 0x04	; 4
     da6:	11 f1       	breq	.+68     	; 0xdec <Pwm_Start+0x12e>
     da8:	24 30       	cpi	r18, 0x04	; 4
     daa:	d0 f0       	brcs	.+52     	; 0xde0 <Pwm_Start+0x122>
     dac:	25 30       	cpi	r18, 0x05	; 5
     dae:	51 f5       	brne	.+84     	; 0xe04 <Pwm_Start+0x146>
     db0:	23 c0       	rjmp	.+70     	; 0xdf8 <Pwm_Start+0x13a>
{
  case PWM_PRESCALER_NO:
  {
    switch(Channel)
     db2:	88 23       	and	r24, r24
     db4:	39 f5       	brne	.+78     	; 0xe04 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B |= PWM_PRESCALER_NO_CONFIG;
     db6:	85 b5       	in	r24, 0x25	; 37
     db8:	81 60       	ori	r24, 0x01	; 1
     dba:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     dbc:	25 c0       	rjmp	.+74     	; 0xe08 <Pwm_Start+0x14a>
  }


  case PWM_PRESCALER_8:
  {
    switch(Channel)
     dbe:	88 23       	and	r24, r24
     dc0:	09 f5       	brne	.+66     	; 0xe04 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_8_CONFIG;
     dc2:	85 b5       	in	r24, 0x25	; 37
     dc4:	82 60       	ori	r24, 0x02	; 2
     dc6:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     dc8:	1f c0       	rjmp	.+62     	; 0xe08 <Pwm_Start+0x14a>
    break;
  }

  case PWM_PRESCALER_32:
  {
    switch(Channel)
     dca:	83 30       	cpi	r24, 0x03	; 3
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <Pwm_Start+0x146>
    {
      case PWM_CH2:
      {TCCR2|=PWM_PRESCALER_32_CONFIG_T2;
     dce:	e0 eb       	ldi	r30, 0xB0	; 176
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	91 81       	ldd	r25, Z+1	; 0x01
     dd6:	83 60       	ori	r24, 0x03	; 3
     dd8:	91 83       	std	Z+1, r25	; 0x01
     dda:	80 83       	st	Z, r24
      Ret=E_OK;
      }
      break;
  */
      default:
      Ret=E_NOK;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	2f c0       	rjmp	.+94     	; 0xe3e <Pwm_Start+0x180>
    break;
  }

  case PWM_PRESCALER_64:
  {
    switch(Channel)
     de0:	88 23       	and	r24, r24
     de2:	81 f4       	brne	.+32     	; 0xe04 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_64_CONFIG;
     de4:	85 b5       	in	r24, 0x25	; 37
     de6:	83 60       	ori	r24, 0x03	; 3
     de8:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     dea:	0e c0       	rjmp	.+28     	; 0xe08 <Pwm_Start+0x14a>
    break;
  }

  case PWM_PRESCALER_256:
  {
    switch(Channel)
     dec:	88 23       	and	r24, r24
     dee:	51 f4       	brne	.+20     	; 0xe04 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_64_CONFIG;
     df0:	85 b5       	in	r24, 0x25	; 37
     df2:	83 60       	ori	r24, 0x03	; 3
     df4:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     df6:	08 c0       	rjmp	.+16     	; 0xe08 <Pwm_Start+0x14a>
  }

 
  case PWM_PRESCALER_1024:
  {
    switch(Channel)
     df8:	88 23       	and	r24, r24
     dfa:	21 f4       	brne	.+8      	; 0xe04 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_1024_CONFIG;
     dfc:	85 b5       	in	r24, 0x25	; 37
     dfe:	85 60       	ori	r24, 0x05	; 5
     e00:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <Pwm_Start+0x14a>



}

switch(Channel)
     e04:	88 23       	and	r24, r24
     e06:	d1 f4       	brne	.+52     	; 0xe3c <Pwm_Start+0x17e>
    {
      case PWM_CH0:{
      pwm_time_on=MAX_HOLD;
      dutyReal=((float)Duty/(float)FULL_SPEED);
     e08:	69 2f       	mov	r22, r25
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 1e 08 	call	0x103c	; 0x103c <__floatunsisf>
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	48 ec       	ldi	r20, 0xC8	; 200
     e1a:	52 e4       	ldi	r21, 0x42	; 66
     e1c:	0e 94 8a 07 	call	0xf14	; 0xf14 <__divsf3>
      pwm_time_on=(float)pwm_time_on*dutyReal;
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	4f e7       	ldi	r20, 0x7F	; 127
     e26:	53 e4       	ldi	r21, 0x43	; 67
     e28:	0e 94 ac 08 	call	0x1158	; 0x1158 <__mulsf3>
     e2c:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <__fixunssfsi>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
      OCR0=pwm_time_on;
     e34:	98 bd       	out	0x28, r25	; 40
     e36:	87 bd       	out	0x27, r24	; 39
      Ret=E_OK;
     e38:	80 e0       	ldi	r24, 0x00	; 0
      break;
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <Pwm_Start+0x180>
      Ret=E_OK;
      }
      break;
  */
      default:
      Ret=E_NOK;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
      break;
    }
sgl_is_started=1;
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	90 93 3a 01 	sts	0x013A, r25
return Ret;
}
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	08 95       	ret

00000e4a <Pwm_Update>:


ERROR_STATUS Pwm_Update(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
uint8_t Ret=0;
if (sgl_is_started == 1)
     e4a:	90 91 3a 01 	lds	r25, 0x013A
     e4e:	91 30       	cpi	r25, 0x01	; 1
     e50:	21 f4       	brne	.+8      	; 0xe5a <Pwm_Update+0x10>
{
  Pwm_Start( Channel,Duty,Frequncy);
     e52:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Pwm_Start>
Ret=E_OK;
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	08 95       	ret
}else{Ret=E_NOK;}
     e5a:	81 e0       	ldi	r24, 0x01	; 1


return Ret;
}
     e5c:	08 95       	ret

00000e5e <Pwm_Stop>:
/*********************************************************************************/

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
uint8_t Ret=0;
switch(Channel)
     e5e:	83 30       	cpi	r24, 0x03	; 3
     e60:	18 f4       	brcc	.+6      	; 0xe68 <Pwm_Stop+0xa>
     e62:	81 30       	cpi	r24, 0x01	; 1
     e64:	60 f4       	brcc	.+24     	; 0xe7e <Pwm_Stop+0x20>
     e66:	03 c0       	rjmp	.+6      	; 0xe6e <Pwm_Stop+0x10>
     e68:	83 30       	cpi	r24, 0x03	; 3
     e6a:	d1 f4       	brne	.+52     	; 0xea0 <Pwm_Stop+0x42>
     e6c:	0f c0       	rjmp	.+30     	; 0xe8c <Pwm_Stop+0x2e>
{
  case PWM_CH0:
  TCCR0 &=TIMER_STOPT02;
     e6e:	84 b5       	in	r24, 0x24	; 36
     e70:	95 b5       	in	r25, 0x25	; 37
     e72:	88 7f       	andi	r24, 0xF8	; 248
     e74:	90 70       	andi	r25, 0x00	; 0
     e76:	95 bd       	out	0x25, r25	; 37
     e78:	84 bd       	out	0x24, r24	; 36
  Ret=E_OK;
     e7a:	80 e0       	ldi	r24, 0x00	; 0
  break;
     e7c:	08 95       	ret

  case PWM_CH1A:
  case PWM_CH1B:
  TCCR0 &=TIMER_STOPT1;
     e7e:	84 b5       	in	r24, 0x24	; 36
     e80:	95 b5       	in	r25, 0x25	; 37
     e82:	98 7f       	andi	r25, 0xF8	; 248
     e84:	95 bd       	out	0x25, r25	; 37
     e86:	84 bd       	out	0x24, r24	; 36
  Ret=E_OK;
     e88:	80 e0       	ldi	r24, 0x00	; 0
  break;
     e8a:	08 95       	ret


  case PWM_CH2:
  TCCR2 &=TIMER_STOPT02;
     e8c:	e0 eb       	ldi	r30, 0xB0	; 176
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	88 7f       	andi	r24, 0xF8	; 248
     e96:	90 70       	andi	r25, 0x00	; 0
     e98:	91 83       	std	Z+1, r25	; 0x01
     e9a:	80 83       	st	Z, r24
  Ret=E_OK;
     e9c:	80 e0       	ldi	r24, 0x00	; 0
  break;
     e9e:	08 95       	ret
  default:
  Ret=E_NOK;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
  break;
}

return Ret;
}
     ea2:	08 95       	ret

00000ea4 <Us_Init>:
 *                                                                                                  *
 ***************************************************************************************************/

ERROR_STATUS Us_Init(void)
{uint8_t Ret;
Ret=DIO_init(&US_Configuration);
     ea4:	8b e1       	ldi	r24, 0x1B	; 27
     ea6:	91 e0       	ldi	r25, 0x01	; 1
     ea8:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_init>
Ret=Icu_Init(&ICU_Configuration);
     eac:	89 e0       	ldi	r24, 0x09	; 9
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	0e 94 45 01 	call	0x28a	; 0x28a <Icu_Init>
return Ret;
}
     eb4:	08 95       	ret

00000eb6 <Us_Trigger>:
ERROR_STATUS Us_Trigger(void)
{uint8_t Ret=0;
Ret=DIO_Write(GPIOC,BIT4,HIGH);
     eb6:	82 e0       	ldi	r24, 0x02	; 2
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	60 e1       	ldi	r22, 0x10	; 16
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	4f ef       	ldi	r20, 0xFF	; 255
     ec0:	50 e0       	ldi	r21, 0x00	; 0
     ec2:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
//timer2Start();
//timer2DelayMs(1);
Ret=DIO_Write(GPIOC,BIT4,LOW);
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	60 e1       	ldi	r22, 0x10	; 16
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	40 e0       	ldi	r20, 0x00	; 0
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
return Ret;	
}
     ed6:	08 95       	ret

00000ed8 <Us_GetDistance>:


ERROR_STATUS Us_GetDistance(uint16_t *Distance)
{uint8_t Ret=0;
     ed8:	0f 93       	push	r16
     eda:	1f 93       	push	r17
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <Us_GetDistance+0xa>
     ee2:	00 d0       	rcall	.+0      	; 0xee4 <Us_GetDistance+0xc>
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	8c 01       	movw	r16, r24
	uint32_t u32l_Time;
	Ret=Icu_ReadTime(ICU_CH2,ICU_RISE_TO_FALL,&u32l_Time);
     eea:	82 e0       	ldi	r24, 0x02	; 2
     eec:	61 e0       	ldi	r22, 0x01	; 1
     eee:	ae 01       	movw	r20, r28
     ef0:	4f 5f       	subi	r20, 0xFF	; 255
     ef2:	5f 4f       	sbci	r21, 0xFF	; 255
     ef4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <Icu_ReadTime>
	*Distance=u32l_Time;
     ef8:	29 81       	ldd	r18, Y+1	; 0x01
     efa:	3a 81       	ldd	r19, Y+2	; 0x02
     efc:	f8 01       	movw	r30, r16
     efe:	31 83       	std	Z+1, r19	; 0x01
     f00:	20 83       	st	Z, r18
	return Ret;
}
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	08 95       	ret

00000f14 <__divsf3>:
     f14:	0c d0       	rcall	.+24     	; 0xf2e <__divsf3x>
     f16:	e6 c0       	rjmp	.+460    	; 0x10e4 <__fp_round>
     f18:	de d0       	rcall	.+444    	; 0x10d6 <__fp_pscB>
     f1a:	40 f0       	brcs	.+16     	; 0xf2c <__divsf3+0x18>
     f1c:	d5 d0       	rcall	.+426    	; 0x10c8 <__fp_pscA>
     f1e:	30 f0       	brcs	.+12     	; 0xf2c <__divsf3+0x18>
     f20:	21 f4       	brne	.+8      	; 0xf2a <__divsf3+0x16>
     f22:	5f 3f       	cpi	r21, 0xFF	; 255
     f24:	19 f0       	breq	.+6      	; 0xf2c <__divsf3+0x18>
     f26:	c7 c0       	rjmp	.+398    	; 0x10b6 <__fp_inf>
     f28:	51 11       	cpse	r21, r1
     f2a:	10 c1       	rjmp	.+544    	; 0x114c <__fp_szero>
     f2c:	ca c0       	rjmp	.+404    	; 0x10c2 <__fp_nan>

00000f2e <__divsf3x>:
     f2e:	eb d0       	rcall	.+470    	; 0x1106 <__fp_split3>
     f30:	98 f3       	brcs	.-26     	; 0xf18 <__divsf3+0x4>

00000f32 <__divsf3_pse>:
     f32:	99 23       	and	r25, r25
     f34:	c9 f3       	breq	.-14     	; 0xf28 <__divsf3+0x14>
     f36:	55 23       	and	r21, r21
     f38:	b1 f3       	breq	.-20     	; 0xf26 <__divsf3+0x12>
     f3a:	95 1b       	sub	r25, r21
     f3c:	55 0b       	sbc	r21, r21
     f3e:	bb 27       	eor	r27, r27
     f40:	aa 27       	eor	r26, r26
     f42:	62 17       	cp	r22, r18
     f44:	73 07       	cpc	r23, r19
     f46:	84 07       	cpc	r24, r20
     f48:	38 f0       	brcs	.+14     	; 0xf58 <__divsf3_pse+0x26>
     f4a:	9f 5f       	subi	r25, 0xFF	; 255
     f4c:	5f 4f       	sbci	r21, 0xFF	; 255
     f4e:	22 0f       	add	r18, r18
     f50:	33 1f       	adc	r19, r19
     f52:	44 1f       	adc	r20, r20
     f54:	aa 1f       	adc	r26, r26
     f56:	a9 f3       	breq	.-22     	; 0xf42 <__divsf3_pse+0x10>
     f58:	33 d0       	rcall	.+102    	; 0xfc0 <__divsf3_pse+0x8e>
     f5a:	0e 2e       	mov	r0, r30
     f5c:	3a f0       	brmi	.+14     	; 0xf6c <__divsf3_pse+0x3a>
     f5e:	e0 e8       	ldi	r30, 0x80	; 128
     f60:	30 d0       	rcall	.+96     	; 0xfc2 <__divsf3_pse+0x90>
     f62:	91 50       	subi	r25, 0x01	; 1
     f64:	50 40       	sbci	r21, 0x00	; 0
     f66:	e6 95       	lsr	r30
     f68:	00 1c       	adc	r0, r0
     f6a:	ca f7       	brpl	.-14     	; 0xf5e <__divsf3_pse+0x2c>
     f6c:	29 d0       	rcall	.+82     	; 0xfc0 <__divsf3_pse+0x8e>
     f6e:	fe 2f       	mov	r31, r30
     f70:	27 d0       	rcall	.+78     	; 0xfc0 <__divsf3_pse+0x8e>
     f72:	66 0f       	add	r22, r22
     f74:	77 1f       	adc	r23, r23
     f76:	88 1f       	adc	r24, r24
     f78:	bb 1f       	adc	r27, r27
     f7a:	26 17       	cp	r18, r22
     f7c:	37 07       	cpc	r19, r23
     f7e:	48 07       	cpc	r20, r24
     f80:	ab 07       	cpc	r26, r27
     f82:	b0 e8       	ldi	r27, 0x80	; 128
     f84:	09 f0       	breq	.+2      	; 0xf88 <__divsf3_pse+0x56>
     f86:	bb 0b       	sbc	r27, r27
     f88:	80 2d       	mov	r24, r0
     f8a:	bf 01       	movw	r22, r30
     f8c:	ff 27       	eor	r31, r31
     f8e:	93 58       	subi	r25, 0x83	; 131
     f90:	5f 4f       	sbci	r21, 0xFF	; 255
     f92:	2a f0       	brmi	.+10     	; 0xf9e <__divsf3_pse+0x6c>
     f94:	9e 3f       	cpi	r25, 0xFE	; 254
     f96:	51 05       	cpc	r21, r1
     f98:	68 f0       	brcs	.+26     	; 0xfb4 <__divsf3_pse+0x82>
     f9a:	8d c0       	rjmp	.+282    	; 0x10b6 <__fp_inf>
     f9c:	d7 c0       	rjmp	.+430    	; 0x114c <__fp_szero>
     f9e:	5f 3f       	cpi	r21, 0xFF	; 255
     fa0:	ec f3       	brlt	.-6      	; 0xf9c <__divsf3_pse+0x6a>
     fa2:	98 3e       	cpi	r25, 0xE8	; 232
     fa4:	dc f3       	brlt	.-10     	; 0xf9c <__divsf3_pse+0x6a>
     fa6:	86 95       	lsr	r24
     fa8:	77 95       	ror	r23
     faa:	67 95       	ror	r22
     fac:	b7 95       	ror	r27
     fae:	f7 95       	ror	r31
     fb0:	9f 5f       	subi	r25, 0xFF	; 255
     fb2:	c9 f7       	brne	.-14     	; 0xfa6 <__divsf3_pse+0x74>
     fb4:	88 0f       	add	r24, r24
     fb6:	91 1d       	adc	r25, r1
     fb8:	96 95       	lsr	r25
     fba:	87 95       	ror	r24
     fbc:	97 f9       	bld	r25, 7
     fbe:	08 95       	ret
     fc0:	e1 e0       	ldi	r30, 0x01	; 1
     fc2:	66 0f       	add	r22, r22
     fc4:	77 1f       	adc	r23, r23
     fc6:	88 1f       	adc	r24, r24
     fc8:	bb 1f       	adc	r27, r27
     fca:	62 17       	cp	r22, r18
     fcc:	73 07       	cpc	r23, r19
     fce:	84 07       	cpc	r24, r20
     fd0:	ba 07       	cpc	r27, r26
     fd2:	20 f0       	brcs	.+8      	; 0xfdc <__divsf3_pse+0xaa>
     fd4:	62 1b       	sub	r22, r18
     fd6:	73 0b       	sbc	r23, r19
     fd8:	84 0b       	sbc	r24, r20
     fda:	ba 0b       	sbc	r27, r26
     fdc:	ee 1f       	adc	r30, r30
     fde:	88 f7       	brcc	.-30     	; 0xfc2 <__divsf3_pse+0x90>
     fe0:	e0 95       	com	r30
     fe2:	08 95       	ret

00000fe4 <__fixunssfsi>:
     fe4:	98 d0       	rcall	.+304    	; 0x1116 <__fp_splitA>
     fe6:	88 f0       	brcs	.+34     	; 0x100a <__fixunssfsi+0x26>
     fe8:	9f 57       	subi	r25, 0x7F	; 127
     fea:	90 f0       	brcs	.+36     	; 0x1010 <__fixunssfsi+0x2c>
     fec:	b9 2f       	mov	r27, r25
     fee:	99 27       	eor	r25, r25
     ff0:	b7 51       	subi	r27, 0x17	; 23
     ff2:	a0 f0       	brcs	.+40     	; 0x101c <__fixunssfsi+0x38>
     ff4:	d1 f0       	breq	.+52     	; 0x102a <__fixunssfsi+0x46>
     ff6:	66 0f       	add	r22, r22
     ff8:	77 1f       	adc	r23, r23
     ffa:	88 1f       	adc	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	1a f0       	brmi	.+6      	; 0x1006 <__fixunssfsi+0x22>
    1000:	ba 95       	dec	r27
    1002:	c9 f7       	brne	.-14     	; 0xff6 <__fixunssfsi+0x12>
    1004:	12 c0       	rjmp	.+36     	; 0x102a <__fixunssfsi+0x46>
    1006:	b1 30       	cpi	r27, 0x01	; 1
    1008:	81 f0       	breq	.+32     	; 0x102a <__fixunssfsi+0x46>
    100a:	9f d0       	rcall	.+318    	; 0x114a <__fp_zero>
    100c:	b1 e0       	ldi	r27, 0x01	; 1
    100e:	08 95       	ret
    1010:	9c c0       	rjmp	.+312    	; 0x114a <__fp_zero>
    1012:	67 2f       	mov	r22, r23
    1014:	78 2f       	mov	r23, r24
    1016:	88 27       	eor	r24, r24
    1018:	b8 5f       	subi	r27, 0xF8	; 248
    101a:	39 f0       	breq	.+14     	; 0x102a <__fixunssfsi+0x46>
    101c:	b9 3f       	cpi	r27, 0xF9	; 249
    101e:	cc f3       	brlt	.-14     	; 0x1012 <__fixunssfsi+0x2e>
    1020:	86 95       	lsr	r24
    1022:	77 95       	ror	r23
    1024:	67 95       	ror	r22
    1026:	b3 95       	inc	r27
    1028:	d9 f7       	brne	.-10     	; 0x1020 <__fixunssfsi+0x3c>
    102a:	3e f4       	brtc	.+14     	; 0x103a <__fixunssfsi+0x56>
    102c:	90 95       	com	r25
    102e:	80 95       	com	r24
    1030:	70 95       	com	r23
    1032:	61 95       	neg	r22
    1034:	7f 4f       	sbci	r23, 0xFF	; 255
    1036:	8f 4f       	sbci	r24, 0xFF	; 255
    1038:	9f 4f       	sbci	r25, 0xFF	; 255
    103a:	08 95       	ret

0000103c <__floatunsisf>:
    103c:	e8 94       	clt
    103e:	09 c0       	rjmp	.+18     	; 0x1052 <__floatsisf+0x12>

00001040 <__floatsisf>:
    1040:	97 fb       	bst	r25, 7
    1042:	3e f4       	brtc	.+14     	; 0x1052 <__floatsisf+0x12>
    1044:	90 95       	com	r25
    1046:	80 95       	com	r24
    1048:	70 95       	com	r23
    104a:	61 95       	neg	r22
    104c:	7f 4f       	sbci	r23, 0xFF	; 255
    104e:	8f 4f       	sbci	r24, 0xFF	; 255
    1050:	9f 4f       	sbci	r25, 0xFF	; 255
    1052:	99 23       	and	r25, r25
    1054:	a9 f0       	breq	.+42     	; 0x1080 <__floatsisf+0x40>
    1056:	f9 2f       	mov	r31, r25
    1058:	96 e9       	ldi	r25, 0x96	; 150
    105a:	bb 27       	eor	r27, r27
    105c:	93 95       	inc	r25
    105e:	f6 95       	lsr	r31
    1060:	87 95       	ror	r24
    1062:	77 95       	ror	r23
    1064:	67 95       	ror	r22
    1066:	b7 95       	ror	r27
    1068:	f1 11       	cpse	r31, r1
    106a:	f8 cf       	rjmp	.-16     	; 0x105c <__floatsisf+0x1c>
    106c:	fa f4       	brpl	.+62     	; 0x10ac <__floatsisf+0x6c>
    106e:	bb 0f       	add	r27, r27
    1070:	11 f4       	brne	.+4      	; 0x1076 <__floatsisf+0x36>
    1072:	60 ff       	sbrs	r22, 0
    1074:	1b c0       	rjmp	.+54     	; 0x10ac <__floatsisf+0x6c>
    1076:	6f 5f       	subi	r22, 0xFF	; 255
    1078:	7f 4f       	sbci	r23, 0xFF	; 255
    107a:	8f 4f       	sbci	r24, 0xFF	; 255
    107c:	9f 4f       	sbci	r25, 0xFF	; 255
    107e:	16 c0       	rjmp	.+44     	; 0x10ac <__floatsisf+0x6c>
    1080:	88 23       	and	r24, r24
    1082:	11 f0       	breq	.+4      	; 0x1088 <__floatsisf+0x48>
    1084:	96 e9       	ldi	r25, 0x96	; 150
    1086:	11 c0       	rjmp	.+34     	; 0x10aa <__floatsisf+0x6a>
    1088:	77 23       	and	r23, r23
    108a:	21 f0       	breq	.+8      	; 0x1094 <__floatsisf+0x54>
    108c:	9e e8       	ldi	r25, 0x8E	; 142
    108e:	87 2f       	mov	r24, r23
    1090:	76 2f       	mov	r23, r22
    1092:	05 c0       	rjmp	.+10     	; 0x109e <__floatsisf+0x5e>
    1094:	66 23       	and	r22, r22
    1096:	71 f0       	breq	.+28     	; 0x10b4 <__floatsisf+0x74>
    1098:	96 e8       	ldi	r25, 0x86	; 134
    109a:	86 2f       	mov	r24, r22
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	2a f0       	brmi	.+10     	; 0x10ac <__floatsisf+0x6c>
    10a2:	9a 95       	dec	r25
    10a4:	66 0f       	add	r22, r22
    10a6:	77 1f       	adc	r23, r23
    10a8:	88 1f       	adc	r24, r24
    10aa:	da f7       	brpl	.-10     	; 0x10a2 <__floatsisf+0x62>
    10ac:	88 0f       	add	r24, r24
    10ae:	96 95       	lsr	r25
    10b0:	87 95       	ror	r24
    10b2:	97 f9       	bld	r25, 7
    10b4:	08 95       	ret

000010b6 <__fp_inf>:
    10b6:	97 f9       	bld	r25, 7
    10b8:	9f 67       	ori	r25, 0x7F	; 127
    10ba:	80 e8       	ldi	r24, 0x80	; 128
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	08 95       	ret

000010c2 <__fp_nan>:
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    10c4:	80 ec       	ldi	r24, 0xC0	; 192
    10c6:	08 95       	ret

000010c8 <__fp_pscA>:
    10c8:	00 24       	eor	r0, r0
    10ca:	0a 94       	dec	r0
    10cc:	16 16       	cp	r1, r22
    10ce:	17 06       	cpc	r1, r23
    10d0:	18 06       	cpc	r1, r24
    10d2:	09 06       	cpc	r0, r25
    10d4:	08 95       	ret

000010d6 <__fp_pscB>:
    10d6:	00 24       	eor	r0, r0
    10d8:	0a 94       	dec	r0
    10da:	12 16       	cp	r1, r18
    10dc:	13 06       	cpc	r1, r19
    10de:	14 06       	cpc	r1, r20
    10e0:	05 06       	cpc	r0, r21
    10e2:	08 95       	ret

000010e4 <__fp_round>:
    10e4:	09 2e       	mov	r0, r25
    10e6:	03 94       	inc	r0
    10e8:	00 0c       	add	r0, r0
    10ea:	11 f4       	brne	.+4      	; 0x10f0 <__fp_round+0xc>
    10ec:	88 23       	and	r24, r24
    10ee:	52 f0       	brmi	.+20     	; 0x1104 <__fp_round+0x20>
    10f0:	bb 0f       	add	r27, r27
    10f2:	40 f4       	brcc	.+16     	; 0x1104 <__fp_round+0x20>
    10f4:	bf 2b       	or	r27, r31
    10f6:	11 f4       	brne	.+4      	; 0x10fc <__fp_round+0x18>
    10f8:	60 ff       	sbrs	r22, 0
    10fa:	04 c0       	rjmp	.+8      	; 0x1104 <__fp_round+0x20>
    10fc:	6f 5f       	subi	r22, 0xFF	; 255
    10fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1100:	8f 4f       	sbci	r24, 0xFF	; 255
    1102:	9f 4f       	sbci	r25, 0xFF	; 255
    1104:	08 95       	ret

00001106 <__fp_split3>:
    1106:	57 fd       	sbrc	r21, 7
    1108:	90 58       	subi	r25, 0x80	; 128
    110a:	44 0f       	add	r20, r20
    110c:	55 1f       	adc	r21, r21
    110e:	59 f0       	breq	.+22     	; 0x1126 <__fp_splitA+0x10>
    1110:	5f 3f       	cpi	r21, 0xFF	; 255
    1112:	71 f0       	breq	.+28     	; 0x1130 <__fp_splitA+0x1a>
    1114:	47 95       	ror	r20

00001116 <__fp_splitA>:
    1116:	88 0f       	add	r24, r24
    1118:	97 fb       	bst	r25, 7
    111a:	99 1f       	adc	r25, r25
    111c:	61 f0       	breq	.+24     	; 0x1136 <__fp_splitA+0x20>
    111e:	9f 3f       	cpi	r25, 0xFF	; 255
    1120:	79 f0       	breq	.+30     	; 0x1140 <__fp_splitA+0x2a>
    1122:	87 95       	ror	r24
    1124:	08 95       	ret
    1126:	12 16       	cp	r1, r18
    1128:	13 06       	cpc	r1, r19
    112a:	14 06       	cpc	r1, r20
    112c:	55 1f       	adc	r21, r21
    112e:	f2 cf       	rjmp	.-28     	; 0x1114 <__fp_split3+0xe>
    1130:	46 95       	lsr	r20
    1132:	f1 df       	rcall	.-30     	; 0x1116 <__fp_splitA>
    1134:	08 c0       	rjmp	.+16     	; 0x1146 <__fp_splitA+0x30>
    1136:	16 16       	cp	r1, r22
    1138:	17 06       	cpc	r1, r23
    113a:	18 06       	cpc	r1, r24
    113c:	99 1f       	adc	r25, r25
    113e:	f1 cf       	rjmp	.-30     	; 0x1122 <__fp_splitA+0xc>
    1140:	86 95       	lsr	r24
    1142:	71 05       	cpc	r23, r1
    1144:	61 05       	cpc	r22, r1
    1146:	08 94       	sec
    1148:	08 95       	ret

0000114a <__fp_zero>:
    114a:	e8 94       	clt

0000114c <__fp_szero>:
    114c:	bb 27       	eor	r27, r27
    114e:	66 27       	eor	r22, r22
    1150:	77 27       	eor	r23, r23
    1152:	cb 01       	movw	r24, r22
    1154:	97 f9       	bld	r25, 7
    1156:	08 95       	ret

00001158 <__mulsf3>:
    1158:	0b d0       	rcall	.+22     	; 0x1170 <__mulsf3x>
    115a:	c4 cf       	rjmp	.-120    	; 0x10e4 <__fp_round>
    115c:	b5 df       	rcall	.-150    	; 0x10c8 <__fp_pscA>
    115e:	28 f0       	brcs	.+10     	; 0x116a <__mulsf3+0x12>
    1160:	ba df       	rcall	.-140    	; 0x10d6 <__fp_pscB>
    1162:	18 f0       	brcs	.+6      	; 0x116a <__mulsf3+0x12>
    1164:	95 23       	and	r25, r21
    1166:	09 f0       	breq	.+2      	; 0x116a <__mulsf3+0x12>
    1168:	a6 cf       	rjmp	.-180    	; 0x10b6 <__fp_inf>
    116a:	ab cf       	rjmp	.-170    	; 0x10c2 <__fp_nan>
    116c:	11 24       	eor	r1, r1
    116e:	ee cf       	rjmp	.-36     	; 0x114c <__fp_szero>

00001170 <__mulsf3x>:
    1170:	ca df       	rcall	.-108    	; 0x1106 <__fp_split3>
    1172:	a0 f3       	brcs	.-24     	; 0x115c <__mulsf3+0x4>

00001174 <__mulsf3_pse>:
    1174:	95 9f       	mul	r25, r21
    1176:	d1 f3       	breq	.-12     	; 0x116c <__mulsf3+0x14>
    1178:	95 0f       	add	r25, r21
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	55 1f       	adc	r21, r21
    117e:	62 9f       	mul	r22, r18
    1180:	f0 01       	movw	r30, r0
    1182:	72 9f       	mul	r23, r18
    1184:	bb 27       	eor	r27, r27
    1186:	f0 0d       	add	r31, r0
    1188:	b1 1d       	adc	r27, r1
    118a:	63 9f       	mul	r22, r19
    118c:	aa 27       	eor	r26, r26
    118e:	f0 0d       	add	r31, r0
    1190:	b1 1d       	adc	r27, r1
    1192:	aa 1f       	adc	r26, r26
    1194:	64 9f       	mul	r22, r20
    1196:	66 27       	eor	r22, r22
    1198:	b0 0d       	add	r27, r0
    119a:	a1 1d       	adc	r26, r1
    119c:	66 1f       	adc	r22, r22
    119e:	82 9f       	mul	r24, r18
    11a0:	22 27       	eor	r18, r18
    11a2:	b0 0d       	add	r27, r0
    11a4:	a1 1d       	adc	r26, r1
    11a6:	62 1f       	adc	r22, r18
    11a8:	73 9f       	mul	r23, r19
    11aa:	b0 0d       	add	r27, r0
    11ac:	a1 1d       	adc	r26, r1
    11ae:	62 1f       	adc	r22, r18
    11b0:	83 9f       	mul	r24, r19
    11b2:	a0 0d       	add	r26, r0
    11b4:	61 1d       	adc	r22, r1
    11b6:	22 1f       	adc	r18, r18
    11b8:	74 9f       	mul	r23, r20
    11ba:	33 27       	eor	r19, r19
    11bc:	a0 0d       	add	r26, r0
    11be:	61 1d       	adc	r22, r1
    11c0:	23 1f       	adc	r18, r19
    11c2:	84 9f       	mul	r24, r20
    11c4:	60 0d       	add	r22, r0
    11c6:	21 1d       	adc	r18, r1
    11c8:	82 2f       	mov	r24, r18
    11ca:	76 2f       	mov	r23, r22
    11cc:	6a 2f       	mov	r22, r26
    11ce:	11 24       	eor	r1, r1
    11d0:	9f 57       	subi	r25, 0x7F	; 127
    11d2:	50 40       	sbci	r21, 0x00	; 0
    11d4:	8a f0       	brmi	.+34     	; 0x11f8 <__mulsf3_pse+0x84>
    11d6:	e1 f0       	breq	.+56     	; 0x1210 <__mulsf3_pse+0x9c>
    11d8:	88 23       	and	r24, r24
    11da:	4a f0       	brmi	.+18     	; 0x11ee <__mulsf3_pse+0x7a>
    11dc:	ee 0f       	add	r30, r30
    11de:	ff 1f       	adc	r31, r31
    11e0:	bb 1f       	adc	r27, r27
    11e2:	66 1f       	adc	r22, r22
    11e4:	77 1f       	adc	r23, r23
    11e6:	88 1f       	adc	r24, r24
    11e8:	91 50       	subi	r25, 0x01	; 1
    11ea:	50 40       	sbci	r21, 0x00	; 0
    11ec:	a9 f7       	brne	.-22     	; 0x11d8 <__mulsf3_pse+0x64>
    11ee:	9e 3f       	cpi	r25, 0xFE	; 254
    11f0:	51 05       	cpc	r21, r1
    11f2:	70 f0       	brcs	.+28     	; 0x1210 <__mulsf3_pse+0x9c>
    11f4:	60 cf       	rjmp	.-320    	; 0x10b6 <__fp_inf>
    11f6:	aa cf       	rjmp	.-172    	; 0x114c <__fp_szero>
    11f8:	5f 3f       	cpi	r21, 0xFF	; 255
    11fa:	ec f3       	brlt	.-6      	; 0x11f6 <__mulsf3_pse+0x82>
    11fc:	98 3e       	cpi	r25, 0xE8	; 232
    11fe:	dc f3       	brlt	.-10     	; 0x11f6 <__mulsf3_pse+0x82>
    1200:	86 95       	lsr	r24
    1202:	77 95       	ror	r23
    1204:	67 95       	ror	r22
    1206:	b7 95       	ror	r27
    1208:	f7 95       	ror	r31
    120a:	e7 95       	ror	r30
    120c:	9f 5f       	subi	r25, 0xFF	; 255
    120e:	c1 f7       	brne	.-16     	; 0x1200 <__mulsf3_pse+0x8c>
    1210:	fe 2b       	or	r31, r30
    1212:	88 0f       	add	r24, r24
    1214:	91 1d       	adc	r25, r1
    1216:	96 95       	lsr	r25
    1218:	87 95       	ror	r24
    121a:	97 f9       	bld	r25, 7
    121c:	08 95       	ret

0000121e <_exit>:
    121e:	f8 94       	cli

00001220 <__stop_program>:
    1220:	ff cf       	rjmp	.-2      	; 0x1220 <__stop_program>
