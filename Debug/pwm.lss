
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000017a2  00001836  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000051  00800122  00800122  00001858  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00001858  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00003424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000039a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002027  00000000  00000000  00003ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009af  00000000  00000000  00005b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000089a  00000000  00000000  000064be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d10  00000000  00000000  00006d58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c72  00000000  00000000  00007a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000204d  00000000  00000000  000086da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__vector_1>
       8:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_2>
       c:	0c 94 b1 02 	jmp	0x562	; 0x562 <__vector_3>
      10:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <__vector_4>
      14:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__vector_5>
      18:	0c 94 26 03 	jmp	0x64c	; 0x64c <__vector_6>
      1c:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__vector_7>
      20:	0c 94 74 03 	jmp	0x6e8	; 0x6e8 <__vector_8>
      24:	0c 94 9b 03 	jmp	0x736	; 0x736 <__vector_9>
      28:	0c 94 c2 03 	jmp	0x784	; 0x784 <__vector_10>
      2c:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__vector_11>
      30:	0c 94 10 04 	jmp	0x820	; 0x820 <__vector_12>
      34:	0c 94 37 04 	jmp	0x86e	; 0x86e <__vector_13>
      38:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__vector_14>
      3c:	0c 94 85 04 	jmp	0x90a	; 0x90a <__vector_15>
      40:	0c 94 ac 04 	jmp	0x958	; 0x958 <__vector_16>
      44:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__vector_17>
      48:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__vector_18>
      4c:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__vector_19>
      50:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__vector_20>
      54:	0c 94 6f 05 	jmp	0xade	; 0xade <__vector_21>
      58:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__vector_22>
      5c:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__vector_23>
      60:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__vector_24>
      64:	0c 94 0b 06 	jmp	0xc16	; 0xc16 <__vector_25>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 ea       	ldi	r30, 0xA2	; 162
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 32       	cpi	r26, 0x22	; 34
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a2 e2       	ldi	r26, 0x22	; 34
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 37       	cpi	r26, 0x73	; 115
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 32 06 	call	0xc64	; 0xc64 <main>
      9e:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DIO_init>:
*/


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
      a6:	fc 01       	movw	r30, r24
  uint8_t RET=0;
  static uint8_t Multiple_init=0;
  if (DIO_info == NULL)
      a8:	00 97       	sbiw	r24, 0x00	; 0
      aa:	09 f4       	brne	.+2      	; 0xae <DIO_init+0x8>
      ac:	5e c0       	rjmp	.+188    	; 0x16a <DIO_init+0xc4>
  {
    RET=NULL_PTR+DIO_MODULE;

  }else{
    u8_is_init=1;
      ae:	81 e0       	ldi	r24, 0x01	; 1
      b0:	80 93 22 01 	sts	0x0122, r24
    switch(DIO_info->dir)
      b4:	82 81       	ldd	r24, Z+2	; 0x02
      b6:	88 23       	and	r24, r24
      b8:	21 f0       	breq	.+8      	; 0xc2 <DIO_init+0x1c>
      ba:	8f 3f       	cpi	r24, 0xFF	; 255
      bc:	09 f0       	breq	.+2      	; 0xc0 <DIO_init+0x1a>
      be:	57 c0       	rjmp	.+174    	; 0x16e <DIO_init+0xc8>
      c0:	2c c0       	rjmp	.+88     	; 0x11a <DIO_init+0x74>
    {
    case INPUT:
      switch(DIO_info ->GPIO)
      c2:	80 81       	ld	r24, Z
      c4:	82 30       	cpi	r24, 0x02	; 2
      c6:	89 f0       	breq	.+34     	; 0xea <DIO_init+0x44>
      c8:	83 30       	cpi	r24, 0x03	; 3
      ca:	d9 f0       	breq	.+54     	; 0x102 <DIO_init+0x5c>
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	09 f0       	breq	.+2      	; 0xd2 <DIO_init+0x2c>
      d0:	50 c0       	rjmp	.+160    	; 0x172 <DIO_init+0xcc>
      {
      case GPIOB:
        PORTB_DIR &=(~(DIO_info->pins)) ;
      d2:	94 b1       	in	r25, 0x04	; 4
      d4:	81 81       	ldd	r24, Z+1	; 0x01
      d6:	80 95       	com	r24
      d8:	89 23       	and	r24, r25
      da:	84 b9       	out	0x04, r24	; 4
        Multiple_init+=2;
      dc:	80 91 23 01 	lds	r24, 0x0123
      e0:	8e 5f       	subi	r24, 0xFE	; 254
      e2:	80 93 23 01 	sts	0x0123, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
      e6:	80 e0       	ldi	r24, 0x00	; 0
      switch(DIO_info ->GPIO)
      {
      case GPIOB:
        PORTB_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=2;
        break;
      e8:	08 95       	ret
      case GPIOC:
        PORTC_DIR &=(~(DIO_info->pins)) ;
      ea:	97 b1       	in	r25, 0x07	; 7
      ec:	81 81       	ldd	r24, Z+1	; 0x01
      ee:	80 95       	com	r24
      f0:	89 23       	and	r24, r25
      f2:	87 b9       	out	0x07, r24	; 7
        Multiple_init+=3;
      f4:	80 91 23 01 	lds	r24, 0x0123
      f8:	8d 5f       	subi	r24, 0xFD	; 253
      fa:	80 93 23 01 	sts	0x0123, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
      fe:	80 e0       	ldi	r24, 0x00	; 0
        Multiple_init+=2;
        break;
      case GPIOC:
        PORTC_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=3;
        break;
     100:	08 95       	ret
      case GPIOD:
        PORTD_DIR &=(~(DIO_info->pins)) ;
     102:	9a b1       	in	r25, 0x0a	; 10
     104:	81 81       	ldd	r24, Z+1	; 0x01
     106:	80 95       	com	r24
     108:	89 23       	and	r24, r25
     10a:	8a b9       	out	0x0a, r24	; 10
        Multiple_init+=4;
     10c:	80 91 23 01 	lds	r24, 0x0123
     110:	8c 5f       	subi	r24, 0xFC	; 252
     112:	80 93 23 01 	sts	0x0123, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     116:	80 e0       	ldi	r24, 0x00	; 0
        Multiple_init+=3;
        break;
      case GPIOD:
        PORTD_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=4;
        break;
     118:	08 95       	ret
        break;
      }
      break;

      case OUTPUT:
        switch(DIO_info ->GPIO)
     11a:	80 81       	ld	r24, Z
     11c:	82 30       	cpi	r24, 0x02	; 2
     11e:	79 f0       	breq	.+30     	; 0x13e <DIO_init+0x98>
     120:	83 30       	cpi	r24, 0x03	; 3
     122:	c1 f0       	breq	.+48     	; 0x154 <DIO_init+0xae>
     124:	81 30       	cpi	r24, 0x01	; 1
     126:	39 f5       	brne	.+78     	; 0x176 <DIO_init+0xd0>
        {
        case GPIOB:
          PORTB_DIR |=(DIO_info->pins)  ;
     128:	94 b1       	in	r25, 0x04	; 4
     12a:	81 81       	ldd	r24, Z+1	; 0x01
     12c:	89 2b       	or	r24, r25
     12e:	84 b9       	out	0x04, r24	; 4
          Multiple_init+=2;
     130:	80 91 23 01 	lds	r24, 0x0123
     134:	8e 5f       	subi	r24, 0xFE	; 254
     136:	80 93 23 01 	sts	0x0123, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     13a:	80 e0       	ldi	r24, 0x00	; 0
        switch(DIO_info ->GPIO)
        {
        case GPIOB:
          PORTB_DIR |=(DIO_info->pins)  ;
          Multiple_init+=2;
          break;
     13c:	08 95       	ret
        case GPIOC:
          PORTC_DIR |=(DIO_info->pins)  ;
     13e:	97 b1       	in	r25, 0x07	; 7
     140:	81 81       	ldd	r24, Z+1	; 0x01
     142:	89 2b       	or	r24, r25
     144:	87 b9       	out	0x07, r24	; 7
          Multiple_init+=3;
     146:	80 91 23 01 	lds	r24, 0x0123
     14a:	8d 5f       	subi	r24, 0xFD	; 253
     14c:	80 93 23 01 	sts	0x0123, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     150:	80 e0       	ldi	r24, 0x00	; 0
          Multiple_init+=2;
          break;
        case GPIOC:
          PORTC_DIR |=(DIO_info->pins)  ;
          Multiple_init+=3;
          break;
     152:	08 95       	ret
        case GPIOD:
          PORTD_DIR |=(DIO_info->pins)  ;
     154:	9a b1       	in	r25, 0x0a	; 10
     156:	81 81       	ldd	r24, Z+1	; 0x01
     158:	89 2b       	or	r24, r25
     15a:	8a b9       	out	0x0a, r24	; 10
          Multiple_init+=4;
     15c:	80 91 23 01 	lds	r24, 0x0123
     160:	8c 5f       	subi	r24, 0xFC	; 252
     162:	80 93 23 01 	sts	0x0123, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     166:	80 e0       	ldi	r24, 0x00	; 0
          Multiple_init+=3;
          break;
        case GPIOD:
          PORTD_DIR |=(DIO_info->pins)  ;
          Multiple_init+=4;
          break;
     168:	08 95       	ret
{
  uint8_t RET=0;
  static uint8_t Multiple_init=0;
  if (DIO_info == NULL)
  {
    RET=NULL_PTR+DIO_MODULE;
     16a:	86 e1       	ldi	r24, 0x16	; 22
     16c:	08 95       	ret
          break;
        }

        break;
        default:
          RET=E_NOK+DIO_MODULE+INVALID_DIRECTION;
     16e:	83 e2       	ldi	r24, 0x23	; 35
     170:	08 95       	ret
      case GPIOD:
        PORTD_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=4;
        break;
      default:
        RET=E_NOK+DIO_MODULE+INVALID_PORT;
     172:	85 e2       	ldi	r24, 0x25	; 37
     174:	08 95       	ret
        case GPIOD:
          PORTD_DIR |=(DIO_info->pins)  ;
          Multiple_init+=4;
          break;
        default:
          RET=E_NOK+DIO_MODULE+INVALID_PORT;
     176:	85 e2       	ldi	r24, 0x25	; 37
    }


  }
  return RET;
}
     178:	08 95       	ret

0000017a <DIO_deinit>:

void DIO_deinit(void){
  u8_is_init=0;
     17a:	10 92 22 01 	sts	0x0122, r1
}
     17e:	08 95       	ret

00000180 <DIO_is_init>:

void DIO_is_init(void){
  u8_is_init=1;
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	80 93 22 01 	sts	0x0122, r24
}
     186:	08 95       	ret

00000188 <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;

if(u8_is_init==1){
     188:	90 91 22 01 	lds	r25, 0x0122
     18c:	91 30       	cpi	r25, 0x01	; 1
     18e:	91 f5       	brne	.+100    	; 0x1f4 <DIO_Write+0x6c>
switch(value){
     190:	44 23       	and	r20, r20
     192:	19 f0       	breq	.+6      	; 0x19a <DIO_Write+0x12>
     194:	4f 3f       	cpi	r20, 0xFF	; 255
     196:	81 f5       	brne	.+96     	; 0x1f8 <DIO_Write+0x70>
     198:	18 c0       	rjmp	.+48     	; 0x1ca <DIO_Write+0x42>
case LOW:
{
  switch (GPIO)
     19a:	82 30       	cpi	r24, 0x02	; 2
     19c:	51 f0       	breq	.+20     	; 0x1b2 <DIO_Write+0x2a>
     19e:	83 30       	cpi	r24, 0x03	; 3
     1a0:	71 f0       	breq	.+28     	; 0x1be <DIO_Write+0x36>
     1a2:	81 30       	cpi	r24, 0x01	; 1
     1a4:	59 f5       	brne	.+86     	; 0x1fc <DIO_Write+0x74>
  {
  case GPIOB:
    PORTB_DATA &= ~(pins);
     1a6:	85 b1       	in	r24, 0x05	; 5
     1a8:	60 95       	com	r22
     1aa:	68 23       	and	r22, r24
     1ac:	65 b9       	out	0x05, r22	; 5
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1ae:	84 e1       	ldi	r24, 0x14	; 20
{
  switch (GPIO)
  {
  case GPIOB:
    PORTB_DATA &= ~(pins);
    break;
     1b0:	08 95       	ret
  case GPIOC:
    PORTC_DATA &= ~(pins);
     1b2:	88 b1       	in	r24, 0x08	; 8
     1b4:	60 95       	com	r22
     1b6:	68 23       	and	r22, r24
     1b8:	68 b9       	out	0x08, r22	; 8
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1ba:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    PORTB_DATA &= ~(pins);
    break;
  case GPIOC:
    PORTC_DATA &= ~(pins);
    break;
     1bc:	08 95       	ret
  case GPIOD:
    PORTD_DATA &= ~(pins);
     1be:	8b b1       	in	r24, 0x0b	; 11
     1c0:	60 95       	com	r22
     1c2:	68 23       	and	r22, r24
     1c4:	6b b9       	out	0x0b, r22	; 11
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1c6:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    PORTC_DATA &= ~(pins);
    break;
  case GPIOD:
    PORTD_DATA &= ~(pins);
    break;
     1c8:	08 95       	ret
    break;
  }
  break;
}
case HIGH:{
  switch (GPIO)
     1ca:	82 30       	cpi	r24, 0x02	; 2
     1cc:	49 f0       	breq	.+18     	; 0x1e0 <DIO_Write+0x58>
     1ce:	83 30       	cpi	r24, 0x03	; 3
     1d0:	61 f0       	breq	.+24     	; 0x1ea <DIO_Write+0x62>
     1d2:	81 30       	cpi	r24, 0x01	; 1
     1d4:	a9 f4       	brne	.+42     	; 0x200 <DIO_Write+0x78>
  { 
  case GPIOB:
    PORTB_DATA |=(pins);
     1d6:	85 b1       	in	r24, 0x05	; 5
     1d8:	68 2b       	or	r22, r24
     1da:	65 b9       	out	0x05, r22	; 5
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1dc:	84 e1       	ldi	r24, 0x14	; 20
case HIGH:{
  switch (GPIO)
  { 
  case GPIOB:
    PORTB_DATA |=(pins);
    break;
     1de:	08 95       	ret
  case GPIOC:
    PORTC_DATA |=(pins);
     1e0:	88 b1       	in	r24, 0x08	; 8
     1e2:	68 2b       	or	r22, r24
     1e4:	68 b9       	out	0x08, r22	; 8
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1e6:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    PORTB_DATA |=(pins);
    break;
  case GPIOC:
    PORTC_DATA |=(pins);
    break;
     1e8:	08 95       	ret
  case GPIOD:
    PORTD_DATA |=(pins);
     1ea:	8b b1       	in	r24, 0x0b	; 11
     1ec:	68 2b       	or	r22, r24
     1ee:	6b b9       	out	0x0b, r22	; 11
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1f0:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    PORTC_DATA |=(pins);
    break;
  case GPIOD:
    PORTD_DATA |=(pins);
    break;
     1f2:	08 95       	ret
default:
  Ret+=INVALID_VALUE;
  break;
}

}else{Ret+=NOT_INIT;}
     1f4:	88 e1       	ldi	r24, 0x18	; 24
     1f6:	08 95       	ret
    break;
  }
  break;
}
default:
  Ret+=INVALID_VALUE;
     1f8:	86 e2       	ldi	r24, 0x26	; 38
     1fa:	08 95       	ret
    break;
  case GPIOD:
    PORTD_DATA &= ~(pins);
    break;
  default:
    Ret+=INVALID_PORT;
     1fc:	84 e2       	ldi	r24, 0x24	; 36
     1fe:	08 95       	ret
    break;
  case GPIOD:
    PORTD_DATA |=(pins);
    break;
  default:
    Ret+=INVALID_PORT;
     200:	84 e2       	ldi	r24, 0x24	; 36
  break;
}

}else{Ret+=NOT_INIT;}
return Ret;
}
     202:	08 95       	ret

00000204 <DIO_Read>:


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
if(u8_is_init==1){
     204:	90 91 22 01 	lds	r25, 0x0122
     208:	91 30       	cpi	r25, 0x01	; 1
     20a:	01 f5       	brne	.+64     	; 0x24c <DIO_Read+0x48>
  switch (GPIO)
     20c:	82 30       	cpi	r24, 0x02	; 2
     20e:	51 f0       	breq	.+20     	; 0x224 <DIO_Read+0x20>
     210:	83 30       	cpi	r24, 0x03	; 3
     212:	71 f0       	breq	.+28     	; 0x230 <DIO_Read+0x2c>
     214:	81 30       	cpi	r24, 0x01	; 1
     216:	91 f4       	brne	.+36     	; 0x23c <DIO_Read+0x38>
  { 
  case GPIOB:
    *data=(PORTB_PIN & pins);
     218:	83 b1       	in	r24, 0x03	; 3
     21a:	68 23       	and	r22, r24
     21c:	fa 01       	movw	r30, r20
     21e:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
     220:	84 e1       	ldi	r24, 0x14	; 20
if(u8_is_init==1){
  switch (GPIO)
  { 
  case GPIOB:
    *data=(PORTB_PIN & pins);
    break;
     222:	0d c0       	rjmp	.+26     	; 0x23e <DIO_Read+0x3a>
  case GPIOC:
    *data=(PORTC_PIN & pins);
     224:	86 b1       	in	r24, 0x06	; 6
     226:	68 23       	and	r22, r24
     228:	fa 01       	movw	r30, r20
     22a:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
     22c:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    *data=(PORTB_PIN & pins);
    break;
  case GPIOC:
    *data=(PORTC_PIN & pins);
    break;
     22e:	07 c0       	rjmp	.+14     	; 0x23e <DIO_Read+0x3a>
  case GPIOD:
    *data=(PORTD_PIN & pins);
     230:	89 b1       	in	r24, 0x09	; 9
     232:	68 23       	and	r22, r24
     234:	fa 01       	movw	r30, r20
     236:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
     238:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    *data=(PORTC_PIN & pins);
    break;
  case GPIOD:
    *data=(PORTD_PIN & pins);
    break;
     23a:	01 c0       	rjmp	.+2      	; 0x23e <DIO_Read+0x3a>
    default:
    ret+=INVALID_PORT;
     23c:	84 e2       	ldi	r24, 0x24	; 36
    break;
  }
  if(*data > 0)
     23e:	fa 01       	movw	r30, r20
     240:	90 81       	ld	r25, Z
     242:	99 23       	and	r25, r25
     244:	21 f0       	breq	.+8      	; 0x24e <DIO_Read+0x4a>
  {
    *data = 1;
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	90 83       	st	Z, r25
     24a:	08 95       	ret
  }
}else{ret+=NOT_INIT;}
     24c:	88 e1       	ldi	r24, 0x18	; 24
return ret;
}
     24e:	08 95       	ret

00000250 <DIO_Toggle>:
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
if(u8_is_init==1){
     250:	90 91 22 01 	lds	r25, 0x0122
     254:	91 30       	cpi	r25, 0x01	; 1
     256:	a9 f4       	brne	.+42     	; 0x282 <DIO_Toggle+0x32>
  switch (GPIO)
     258:	82 30       	cpi	r24, 0x02	; 2
     25a:	49 f0       	breq	.+18     	; 0x26e <DIO_Toggle+0x1e>
     25c:	83 30       	cpi	r24, 0x03	; 3
     25e:	61 f0       	breq	.+24     	; 0x278 <DIO_Toggle+0x28>
     260:	81 30       	cpi	r24, 0x01	; 1
     262:	89 f4       	brne	.+34     	; 0x286 <DIO_Toggle+0x36>
  {
  case GPIOB:
    PORTB_DATA ^=(pins);
     264:	85 b1       	in	r24, 0x05	; 5
     266:	68 27       	eor	r22, r24
     268:	65 b9       	out	0x05, r22	; 5
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
     26a:	84 e1       	ldi	r24, 0x14	; 20
if(u8_is_init==1){
  switch (GPIO)
  {
  case GPIOB:
    PORTB_DATA ^=(pins);
    break;
     26c:	08 95       	ret
  case GPIOC:
    PORTC_DATA ^=(pins);
     26e:	88 b1       	in	r24, 0x08	; 8
     270:	68 27       	eor	r22, r24
     272:	68 b9       	out	0x08, r22	; 8
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
     274:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    PORTB_DATA ^=(pins);
    break;
  case GPIOC:
    PORTC_DATA ^=(pins);
    break;
     276:	08 95       	ret
  case GPIOD:
    PORTD_DATA ^=(pins);
     278:	8b b1       	in	r24, 0x0b	; 11
     27a:	68 27       	eor	r22, r24
     27c:	6b b9       	out	0x0b, r22	; 11
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
     27e:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    PORTC_DATA ^=(pins);
    break;
  case GPIOD:
    PORTD_DATA ^=(pins);
    break;
     280:	08 95       	ret
  default:
    ret+=INVALID_PORT;
    break;
  }
}else{ret+=NOT_INIT;}
     282:	88 e1       	ldi	r24, 0x18	; 24
     284:	08 95       	ret
    break;
  case GPIOD:
    PORTD_DATA ^=(pins);
    break;
  default:
    ret+=INVALID_PORT;
     286:	84 e2       	ldi	r24, 0x24	; 36
    break;
  }
}else{ret+=NOT_INIT;}
  return ret;
}
     288:	08 95       	ret

0000028a <Icu_Init>:
static volatile uint32_t u32_Time_rising_edge=0;
static volatile uint32_t u32_Time_faling_edge=0;
static volatile uint32_t Timer_High=0;
static volatile uint32_t Timer_Low=0;
ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	ec 01       	movw	r28, r24
  uint8_t Ret=0;
//Enable Global int
G_interrupt_Enable();
     290:	0e 94 44 02 	call	0x488	; 0x488 <G_interrupt_Enable>
//Enable EXTI
switch(Icu_Cfg->ICU_Ch_No)
     294:	88 81       	ld	r24, Y
     296:	88 23       	and	r24, r24
     298:	19 f0       	breq	.+6      	; 0x2a0 <Icu_Init+0x16>
     29a:	81 30       	cpi	r24, 0x01	; 1
     29c:	91 f4       	brne	.+36     	; 0x2c2 <Icu_Init+0x38>
     29e:	09 c0       	rjmp	.+18     	; 0x2b2 <Icu_Init+0x28>
{
case ICU_CH0:
EX_interrupt0_enable0();
     2a0:	0e 94 54 02 	call	0x4a8	; 0x4a8 <EX_interrupt0_enable0>
INT0_external_interrupt = (Icu_Cfg->external_int);
     2a4:	8a 81       	ldd	r24, Y+2	; 0x02
     2a6:	9b 81       	ldd	r25, Y+3	; 0x03
     2a8:	90 93 14 01 	sts	0x0114, r25
     2ac:	80 93 13 01 	sts	0x0113, r24

break;
     2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <Icu_Init+0x38>
case ICU_CH1:
EX_interrupt1_enable1();
     2b2:	0e 94 48 02 	call	0x490	; 0x490 <EX_interrupt1_enable1>
INT1_external_interrupt = (Icu_Cfg->external_int);
     2b6:	8a 81       	ldd	r24, Y+2	; 0x02
     2b8:	9b 81       	ldd	r25, Y+3	; 0x03
     2ba:	90 93 6e 01 	sts	0x016E, r25
     2be:	80 93 6d 01 	sts	0x016D, r24

break;
}

switch(Icu_Cfg->ICU_Ch_Timer)
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	81 30       	cpi	r24, 0x01	; 1
     2c6:	61 f4       	brne	.+24     	; 0x2e0 <Icu_Init+0x56>
    TCCR0=0x05;
    TIMSK0=0x01;
    break;
    */
   case ICU_TIMER_CH1:
   TCCR1B=0x05;
     2c8:	85 e0       	ldi	r24, 0x05	; 5
     2ca:	80 93 81 00 	sts	0x0081, r24
	TIMSK1=0x01;
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	80 93 6f 00 	sts	0x006F, r24
	TIMER1OVF=(Icu_Cfg->timer_int);
     2d4:	8c 81       	ldd	r24, Y+4	; 0x04
     2d6:	9d 81       	ldd	r25, Y+5	; 0x05
     2d8:	90 93 10 01 	sts	0x0110, r25
     2dc:	80 93 0f 01 	sts	0x010F, r24
 */
}


return Ret;
}
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <Icu_ReadTime>:
 *          - E_NOK : not successful                   *
 * Description  : calculates the time between 2 edges              *
 ***************************************************************************/

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time)
{
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
uint8_t Ret=0;
switch(Icu_Channel)
     2ec:	81 30       	cpi	r24, 0x01	; 1
     2ee:	29 f4       	brne	.+10     	; 0x2fa <Icu_ReadTime+0x12>
 /* case ICU_TIMER_CH0:
  TCCR0|=0x03;
  Ret=E_OK;
  break;
 */ case ICU_TIMER_CH1:
  TCCR1B|=0x05;
     2f0:	e1 e8       	ldi	r30, 0x81	; 129
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	85 60       	ori	r24, 0x05	; 5
     2f8:	80 83       	st	Z, r24
  default:
  Ret=E_NOK;
  break;
}

switch(Icu_EdgeToEdge)
     2fa:	61 30       	cpi	r22, 0x01	; 1
     2fc:	01 f1       	breq	.+64     	; 0x33e <Icu_ReadTime+0x56>
     2fe:	61 30       	cpi	r22, 0x01	; 1
     300:	18 f0       	brcs	.+6      	; 0x308 <Icu_ReadTime+0x20>
     302:	62 30       	cpi	r22, 0x02	; 2
     304:	d1 f5       	brne	.+116    	; 0x37a <Icu_ReadTime+0x92>
     306:	2a c0       	rjmp	.+84     	; 0x35c <Icu_ReadTime+0x74>
{
  case ICU_RISE_TO_RISE:
  *Icu_Time=Timer_High+Timer_Low;
     308:	80 91 28 01 	lds	r24, 0x0128
     30c:	90 91 29 01 	lds	r25, 0x0129
     310:	a0 91 2a 01 	lds	r26, 0x012A
     314:	b0 91 2b 01 	lds	r27, 0x012B
     318:	00 91 24 01 	lds	r16, 0x0124
     31c:	10 91 25 01 	lds	r17, 0x0125
     320:	20 91 26 01 	lds	r18, 0x0126
     324:	30 91 27 01 	lds	r19, 0x0127
     328:	80 0f       	add	r24, r16
     32a:	91 1f       	adc	r25, r17
     32c:	a2 1f       	adc	r26, r18
     32e:	b3 1f       	adc	r27, r19
     330:	fa 01       	movw	r30, r20
     332:	80 83       	st	Z, r24
     334:	91 83       	std	Z+1, r25	; 0x01
     336:	a2 83       	std	Z+2, r26	; 0x02
     338:	b3 83       	std	Z+3, r27	; 0x03
  Ret=E_OK;
     33a:	80 e0       	ldi	r24, 0x00	; 0
  break;
     33c:	1f c0       	rjmp	.+62     	; 0x37c <Icu_ReadTime+0x94>
  case ICU_RISE_TO_FALL:
  *Icu_Time=Timer_High;
     33e:	80 91 28 01 	lds	r24, 0x0128
     342:	90 91 29 01 	lds	r25, 0x0129
     346:	a0 91 2a 01 	lds	r26, 0x012A
     34a:	b0 91 2b 01 	lds	r27, 0x012B
     34e:	fa 01       	movw	r30, r20
     350:	80 83       	st	Z, r24
     352:	91 83       	std	Z+1, r25	; 0x01
     354:	a2 83       	std	Z+2, r26	; 0x02
     356:	b3 83       	std	Z+3, r27	; 0x03
  Ret=E_OK;
     358:	80 e0       	ldi	r24, 0x00	; 0
  break;
     35a:	10 c0       	rjmp	.+32     	; 0x37c <Icu_ReadTime+0x94>
  case ICU_FALE_TO_RISE:
  *Icu_Time=Timer_Low;
     35c:	80 91 24 01 	lds	r24, 0x0124
     360:	90 91 25 01 	lds	r25, 0x0125
     364:	a0 91 26 01 	lds	r26, 0x0126
     368:	b0 91 27 01 	lds	r27, 0x0127
     36c:	fa 01       	movw	r30, r20
     36e:	80 83       	st	Z, r24
     370:	91 83       	std	Z+1, r25	; 0x01
     372:	a2 83       	std	Z+2, r26	; 0x02
     374:	b3 83       	std	Z+3, r27	; 0x03
  Ret=E_OK;
     376:	80 e0       	ldi	r24, 0x00	; 0
  break;
     378:	01 c0       	rjmp	.+2      	; 0x37c <Icu_ReadTime+0x94>

  default:
  Ret=E_NOK;
     37a:	81 e0       	ldi	r24, 0x01	; 1
  break;
}

return Ret;
}
     37c:	1f 91       	pop	r17
     37e:	0f 91       	pop	r16
     380:	08 95       	ret

00000382 <EXTI0>:

void EXTI0(void)
{
  //u32_sgv_TimerVal=(uint32_t)TCNT1;
  u32_sgv_TimerVal=TCNT1;
     382:	80 91 84 00 	lds	r24, 0x0084
     386:	90 91 85 00 	lds	r25, 0x0085
     38a:	a0 e0       	ldi	r26, 0x00	; 0
     38c:	b0 e0       	ldi	r27, 0x00	; 0
     38e:	80 93 35 01 	sts	0x0135, r24
     392:	90 93 36 01 	sts	0x0136, r25
     396:	a0 93 37 01 	sts	0x0137, r26
     39a:	b0 93 38 01 	sts	0x0138, r27
  u8_ovf_happend=0;
     39e:	10 92 34 01 	sts	0x0134, r1
//  if(READBIT(EXTERNAL_INTERRUPT_CONTROL,6))
    if(READBIT(EXTERNAL_INTERRUPT_CONTROL,ISC00) && READBIT(EXTERNAL_INTERRUPT_CONTROL,ISC01))
     3a2:	80 91 69 00 	lds	r24, 0x0069
     3a6:	80 ff       	sbrs	r24, 0
     3a8:	37 c0       	rjmp	.+110    	; 0x418 <EXTI0+0x96>
     3aa:	80 91 69 00 	lds	r24, 0x0069
     3ae:	86 95       	lsr	r24
     3b0:	80 ff       	sbrs	r24, 0
     3b2:	32 c0       	rjmp	.+100    	; 0x418 <EXTI0+0x96>
    {
		
    u32_Time_rising_edge=u32_sgv_TimerVal;
     3b4:	80 91 35 01 	lds	r24, 0x0135
     3b8:	90 91 36 01 	lds	r25, 0x0136
     3bc:	a0 91 37 01 	lds	r26, 0x0137
     3c0:	b0 91 38 01 	lds	r27, 0x0138
     3c4:	80 93 30 01 	sts	0x0130, r24
     3c8:	90 93 31 01 	sts	0x0131, r25
     3cc:	a0 93 32 01 	sts	0x0132, r26
     3d0:	b0 93 33 01 	sts	0x0133, r27
    Timer_Low = u32_Time_rising_edge - u32_Time_faling_edge;
     3d4:	80 91 30 01 	lds	r24, 0x0130
     3d8:	90 91 31 01 	lds	r25, 0x0131
     3dc:	a0 91 32 01 	lds	r26, 0x0132
     3e0:	b0 91 33 01 	lds	r27, 0x0133
     3e4:	40 91 2c 01 	lds	r20, 0x012C
     3e8:	50 91 2d 01 	lds	r21, 0x012D
     3ec:	60 91 2e 01 	lds	r22, 0x012E
     3f0:	70 91 2f 01 	lds	r23, 0x012F
     3f4:	84 1b       	sub	r24, r20
     3f6:	95 0b       	sbc	r25, r21
     3f8:	a6 0b       	sbc	r26, r22
     3fa:	b7 0b       	sbc	r27, r23
     3fc:	80 93 24 01 	sts	0x0124, r24
     400:	90 93 25 01 	sts	0x0125, r25
     404:	a0 93 26 01 	sts	0x0126, r26
     408:	b0 93 27 01 	sts	0x0127, r27
    /*****************************************/
    CLEAR_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC00);  /*Make it falling*/
     40c:	e9 e6       	ldi	r30, 0x69	; 105
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	8e 7f       	andi	r24, 0xFE	; 254
     414:	80 83       	st	Z, r24
     416:	08 95       	ret
    /***************************************/
   }else{
      u32_Time_faling_edge=u32_sgv_TimerVal;
     418:	80 91 35 01 	lds	r24, 0x0135
     41c:	90 91 36 01 	lds	r25, 0x0136
     420:	a0 91 37 01 	lds	r26, 0x0137
     424:	b0 91 38 01 	lds	r27, 0x0138
     428:	80 93 2c 01 	sts	0x012C, r24
     42c:	90 93 2d 01 	sts	0x012D, r25
     430:	a0 93 2e 01 	sts	0x012E, r26
     434:	b0 93 2f 01 	sts	0x012F, r27
      Timer_High =u32_Time_faling_edge - u32_Time_rising_edge;
     438:	80 91 2c 01 	lds	r24, 0x012C
     43c:	90 91 2d 01 	lds	r25, 0x012D
     440:	a0 91 2e 01 	lds	r26, 0x012E
     444:	b0 91 2f 01 	lds	r27, 0x012F
     448:	40 91 30 01 	lds	r20, 0x0130
     44c:	50 91 31 01 	lds	r21, 0x0131
     450:	60 91 32 01 	lds	r22, 0x0132
     454:	70 91 33 01 	lds	r23, 0x0133
     458:	84 1b       	sub	r24, r20
     45a:	95 0b       	sbc	r25, r21
     45c:	a6 0b       	sbc	r26, r22
     45e:	b7 0b       	sbc	r27, r23
     460:	80 93 28 01 	sts	0x0128, r24
     464:	90 93 29 01 	sts	0x0129, r25
     468:	a0 93 2a 01 	sts	0x012A, r26
     46c:	b0 93 2b 01 	sts	0x012B, r27
   /*********************************/
      SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC00);    /*Make it Rising*/
     470:	e9 e6       	ldi	r30, 0x69	; 105
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	81 60       	ori	r24, 0x01	; 1
     478:	80 83       	st	Z, r24
     47a:	08 95       	ret

0000047c <timer_interrupt1>:
 }

}
void timer_interrupt1(void)
{
  u8_ovf_happend=1;
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 34 01 	sts	0x0134, r24
Us_Trigger();
     482:	0e 94 13 0a 	call	0x1426	; 0x1426 <Us_Trigger>
}
     486:	08 95       	ret

00000488 <G_interrupt_Enable>:
ptr_to_Fun ANA_COMP;
ptr_to_Fun TWI_I2C;
ptr_to_Fun SPM_RDY;
void G_interrupt_Enable(void)
{
 SREG |=(0x80);
     488:	8f b7       	in	r24, 0x3f	; 63
     48a:	80 68       	ori	r24, 0x80	; 128
     48c:	8f bf       	out	0x3f, r24	; 63
}
     48e:	08 95       	ret

00000490 <EX_interrupt1_enable1>:

void EX_interrupt1_enable1(void)
{
CLEAR_BIT(PORTD_DIR,3);/*Input*/
     490:	53 98       	cbi	0x0a, 3	; 10
SET_BIT(PORTD_DATA,3);/*Pullup*/
     492:	5b 9a       	sbi	0x0b, 3	; 11
SET_BIT(EXTERNAL_INTERRUPT_MASK_REG,INT1);/*EXT1*/
     494:	e9 9a       	sbi	0x1d, 1	; 29
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC10);/*Rising*/
     496:	e9 e6       	ldi	r30, 0x69	; 105
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	80 81       	ld	r24, Z
     49c:	84 60       	ori	r24, 0x04	; 4
     49e:	80 83       	st	Z, r24
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC11);/*Rising*/
     4a0:	80 81       	ld	r24, Z
     4a2:	88 60       	ori	r24, 0x08	; 8
     4a4:	80 83       	st	Z, r24
}
     4a6:	08 95       	ret

000004a8 <EX_interrupt0_enable0>:
void EX_interrupt0_enable0(void)
{
CLEAR_BIT(PORTD_DIR,2);/*Input*/
     4a8:	52 98       	cbi	0x0a, 2	; 10
//SET_BIT(PORTD_DATA,2);/*Pullup*/
SET_BIT(EXTERNAL_INTERRUPT_MASK_REG,INT0);/*EXT0*/
     4aa:	e8 9a       	sbi	0x1d, 0	; 29
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC00);/*Rising*/
     4ac:	e9 e6       	ldi	r30, 0x69	; 105
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 81       	ld	r24, Z
     4b2:	81 60       	ori	r24, 0x01	; 1
     4b4:	80 83       	st	Z, r24
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC01);/*Rising*/
     4b6:	80 81       	ld	r24, Z
     4b8:	82 60       	ori	r24, 0x02	; 2
     4ba:	80 83       	st	Z, r24
}
     4bc:	08 95       	ret

000004be <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
     4be:	8f b7       	in	r24, 0x3f	; 63
     4c0:	8f 77       	andi	r24, 0x7F	; 127
     4c2:	8f bf       	out	0x3f, r24	; 63
}
     4c4:	08 95       	ret

000004c6 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     4c6:	1f 92       	push	r1
     4c8:	0f 92       	push	r0
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	0f 92       	push	r0
     4ce:	11 24       	eor	r1, r1
     4d0:	2f 93       	push	r18
     4d2:	3f 93       	push	r19
     4d4:	4f 93       	push	r20
     4d6:	5f 93       	push	r21
     4d8:	6f 93       	push	r22
     4da:	7f 93       	push	r23
     4dc:	8f 93       	push	r24
     4de:	9f 93       	push	r25
     4e0:	af 93       	push	r26
     4e2:	bf 93       	push	r27
     4e4:	ef 93       	push	r30
     4e6:	ff 93       	push	r31
  INT0_external_interrupt();
     4e8:	e0 91 13 01 	lds	r30, 0x0113
     4ec:	f0 91 14 01 	lds	r31, 0x0114
     4f0:	09 95       	icall
}
     4f2:	ff 91       	pop	r31
     4f4:	ef 91       	pop	r30
     4f6:	bf 91       	pop	r27
     4f8:	af 91       	pop	r26
     4fa:	9f 91       	pop	r25
     4fc:	8f 91       	pop	r24
     4fe:	7f 91       	pop	r23
     500:	6f 91       	pop	r22
     502:	5f 91       	pop	r21
     504:	4f 91       	pop	r20
     506:	3f 91       	pop	r19
     508:	2f 91       	pop	r18
     50a:	0f 90       	pop	r0
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	0f 90       	pop	r0
     510:	1f 90       	pop	r1
     512:	18 95       	reti

00000514 <__vector_2>:


void __vector_2(void) __attribute__((signal));
void
 __vector_2(void)
{
     514:	1f 92       	push	r1
     516:	0f 92       	push	r0
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	0f 92       	push	r0
     51c:	11 24       	eor	r1, r1
     51e:	2f 93       	push	r18
     520:	3f 93       	push	r19
     522:	4f 93       	push	r20
     524:	5f 93       	push	r21
     526:	6f 93       	push	r22
     528:	7f 93       	push	r23
     52a:	8f 93       	push	r24
     52c:	9f 93       	push	r25
     52e:	af 93       	push	r26
     530:	bf 93       	push	r27
     532:	ef 93       	push	r30
     534:	ff 93       	push	r31
  INT1_external_interrupt();
     536:	e0 91 6d 01 	lds	r30, 0x016D
     53a:	f0 91 6e 01 	lds	r31, 0x016E
     53e:	09 95       	icall
}
     540:	ff 91       	pop	r31
     542:	ef 91       	pop	r30
     544:	bf 91       	pop	r27
     546:	af 91       	pop	r26
     548:	9f 91       	pop	r25
     54a:	8f 91       	pop	r24
     54c:	7f 91       	pop	r23
     54e:	6f 91       	pop	r22
     550:	5f 91       	pop	r21
     552:	4f 91       	pop	r20
     554:	3f 91       	pop	r19
     556:	2f 91       	pop	r18
     558:	0f 90       	pop	r0
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	0f 90       	pop	r0
     55e:	1f 90       	pop	r1
     560:	18 95       	reti

00000562 <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     562:	1f 92       	push	r1
     564:	0f 92       	push	r0
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	0f 92       	push	r0
     56a:	11 24       	eor	r1, r1
     56c:	2f 93       	push	r18
     56e:	3f 93       	push	r19
     570:	4f 93       	push	r20
     572:	5f 93       	push	r21
     574:	6f 93       	push	r22
     576:	7f 93       	push	r23
     578:	8f 93       	push	r24
     57a:	9f 93       	push	r25
     57c:	af 93       	push	r26
     57e:	bf 93       	push	r27
     580:	ef 93       	push	r30
     582:	ff 93       	push	r31
  Pin_Change_Interrupt_Request_0();
     584:	e0 91 53 01 	lds	r30, 0x0153
     588:	f0 91 54 01 	lds	r31, 0x0154
     58c:	09 95       	icall
}
     58e:	ff 91       	pop	r31
     590:	ef 91       	pop	r30
     592:	bf 91       	pop	r27
     594:	af 91       	pop	r26
     596:	9f 91       	pop	r25
     598:	8f 91       	pop	r24
     59a:	7f 91       	pop	r23
     59c:	6f 91       	pop	r22
     59e:	5f 91       	pop	r21
     5a0:	4f 91       	pop	r20
     5a2:	3f 91       	pop	r19
     5a4:	2f 91       	pop	r18
     5a6:	0f 90       	pop	r0
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	0f 90       	pop	r0
     5ac:	1f 90       	pop	r1
     5ae:	18 95       	reti

000005b0 <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     5b0:	1f 92       	push	r1
     5b2:	0f 92       	push	r0
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	0f 92       	push	r0
     5b8:	11 24       	eor	r1, r1
     5ba:	2f 93       	push	r18
     5bc:	3f 93       	push	r19
     5be:	4f 93       	push	r20
     5c0:	5f 93       	push	r21
     5c2:	6f 93       	push	r22
     5c4:	7f 93       	push	r23
     5c6:	8f 93       	push	r24
     5c8:	9f 93       	push	r25
     5ca:	af 93       	push	r26
     5cc:	bf 93       	push	r27
     5ce:	ef 93       	push	r30
     5d0:	ff 93       	push	r31
Pin_Change_Interrupt_Request_1();
     5d2:	e0 91 67 01 	lds	r30, 0x0167
     5d6:	f0 91 68 01 	lds	r31, 0x0168
     5da:	09 95       	icall
}
     5dc:	ff 91       	pop	r31
     5de:	ef 91       	pop	r30
     5e0:	bf 91       	pop	r27
     5e2:	af 91       	pop	r26
     5e4:	9f 91       	pop	r25
     5e6:	8f 91       	pop	r24
     5e8:	7f 91       	pop	r23
     5ea:	6f 91       	pop	r22
     5ec:	5f 91       	pop	r21
     5ee:	4f 91       	pop	r20
     5f0:	3f 91       	pop	r19
     5f2:	2f 91       	pop	r18
     5f4:	0f 90       	pop	r0
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	0f 90       	pop	r0
     5fa:	1f 90       	pop	r1
     5fc:	18 95       	reti

000005fe <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     5fe:	1f 92       	push	r1
     600:	0f 92       	push	r0
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	0f 92       	push	r0
     606:	11 24       	eor	r1, r1
     608:	2f 93       	push	r18
     60a:	3f 93       	push	r19
     60c:	4f 93       	push	r20
     60e:	5f 93       	push	r21
     610:	6f 93       	push	r22
     612:	7f 93       	push	r23
     614:	8f 93       	push	r24
     616:	9f 93       	push	r25
     618:	af 93       	push	r26
     61a:	bf 93       	push	r27
     61c:	ef 93       	push	r30
     61e:	ff 93       	push	r31
  Pin_Change_Interrupt_Request_2();
     620:	e0 91 59 01 	lds	r30, 0x0159
     624:	f0 91 5a 01 	lds	r31, 0x015A
     628:	09 95       	icall
}
     62a:	ff 91       	pop	r31
     62c:	ef 91       	pop	r30
     62e:	bf 91       	pop	r27
     630:	af 91       	pop	r26
     632:	9f 91       	pop	r25
     634:	8f 91       	pop	r24
     636:	7f 91       	pop	r23
     638:	6f 91       	pop	r22
     63a:	5f 91       	pop	r21
     63c:	4f 91       	pop	r20
     63e:	3f 91       	pop	r19
     640:	2f 91       	pop	r18
     642:	0f 90       	pop	r0
     644:	0f be       	out	0x3f, r0	; 63
     646:	0f 90       	pop	r0
     648:	1f 90       	pop	r1
     64a:	18 95       	reti

0000064c <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     64c:	1f 92       	push	r1
     64e:	0f 92       	push	r0
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	0f 92       	push	r0
     654:	11 24       	eor	r1, r1
     656:	2f 93       	push	r18
     658:	3f 93       	push	r19
     65a:	4f 93       	push	r20
     65c:	5f 93       	push	r21
     65e:	6f 93       	push	r22
     660:	7f 93       	push	r23
     662:	8f 93       	push	r24
     664:	9f 93       	push	r25
     666:	af 93       	push	r26
     668:	bf 93       	push	r27
     66a:	ef 93       	push	r30
     66c:	ff 93       	push	r31
  watch_dog_interrupt();
     66e:	e0 91 4b 01 	lds	r30, 0x014B
     672:	f0 91 4c 01 	lds	r31, 0x014C
     676:	09 95       	icall
}
     678:	ff 91       	pop	r31
     67a:	ef 91       	pop	r30
     67c:	bf 91       	pop	r27
     67e:	af 91       	pop	r26
     680:	9f 91       	pop	r25
     682:	8f 91       	pop	r24
     684:	7f 91       	pop	r23
     686:	6f 91       	pop	r22
     688:	5f 91       	pop	r21
     68a:	4f 91       	pop	r20
     68c:	3f 91       	pop	r19
     68e:	2f 91       	pop	r18
     690:	0f 90       	pop	r0
     692:	0f be       	out	0x3f, r0	; 63
     694:	0f 90       	pop	r0
     696:	1f 90       	pop	r1
     698:	18 95       	reti

0000069a <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
     69a:	1f 92       	push	r1
     69c:	0f 92       	push	r0
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	0f 92       	push	r0
     6a2:	11 24       	eor	r1, r1
     6a4:	2f 93       	push	r18
     6a6:	3f 93       	push	r19
     6a8:	4f 93       	push	r20
     6aa:	5f 93       	push	r21
     6ac:	6f 93       	push	r22
     6ae:	7f 93       	push	r23
     6b0:	8f 93       	push	r24
     6b2:	9f 93       	push	r25
     6b4:	af 93       	push	r26
     6b6:	bf 93       	push	r27
     6b8:	ef 93       	push	r30
     6ba:	ff 93       	push	r31
TIMER2COMPA();
     6bc:	e0 91 65 01 	lds	r30, 0x0165
     6c0:	f0 91 66 01 	lds	r31, 0x0166
     6c4:	09 95       	icall
}
     6c6:	ff 91       	pop	r31
     6c8:	ef 91       	pop	r30
     6ca:	bf 91       	pop	r27
     6cc:	af 91       	pop	r26
     6ce:	9f 91       	pop	r25
     6d0:	8f 91       	pop	r24
     6d2:	7f 91       	pop	r23
     6d4:	6f 91       	pop	r22
     6d6:	5f 91       	pop	r21
     6d8:	4f 91       	pop	r20
     6da:	3f 91       	pop	r19
     6dc:	2f 91       	pop	r18
     6de:	0f 90       	pop	r0
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	0f 90       	pop	r0
     6e4:	1f 90       	pop	r1
     6e6:	18 95       	reti

000006e8 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
     6e8:	1f 92       	push	r1
     6ea:	0f 92       	push	r0
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	0f 92       	push	r0
     6f0:	11 24       	eor	r1, r1
     6f2:	2f 93       	push	r18
     6f4:	3f 93       	push	r19
     6f6:	4f 93       	push	r20
     6f8:	5f 93       	push	r21
     6fa:	6f 93       	push	r22
     6fc:	7f 93       	push	r23
     6fe:	8f 93       	push	r24
     700:	9f 93       	push	r25
     702:	af 93       	push	r26
     704:	bf 93       	push	r27
     706:	ef 93       	push	r30
     708:	ff 93       	push	r31
  TIMER2COMPB();
     70a:	e0 91 55 01 	lds	r30, 0x0155
     70e:	f0 91 56 01 	lds	r31, 0x0156
     712:	09 95       	icall
}
     714:	ff 91       	pop	r31
     716:	ef 91       	pop	r30
     718:	bf 91       	pop	r27
     71a:	af 91       	pop	r26
     71c:	9f 91       	pop	r25
     71e:	8f 91       	pop	r24
     720:	7f 91       	pop	r23
     722:	6f 91       	pop	r22
     724:	5f 91       	pop	r21
     726:	4f 91       	pop	r20
     728:	3f 91       	pop	r19
     72a:	2f 91       	pop	r18
     72c:	0f 90       	pop	r0
     72e:	0f be       	out	0x3f, r0	; 63
     730:	0f 90       	pop	r0
     732:	1f 90       	pop	r1
     734:	18 95       	reti

00000736 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
     736:	1f 92       	push	r1
     738:	0f 92       	push	r0
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	0f 92       	push	r0
     73e:	11 24       	eor	r1, r1
     740:	2f 93       	push	r18
     742:	3f 93       	push	r19
     744:	4f 93       	push	r20
     746:	5f 93       	push	r21
     748:	6f 93       	push	r22
     74a:	7f 93       	push	r23
     74c:	8f 93       	push	r24
     74e:	9f 93       	push	r25
     750:	af 93       	push	r26
     752:	bf 93       	push	r27
     754:	ef 93       	push	r30
     756:	ff 93       	push	r31
  TIMER2OVF();
     758:	e0 91 11 01 	lds	r30, 0x0111
     75c:	f0 91 12 01 	lds	r31, 0x0112
     760:	09 95       	icall
}
     762:	ff 91       	pop	r31
     764:	ef 91       	pop	r30
     766:	bf 91       	pop	r27
     768:	af 91       	pop	r26
     76a:	9f 91       	pop	r25
     76c:	8f 91       	pop	r24
     76e:	7f 91       	pop	r23
     770:	6f 91       	pop	r22
     772:	5f 91       	pop	r21
     774:	4f 91       	pop	r20
     776:	3f 91       	pop	r19
     778:	2f 91       	pop	r18
     77a:	0f 90       	pop	r0
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	0f 90       	pop	r0
     780:	1f 90       	pop	r1
     782:	18 95       	reti

00000784 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     784:	1f 92       	push	r1
     786:	0f 92       	push	r0
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	0f 92       	push	r0
     78c:	11 24       	eor	r1, r1
     78e:	2f 93       	push	r18
     790:	3f 93       	push	r19
     792:	4f 93       	push	r20
     794:	5f 93       	push	r21
     796:	6f 93       	push	r22
     798:	7f 93       	push	r23
     79a:	8f 93       	push	r24
     79c:	9f 93       	push	r25
     79e:	af 93       	push	r26
     7a0:	bf 93       	push	r27
     7a2:	ef 93       	push	r30
     7a4:	ff 93       	push	r31

  TIMER1CAPT();
     7a6:	e0 91 71 01 	lds	r30, 0x0171
     7aa:	f0 91 72 01 	lds	r31, 0x0172
     7ae:	09 95       	icall
}
     7b0:	ff 91       	pop	r31
     7b2:	ef 91       	pop	r30
     7b4:	bf 91       	pop	r27
     7b6:	af 91       	pop	r26
     7b8:	9f 91       	pop	r25
     7ba:	8f 91       	pop	r24
     7bc:	7f 91       	pop	r23
     7be:	6f 91       	pop	r22
     7c0:	5f 91       	pop	r21
     7c2:	4f 91       	pop	r20
     7c4:	3f 91       	pop	r19
     7c6:	2f 91       	pop	r18
     7c8:	0f 90       	pop	r0
     7ca:	0f be       	out	0x3f, r0	; 63
     7cc:	0f 90       	pop	r0
     7ce:	1f 90       	pop	r1
     7d0:	18 95       	reti

000007d2 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     7d2:	1f 92       	push	r1
     7d4:	0f 92       	push	r0
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	0f 92       	push	r0
     7da:	11 24       	eor	r1, r1
     7dc:	2f 93       	push	r18
     7de:	3f 93       	push	r19
     7e0:	4f 93       	push	r20
     7e2:	5f 93       	push	r21
     7e4:	6f 93       	push	r22
     7e6:	7f 93       	push	r23
     7e8:	8f 93       	push	r24
     7ea:	9f 93       	push	r25
     7ec:	af 93       	push	r26
     7ee:	bf 93       	push	r27
     7f0:	ef 93       	push	r30
     7f2:	ff 93       	push	r31

  TIMER1COMPA();
     7f4:	e0 91 51 01 	lds	r30, 0x0151
     7f8:	f0 91 52 01 	lds	r31, 0x0152
     7fc:	09 95       	icall
}
     7fe:	ff 91       	pop	r31
     800:	ef 91       	pop	r30
     802:	bf 91       	pop	r27
     804:	af 91       	pop	r26
     806:	9f 91       	pop	r25
     808:	8f 91       	pop	r24
     80a:	7f 91       	pop	r23
     80c:	6f 91       	pop	r22
     80e:	5f 91       	pop	r21
     810:	4f 91       	pop	r20
     812:	3f 91       	pop	r19
     814:	2f 91       	pop	r18
     816:	0f 90       	pop	r0
     818:	0f be       	out	0x3f, r0	; 63
     81a:	0f 90       	pop	r0
     81c:	1f 90       	pop	r1
     81e:	18 95       	reti

00000820 <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
     820:	1f 92       	push	r1
     822:	0f 92       	push	r0
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	0f 92       	push	r0
     828:	11 24       	eor	r1, r1
     82a:	2f 93       	push	r18
     82c:	3f 93       	push	r19
     82e:	4f 93       	push	r20
     830:	5f 93       	push	r21
     832:	6f 93       	push	r22
     834:	7f 93       	push	r23
     836:	8f 93       	push	r24
     838:	9f 93       	push	r25
     83a:	af 93       	push	r26
     83c:	bf 93       	push	r27
     83e:	ef 93       	push	r30
     840:	ff 93       	push	r31
  TIMER1COMPB();
     842:	e0 91 4f 01 	lds	r30, 0x014F
     846:	f0 91 50 01 	lds	r31, 0x0150
     84a:	09 95       	icall
}
     84c:	ff 91       	pop	r31
     84e:	ef 91       	pop	r30
     850:	bf 91       	pop	r27
     852:	af 91       	pop	r26
     854:	9f 91       	pop	r25
     856:	8f 91       	pop	r24
     858:	7f 91       	pop	r23
     85a:	6f 91       	pop	r22
     85c:	5f 91       	pop	r21
     85e:	4f 91       	pop	r20
     860:	3f 91       	pop	r19
     862:	2f 91       	pop	r18
     864:	0f 90       	pop	r0
     866:	0f be       	out	0x3f, r0	; 63
     868:	0f 90       	pop	r0
     86a:	1f 90       	pop	r1
     86c:	18 95       	reti

0000086e <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     86e:	1f 92       	push	r1
     870:	0f 92       	push	r0
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	0f 92       	push	r0
     876:	11 24       	eor	r1, r1
     878:	2f 93       	push	r18
     87a:	3f 93       	push	r19
     87c:	4f 93       	push	r20
     87e:	5f 93       	push	r21
     880:	6f 93       	push	r22
     882:	7f 93       	push	r23
     884:	8f 93       	push	r24
     886:	9f 93       	push	r25
     888:	af 93       	push	r26
     88a:	bf 93       	push	r27
     88c:	ef 93       	push	r30
     88e:	ff 93       	push	r31
  TIMER1OVF();
     890:	e0 91 0f 01 	lds	r30, 0x010F
     894:	f0 91 10 01 	lds	r31, 0x0110
     898:	09 95       	icall
}
     89a:	ff 91       	pop	r31
     89c:	ef 91       	pop	r30
     89e:	bf 91       	pop	r27
     8a0:	af 91       	pop	r26
     8a2:	9f 91       	pop	r25
     8a4:	8f 91       	pop	r24
     8a6:	7f 91       	pop	r23
     8a8:	6f 91       	pop	r22
     8aa:	5f 91       	pop	r21
     8ac:	4f 91       	pop	r20
     8ae:	3f 91       	pop	r19
     8b0:	2f 91       	pop	r18
     8b2:	0f 90       	pop	r0
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	0f 90       	pop	r0
     8b8:	1f 90       	pop	r1
     8ba:	18 95       	reti

000008bc <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
     8bc:	1f 92       	push	r1
     8be:	0f 92       	push	r0
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	0f 92       	push	r0
     8c4:	11 24       	eor	r1, r1
     8c6:	2f 93       	push	r18
     8c8:	3f 93       	push	r19
     8ca:	4f 93       	push	r20
     8cc:	5f 93       	push	r21
     8ce:	6f 93       	push	r22
     8d0:	7f 93       	push	r23
     8d2:	8f 93       	push	r24
     8d4:	9f 93       	push	r25
     8d6:	af 93       	push	r26
     8d8:	bf 93       	push	r27
     8da:	ef 93       	push	r30
     8dc:	ff 93       	push	r31
  TIMER0COMPA();
     8de:	e0 91 6f 01 	lds	r30, 0x016F
     8e2:	f0 91 70 01 	lds	r31, 0x0170
     8e6:	09 95       	icall
}
     8e8:	ff 91       	pop	r31
     8ea:	ef 91       	pop	r30
     8ec:	bf 91       	pop	r27
     8ee:	af 91       	pop	r26
     8f0:	9f 91       	pop	r25
     8f2:	8f 91       	pop	r24
     8f4:	7f 91       	pop	r23
     8f6:	6f 91       	pop	r22
     8f8:	5f 91       	pop	r21
     8fa:	4f 91       	pop	r20
     8fc:	3f 91       	pop	r19
     8fe:	2f 91       	pop	r18
     900:	0f 90       	pop	r0
     902:	0f be       	out	0x3f, r0	; 63
     904:	0f 90       	pop	r0
     906:	1f 90       	pop	r1
     908:	18 95       	reti

0000090a <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
     90a:	1f 92       	push	r1
     90c:	0f 92       	push	r0
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	0f 92       	push	r0
     912:	11 24       	eor	r1, r1
     914:	2f 93       	push	r18
     916:	3f 93       	push	r19
     918:	4f 93       	push	r20
     91a:	5f 93       	push	r21
     91c:	6f 93       	push	r22
     91e:	7f 93       	push	r23
     920:	8f 93       	push	r24
     922:	9f 93       	push	r25
     924:	af 93       	push	r26
     926:	bf 93       	push	r27
     928:	ef 93       	push	r30
     92a:	ff 93       	push	r31
  TIMER0COMPB();
     92c:	e0 91 5f 01 	lds	r30, 0x015F
     930:	f0 91 60 01 	lds	r31, 0x0160
     934:	09 95       	icall
}
     936:	ff 91       	pop	r31
     938:	ef 91       	pop	r30
     93a:	bf 91       	pop	r27
     93c:	af 91       	pop	r26
     93e:	9f 91       	pop	r25
     940:	8f 91       	pop	r24
     942:	7f 91       	pop	r23
     944:	6f 91       	pop	r22
     946:	5f 91       	pop	r21
     948:	4f 91       	pop	r20
     94a:	3f 91       	pop	r19
     94c:	2f 91       	pop	r18
     94e:	0f 90       	pop	r0
     950:	0f be       	out	0x3f, r0	; 63
     952:	0f 90       	pop	r0
     954:	1f 90       	pop	r1
     956:	18 95       	reti

00000958 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     958:	1f 92       	push	r1
     95a:	0f 92       	push	r0
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	0f 92       	push	r0
     960:	11 24       	eor	r1, r1
     962:	2f 93       	push	r18
     964:	3f 93       	push	r19
     966:	4f 93       	push	r20
     968:	5f 93       	push	r21
     96a:	6f 93       	push	r22
     96c:	7f 93       	push	r23
     96e:	8f 93       	push	r24
     970:	9f 93       	push	r25
     972:	af 93       	push	r26
     974:	bf 93       	push	r27
     976:	ef 93       	push	r30
     978:	ff 93       	push	r31
  TIMER0OVF_INT();
     97a:	e0 91 5b 01 	lds	r30, 0x015B
     97e:	f0 91 5c 01 	lds	r31, 0x015C
     982:	09 95       	icall
}
     984:	ff 91       	pop	r31
     986:	ef 91       	pop	r30
     988:	bf 91       	pop	r27
     98a:	af 91       	pop	r26
     98c:	9f 91       	pop	r25
     98e:	8f 91       	pop	r24
     990:	7f 91       	pop	r23
     992:	6f 91       	pop	r22
     994:	5f 91       	pop	r21
     996:	4f 91       	pop	r20
     998:	3f 91       	pop	r19
     99a:	2f 91       	pop	r18
     99c:	0f 90       	pop	r0
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	0f 90       	pop	r0
     9a2:	1f 90       	pop	r1
     9a4:	18 95       	reti

000009a6 <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
     9a6:	1f 92       	push	r1
     9a8:	0f 92       	push	r0
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	0f 92       	push	r0
     9ae:	11 24       	eor	r1, r1
     9b0:	2f 93       	push	r18
     9b2:	3f 93       	push	r19
     9b4:	4f 93       	push	r20
     9b6:	5f 93       	push	r21
     9b8:	6f 93       	push	r22
     9ba:	7f 93       	push	r23
     9bc:	8f 93       	push	r24
     9be:	9f 93       	push	r25
     9c0:	af 93       	push	r26
     9c2:	bf 93       	push	r27
     9c4:	ef 93       	push	r30
     9c6:	ff 93       	push	r31
  SPI_STC();
     9c8:	e0 91 57 01 	lds	r30, 0x0157
     9cc:	f0 91 58 01 	lds	r31, 0x0158
     9d0:	09 95       	icall
}
     9d2:	ff 91       	pop	r31
     9d4:	ef 91       	pop	r30
     9d6:	bf 91       	pop	r27
     9d8:	af 91       	pop	r26
     9da:	9f 91       	pop	r25
     9dc:	8f 91       	pop	r24
     9de:	7f 91       	pop	r23
     9e0:	6f 91       	pop	r22
     9e2:	5f 91       	pop	r21
     9e4:	4f 91       	pop	r20
     9e6:	3f 91       	pop	r19
     9e8:	2f 91       	pop	r18
     9ea:	0f 90       	pop	r0
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	0f 90       	pop	r0
     9f0:	1f 90       	pop	r1
     9f2:	18 95       	reti

000009f4 <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
     9f4:	1f 92       	push	r1
     9f6:	0f 92       	push	r0
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	0f 92       	push	r0
     9fc:	11 24       	eor	r1, r1
     9fe:	2f 93       	push	r18
     a00:	3f 93       	push	r19
     a02:	4f 93       	push	r20
     a04:	5f 93       	push	r21
     a06:	6f 93       	push	r22
     a08:	7f 93       	push	r23
     a0a:	8f 93       	push	r24
     a0c:	9f 93       	push	r25
     a0e:	af 93       	push	r26
     a10:	bf 93       	push	r27
     a12:	ef 93       	push	r30
     a14:	ff 93       	push	r31
  USART_RXC();
     a16:	e0 91 49 01 	lds	r30, 0x0149
     a1a:	f0 91 4a 01 	lds	r31, 0x014A
     a1e:	09 95       	icall
}
     a20:	ff 91       	pop	r31
     a22:	ef 91       	pop	r30
     a24:	bf 91       	pop	r27
     a26:	af 91       	pop	r26
     a28:	9f 91       	pop	r25
     a2a:	8f 91       	pop	r24
     a2c:	7f 91       	pop	r23
     a2e:	6f 91       	pop	r22
     a30:	5f 91       	pop	r21
     a32:	4f 91       	pop	r20
     a34:	3f 91       	pop	r19
     a36:	2f 91       	pop	r18
     a38:	0f 90       	pop	r0
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	0f 90       	pop	r0
     a3e:	1f 90       	pop	r1
     a40:	18 95       	reti

00000a42 <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
     a42:	1f 92       	push	r1
     a44:	0f 92       	push	r0
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	0f 92       	push	r0
     a4a:	11 24       	eor	r1, r1
     a4c:	2f 93       	push	r18
     a4e:	3f 93       	push	r19
     a50:	4f 93       	push	r20
     a52:	5f 93       	push	r21
     a54:	6f 93       	push	r22
     a56:	7f 93       	push	r23
     a58:	8f 93       	push	r24
     a5a:	9f 93       	push	r25
     a5c:	af 93       	push	r26
     a5e:	bf 93       	push	r27
     a60:	ef 93       	push	r30
     a62:	ff 93       	push	r31
  USART_UDRE();
     a64:	e0 91 6b 01 	lds	r30, 0x016B
     a68:	f0 91 6c 01 	lds	r31, 0x016C
     a6c:	09 95       	icall
}
     a6e:	ff 91       	pop	r31
     a70:	ef 91       	pop	r30
     a72:	bf 91       	pop	r27
     a74:	af 91       	pop	r26
     a76:	9f 91       	pop	r25
     a78:	8f 91       	pop	r24
     a7a:	7f 91       	pop	r23
     a7c:	6f 91       	pop	r22
     a7e:	5f 91       	pop	r21
     a80:	4f 91       	pop	r20
     a82:	3f 91       	pop	r19
     a84:	2f 91       	pop	r18
     a86:	0f 90       	pop	r0
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	0f 90       	pop	r0
     a8c:	1f 90       	pop	r1
     a8e:	18 95       	reti

00000a90 <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
     a90:	1f 92       	push	r1
     a92:	0f 92       	push	r0
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	0f 92       	push	r0
     a98:	11 24       	eor	r1, r1
     a9a:	2f 93       	push	r18
     a9c:	3f 93       	push	r19
     a9e:	4f 93       	push	r20
     aa0:	5f 93       	push	r21
     aa2:	6f 93       	push	r22
     aa4:	7f 93       	push	r23
     aa6:	8f 93       	push	r24
     aa8:	9f 93       	push	r25
     aaa:	af 93       	push	r26
     aac:	bf 93       	push	r27
     aae:	ef 93       	push	r30
     ab0:	ff 93       	push	r31
  USART_TXC();
     ab2:	e0 91 69 01 	lds	r30, 0x0169
     ab6:	f0 91 6a 01 	lds	r31, 0x016A
     aba:	09 95       	icall
}
     abc:	ff 91       	pop	r31
     abe:	ef 91       	pop	r30
     ac0:	bf 91       	pop	r27
     ac2:	af 91       	pop	r26
     ac4:	9f 91       	pop	r25
     ac6:	8f 91       	pop	r24
     ac8:	7f 91       	pop	r23
     aca:	6f 91       	pop	r22
     acc:	5f 91       	pop	r21
     ace:	4f 91       	pop	r20
     ad0:	3f 91       	pop	r19
     ad2:	2f 91       	pop	r18
     ad4:	0f 90       	pop	r0
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	0f 90       	pop	r0
     ada:	1f 90       	pop	r1
     adc:	18 95       	reti

00000ade <__vector_21>:

void __vector_21(void) __attribute__((signal));
void __vector_21(void)
{
     ade:	1f 92       	push	r1
     ae0:	0f 92       	push	r0
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	0f 92       	push	r0
     ae6:	11 24       	eor	r1, r1
     ae8:	2f 93       	push	r18
     aea:	3f 93       	push	r19
     aec:	4f 93       	push	r20
     aee:	5f 93       	push	r21
     af0:	6f 93       	push	r22
     af2:	7f 93       	push	r23
     af4:	8f 93       	push	r24
     af6:	9f 93       	push	r25
     af8:	af 93       	push	r26
     afa:	bf 93       	push	r27
     afc:	ef 93       	push	r30
     afe:	ff 93       	push	r31
  ADC_INT();
     b00:	e0 91 61 01 	lds	r30, 0x0161
     b04:	f0 91 62 01 	lds	r31, 0x0162
     b08:	09 95       	icall
}
     b0a:	ff 91       	pop	r31
     b0c:	ef 91       	pop	r30
     b0e:	bf 91       	pop	r27
     b10:	af 91       	pop	r26
     b12:	9f 91       	pop	r25
     b14:	8f 91       	pop	r24
     b16:	7f 91       	pop	r23
     b18:	6f 91       	pop	r22
     b1a:	5f 91       	pop	r21
     b1c:	4f 91       	pop	r20
     b1e:	3f 91       	pop	r19
     b20:	2f 91       	pop	r18
     b22:	0f 90       	pop	r0
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	0f 90       	pop	r0
     b28:	1f 90       	pop	r1
     b2a:	18 95       	reti

00000b2c <__vector_22>:

void __vector_22(void) __attribute__((signal));
void __vector_22(void)
{
     b2c:	1f 92       	push	r1
     b2e:	0f 92       	push	r0
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	0f 92       	push	r0
     b34:	11 24       	eor	r1, r1
     b36:	2f 93       	push	r18
     b38:	3f 93       	push	r19
     b3a:	4f 93       	push	r20
     b3c:	5f 93       	push	r21
     b3e:	6f 93       	push	r22
     b40:	7f 93       	push	r23
     b42:	8f 93       	push	r24
     b44:	9f 93       	push	r25
     b46:	af 93       	push	r26
     b48:	bf 93       	push	r27
     b4a:	ef 93       	push	r30
     b4c:	ff 93       	push	r31
  EE_RDY();
     b4e:	e0 91 63 01 	lds	r30, 0x0163
     b52:	f0 91 64 01 	lds	r31, 0x0164
     b56:	09 95       	icall
}
     b58:	ff 91       	pop	r31
     b5a:	ef 91       	pop	r30
     b5c:	bf 91       	pop	r27
     b5e:	af 91       	pop	r26
     b60:	9f 91       	pop	r25
     b62:	8f 91       	pop	r24
     b64:	7f 91       	pop	r23
     b66:	6f 91       	pop	r22
     b68:	5f 91       	pop	r21
     b6a:	4f 91       	pop	r20
     b6c:	3f 91       	pop	r19
     b6e:	2f 91       	pop	r18
     b70:	0f 90       	pop	r0
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	0f 90       	pop	r0
     b76:	1f 90       	pop	r1
     b78:	18 95       	reti

00000b7a <__vector_23>:

void __vector_23(void) __attribute__((signal));
void __vector_23(void)
{
     b7a:	1f 92       	push	r1
     b7c:	0f 92       	push	r0
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	0f 92       	push	r0
     b82:	11 24       	eor	r1, r1
     b84:	2f 93       	push	r18
     b86:	3f 93       	push	r19
     b88:	4f 93       	push	r20
     b8a:	5f 93       	push	r21
     b8c:	6f 93       	push	r22
     b8e:	7f 93       	push	r23
     b90:	8f 93       	push	r24
     b92:	9f 93       	push	r25
     b94:	af 93       	push	r26
     b96:	bf 93       	push	r27
     b98:	ef 93       	push	r30
     b9a:	ff 93       	push	r31
  ANA_COMP();
     b9c:	e0 91 5d 01 	lds	r30, 0x015D
     ba0:	f0 91 5e 01 	lds	r31, 0x015E
     ba4:	09 95       	icall
}
     ba6:	ff 91       	pop	r31
     ba8:	ef 91       	pop	r30
     baa:	bf 91       	pop	r27
     bac:	af 91       	pop	r26
     bae:	9f 91       	pop	r25
     bb0:	8f 91       	pop	r24
     bb2:	7f 91       	pop	r23
     bb4:	6f 91       	pop	r22
     bb6:	5f 91       	pop	r21
     bb8:	4f 91       	pop	r20
     bba:	3f 91       	pop	r19
     bbc:	2f 91       	pop	r18
     bbe:	0f 90       	pop	r0
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	0f 90       	pop	r0
     bc4:	1f 90       	pop	r1
     bc6:	18 95       	reti

00000bc8 <__vector_24>:

void __vector_24(void) __attribute__((signal));
void __vector_24(void)
{
     bc8:	1f 92       	push	r1
     bca:	0f 92       	push	r0
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	0f 92       	push	r0
     bd0:	11 24       	eor	r1, r1
     bd2:	2f 93       	push	r18
     bd4:	3f 93       	push	r19
     bd6:	4f 93       	push	r20
     bd8:	5f 93       	push	r21
     bda:	6f 93       	push	r22
     bdc:	7f 93       	push	r23
     bde:	8f 93       	push	r24
     be0:	9f 93       	push	r25
     be2:	af 93       	push	r26
     be4:	bf 93       	push	r27
     be6:	ef 93       	push	r30
     be8:	ff 93       	push	r31
  TWI_I2C();
     bea:	e0 91 47 01 	lds	r30, 0x0147
     bee:	f0 91 48 01 	lds	r31, 0x0148
     bf2:	09 95       	icall
}
     bf4:	ff 91       	pop	r31
     bf6:	ef 91       	pop	r30
     bf8:	bf 91       	pop	r27
     bfa:	af 91       	pop	r26
     bfc:	9f 91       	pop	r25
     bfe:	8f 91       	pop	r24
     c00:	7f 91       	pop	r23
     c02:	6f 91       	pop	r22
     c04:	5f 91       	pop	r21
     c06:	4f 91       	pop	r20
     c08:	3f 91       	pop	r19
     c0a:	2f 91       	pop	r18
     c0c:	0f 90       	pop	r0
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	0f 90       	pop	r0
     c12:	1f 90       	pop	r1
     c14:	18 95       	reti

00000c16 <__vector_25>:

void __vector_25(void) __attribute__((signal));
void __vector_25(void)
{
     c16:	1f 92       	push	r1
     c18:	0f 92       	push	r0
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	0f 92       	push	r0
     c1e:	11 24       	eor	r1, r1
     c20:	2f 93       	push	r18
     c22:	3f 93       	push	r19
     c24:	4f 93       	push	r20
     c26:	5f 93       	push	r21
     c28:	6f 93       	push	r22
     c2a:	7f 93       	push	r23
     c2c:	8f 93       	push	r24
     c2e:	9f 93       	push	r25
     c30:	af 93       	push	r26
     c32:	bf 93       	push	r27
     c34:	ef 93       	push	r30
     c36:	ff 93       	push	r31
  SPM_RDY();
     c38:	e0 91 4d 01 	lds	r30, 0x014D
     c3c:	f0 91 4e 01 	lds	r31, 0x014E
     c40:	09 95       	icall
}
     c42:	ff 91       	pop	r31
     c44:	ef 91       	pop	r30
     c46:	bf 91       	pop	r27
     c48:	af 91       	pop	r26
     c4a:	9f 91       	pop	r25
     c4c:	8f 91       	pop	r24
     c4e:	7f 91       	pop	r23
     c50:	6f 91       	pop	r22
     c52:	5f 91       	pop	r21
     c54:	4f 91       	pop	r20
     c56:	3f 91       	pop	r19
     c58:	2f 91       	pop	r18
     c5a:	0f 90       	pop	r0
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	0f 90       	pop	r0
     c60:	1f 90       	pop	r1
     c62:	18 95       	reti

00000c64 <main>:
#include "DIO.h"
#include "ICU.h"
static uint32_t timespend=0;
int main(void)
{
	DIO_init(&Dio_configurationD);
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_init>
	Pwm_Init(&PWM_Configuration_0);
     c6c:	87 e1       	ldi	r24, 0x17	; 23
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	0e 94 51 06 	call	0xca2	; 0xca2 <Pwm_Init>
	DIO_Write(GPIOD,PIN6,HIGH);
     c74:	83 e0       	ldi	r24, 0x03	; 3
     c76:	60 e4       	ldi	r22, 0x40	; 64
     c78:	4f ef       	ldi	r20, 0xFF	; 255
     c7a:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
    Us_Init();
     c7e:	0e 94 f6 09 	call	0x13ec	; 0x13ec <Us_Init>
	while(1)
    {
	Pwm_Start(PWM_CH0,60,10);
	Us_Trigger();
	Us_GetDistance(&timespend);
     c82:	c9 e3       	ldi	r28, 0x39	; 57
     c84:	d1 e0       	ldi	r29, 0x01	; 1
	Pwm_Init(&PWM_Configuration_0);
	DIO_Write(GPIOD,PIN6,HIGH);
    Us_Init();
	while(1)
    {
	Pwm_Start(PWM_CH0,60,10);
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	6c e3       	ldi	r22, 0x3C	; 60
     c8a:	2a e0       	ldi	r18, 0x0A	; 10
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	40 e0       	ldi	r20, 0x00	; 0
     c90:	50 e0       	ldi	r21, 0x00	; 0
     c92:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Pwm_Start>
	Us_Trigger();
     c96:	0e 94 13 0a 	call	0x1426	; 0x1426 <Us_Trigger>
	Us_GetDistance(&timespend);
     c9a:	ce 01       	movw	r24, r28
     c9c:	0e 94 2c 0a 	call	0x1458	; 0x1458 <Us_GetDistance>
     ca0:	f2 cf       	rjmp	.-28     	; 0xc86 <main+0x22>

00000ca2 <Pwm_Init>:
/* Return type : void                                                            */
/*                                                                               */
/* Description: initialize the PWM configuration                                 */
/*********************************************************************************/
ERROR_STATUS Pwm_Init(Pwm_Cfg_s *Pwm_Cfg)
{
     ca2:	fc 01       	movw	r30, r24
  uint8_t Ret=0;
  switch(Pwm_Cfg->Channel)
     ca4:	80 81       	ld	r24, Z
     ca6:	88 23       	and	r24, r24
     ca8:	29 f4       	brne	.+10     	; 0xcb4 <Pwm_Init+0x12>
    {
      case PWM_CH0:
      TCCR0|=T0_PWM_FAST |T0_NON_INVERTING;
     caa:	84 b5       	in	r24, 0x24	; 36
     cac:	95 b5       	in	r25, 0x25	; 37
     cae:	83 68       	ori	r24, 0x83	; 131
     cb0:	95 bd       	out	0x25, r25	; 37
     cb2:	84 bd       	out	0x24, r24	; 36
      break;
      default:
      Ret=E_NOK;
      break;*/
    }
  sgl_Prescaler=Pwm_Cfg->Prescaler;
     cb4:	81 81       	ldd	r24, Z+1	; 0x01
     cb6:	80 93 3d 01 	sts	0x013D, r24
  u32g_T1_Prescaler=en_prescal;
  OCR1A =u16_outputCompareA;
  OCR1B =u16_outputCompareB;
  TCNT1=u16_initialValue;
  */
}
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	08 95       	ret

00000cbe <Pwm_Start>:
/*-------------------------------------------------------                        */
/*((all this calculations are for phase correct mode))                           */
/*all this calculation for F_CPU 16MHz                                           */
/*********************************************************************************/
ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{uint8_t Ret=0;
     cbe:	0f 93       	push	r16
     cc0:	1f 93       	push	r17
     cc2:	96 2f       	mov	r25, r22
     cc4:	ba 01       	movw	r22, r20
     cc6:	a9 01       	movw	r20, r18
  float dutyReal;
uint32_t pwm_time_on = MAX_HOLD;

if(Frequncy <= 31372 && Frequncy > 3921 )
     cc8:	8a 01       	movw	r16, r20
     cca:	9b 01       	movw	r18, r22
     ccc:	02 55       	subi	r16, 0x52	; 82
     cce:	1f 40       	sbci	r17, 0x0F	; 15
     cd0:	20 40       	sbci	r18, 0x00	; 0
     cd2:	30 40       	sbci	r19, 0x00	; 0
     cd4:	0b 33       	cpi	r16, 0x3B	; 59
     cd6:	eb e6       	ldi	r30, 0x6B	; 107
     cd8:	1e 07       	cpc	r17, r30
     cda:	e0 e0       	ldi	r30, 0x00	; 0
     cdc:	2e 07       	cpc	r18, r30
     cde:	e0 e0       	ldi	r30, 0x00	; 0
     ce0:	3e 07       	cpc	r19, r30
     ce2:	18 f4       	brcc	.+6      	; 0xcea <Pwm_Start+0x2c>
  sgl_Prescaler=PWM_PRESCALER_NO;
     ce4:	10 92 3d 01 	sts	0x013D, r1
     ce8:	64 c0       	rjmp	.+200    	; 0xdb2 <Pwm_Start+0xf4>
else if(Frequncy <= 3921 && Frequncy > 980)
     cea:	8a 01       	movw	r16, r20
     cec:	9b 01       	movw	r18, r22
     cee:	05 5d       	subi	r16, 0xD5	; 213
     cf0:	13 40       	sbci	r17, 0x03	; 3
     cf2:	20 40       	sbci	r18, 0x00	; 0
     cf4:	30 40       	sbci	r19, 0x00	; 0
     cf6:	0d 37       	cpi	r16, 0x7D	; 125
     cf8:	eb e0       	ldi	r30, 0x0B	; 11
     cfa:	1e 07       	cpc	r17, r30
     cfc:	e0 e0       	ldi	r30, 0x00	; 0
     cfe:	2e 07       	cpc	r18, r30
     d00:	e0 e0       	ldi	r30, 0x00	; 0
     d02:	3e 07       	cpc	r19, r30
     d04:	20 f4       	brcc	.+8      	; 0xd0e <Pwm_Start+0x50>
  sgl_Prescaler=PWM_PRESCALER_8;
     d06:	21 e0       	ldi	r18, 0x01	; 1
     d08:	20 93 3d 01 	sts	0x013D, r18
     d0c:	58 c0       	rjmp	.+176    	; 0xdbe <Pwm_Start+0x100>
else if(Frequncy <= 980 && Frequncy > 490)
     d0e:	8a 01       	movw	r16, r20
     d10:	9b 01       	movw	r18, r22
     d12:	0b 5e       	subi	r16, 0xEB	; 235
     d14:	11 40       	sbci	r17, 0x01	; 1
     d16:	20 40       	sbci	r18, 0x00	; 0
     d18:	30 40       	sbci	r19, 0x00	; 0
     d1a:	0a 3e       	cpi	r16, 0xEA	; 234
     d1c:	e1 e0       	ldi	r30, 0x01	; 1
     d1e:	1e 07       	cpc	r17, r30
     d20:	e0 e0       	ldi	r30, 0x00	; 0
     d22:	2e 07       	cpc	r18, r30
     d24:	e0 e0       	ldi	r30, 0x00	; 0
     d26:	3e 07       	cpc	r19, r30
     d28:	20 f4       	brcc	.+8      	; 0xd32 <Pwm_Start+0x74>
  sgl_Prescaler=PWM_PRESCALER_32;
     d2a:	22 e0       	ldi	r18, 0x02	; 2
     d2c:	20 93 3d 01 	sts	0x013D, r18
     d30:	4c c0       	rjmp	.+152    	; 0xdca <Pwm_Start+0x10c>
else if(Frequncy <= 490 && Frequncy > 122)
     d32:	8a 01       	movw	r16, r20
     d34:	9b 01       	movw	r18, r22
     d36:	0b 57       	subi	r16, 0x7B	; 123
     d38:	10 40       	sbci	r17, 0x00	; 0
     d3a:	20 40       	sbci	r18, 0x00	; 0
     d3c:	30 40       	sbci	r19, 0x00	; 0
     d3e:	00 37       	cpi	r16, 0x70	; 112
     d40:	e1 e0       	ldi	r30, 0x01	; 1
     d42:	1e 07       	cpc	r17, r30
     d44:	e0 e0       	ldi	r30, 0x00	; 0
     d46:	2e 07       	cpc	r18, r30
     d48:	e0 e0       	ldi	r30, 0x00	; 0
     d4a:	3e 07       	cpc	r19, r30
     d4c:	20 f4       	brcc	.+8      	; 0xd56 <Pwm_Start+0x98>
  sgl_Prescaler=PWM_PRESCALER_64;
     d4e:	23 e0       	ldi	r18, 0x03	; 3
     d50:	20 93 3d 01 	sts	0x013D, r18
     d54:	45 c0       	rjmp	.+138    	; 0xde0 <Pwm_Start+0x122>
else if(Frequncy <= 122 && Frequncy > 31)
     d56:	8a 01       	movw	r16, r20
     d58:	9b 01       	movw	r18, r22
     d5a:	00 52       	subi	r16, 0x20	; 32
     d5c:	10 40       	sbci	r17, 0x00	; 0
     d5e:	20 40       	sbci	r18, 0x00	; 0
     d60:	30 40       	sbci	r19, 0x00	; 0
     d62:	0b 35       	cpi	r16, 0x5B	; 91
     d64:	11 05       	cpc	r17, r1
     d66:	21 05       	cpc	r18, r1
     d68:	31 05       	cpc	r19, r1
     d6a:	20 f4       	brcc	.+8      	; 0xd74 <Pwm_Start+0xb6>
  sgl_Prescaler=PWM_PRESCALER_256;
     d6c:	24 e0       	ldi	r18, 0x04	; 4
     d6e:	20 93 3d 01 	sts	0x013D, r18
     d72:	3c c0       	rjmp	.+120    	; 0xdec <Pwm_Start+0x12e>
else if(Frequncy <= 31 && Frequncy > 0)
     d74:	41 50       	subi	r20, 0x01	; 1
     d76:	50 40       	sbci	r21, 0x00	; 0
     d78:	60 40       	sbci	r22, 0x00	; 0
     d7a:	70 40       	sbci	r23, 0x00	; 0
     d7c:	4f 31       	cpi	r20, 0x1F	; 31
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	20 f4       	brcc	.+8      	; 0xd8e <Pwm_Start+0xd0>
  sgl_Prescaler=PWM_PRESCALER_1024;
     d86:	25 e0       	ldi	r18, 0x05	; 5
     d88:	20 93 3d 01 	sts	0x013D, r18
     d8c:	35 c0       	rjmp	.+106    	; 0xdf8 <Pwm_Start+0x13a>
else{Ret=E_NOK;}
switch(sgl_Prescaler)
     d8e:	20 91 3d 01 	lds	r18, 0x013D
     d92:	22 30       	cpi	r18, 0x02	; 2
     d94:	d1 f0       	breq	.+52     	; 0xdca <Pwm_Start+0x10c>
     d96:	23 30       	cpi	r18, 0x03	; 3
     d98:	28 f4       	brcc	.+10     	; 0xda4 <Pwm_Start+0xe6>
     d9a:	22 23       	and	r18, r18
     d9c:	51 f0       	breq	.+20     	; 0xdb2 <Pwm_Start+0xf4>
     d9e:	21 30       	cpi	r18, 0x01	; 1
     da0:	89 f5       	brne	.+98     	; 0xe04 <Pwm_Start+0x146>
     da2:	0d c0       	rjmp	.+26     	; 0xdbe <Pwm_Start+0x100>
     da4:	24 30       	cpi	r18, 0x04	; 4
     da6:	11 f1       	breq	.+68     	; 0xdec <Pwm_Start+0x12e>
     da8:	24 30       	cpi	r18, 0x04	; 4
     daa:	d0 f0       	brcs	.+52     	; 0xde0 <Pwm_Start+0x122>
     dac:	25 30       	cpi	r18, 0x05	; 5
     dae:	51 f5       	brne	.+84     	; 0xe04 <Pwm_Start+0x146>
     db0:	23 c0       	rjmp	.+70     	; 0xdf8 <Pwm_Start+0x13a>
{
  case PWM_PRESCALER_NO:
  {
    switch(Channel)
     db2:	88 23       	and	r24, r24
     db4:	39 f5       	brne	.+78     	; 0xe04 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B |= PWM_PRESCALER_NO_CONFIG;
     db6:	85 b5       	in	r24, 0x25	; 37
     db8:	81 60       	ori	r24, 0x01	; 1
     dba:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     dbc:	25 c0       	rjmp	.+74     	; 0xe08 <Pwm_Start+0x14a>
  }


  case PWM_PRESCALER_8:
  {
    switch(Channel)
     dbe:	88 23       	and	r24, r24
     dc0:	09 f5       	brne	.+66     	; 0xe04 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_8_CONFIG;
     dc2:	85 b5       	in	r24, 0x25	; 37
     dc4:	82 60       	ori	r24, 0x02	; 2
     dc6:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     dc8:	1f c0       	rjmp	.+62     	; 0xe08 <Pwm_Start+0x14a>
    break;
  }

  case PWM_PRESCALER_32:
  {
    switch(Channel)
     dca:	83 30       	cpi	r24, 0x03	; 3
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <Pwm_Start+0x146>
    {
      case PWM_CH2:
      {TCCR2|=PWM_PRESCALER_32_CONFIG_T2;
     dce:	e0 eb       	ldi	r30, 0xB0	; 176
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	91 81       	ldd	r25, Z+1	; 0x01
     dd6:	83 60       	ori	r24, 0x03	; 3
     dd8:	91 83       	std	Z+1, r25	; 0x01
     dda:	80 83       	st	Z, r24
      Ret=E_OK;
      }
      break;
  */
      default:
      Ret=E_NOK;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	2f c0       	rjmp	.+94     	; 0xe3e <Pwm_Start+0x180>
    break;
  }

  case PWM_PRESCALER_64:
  {
    switch(Channel)
     de0:	88 23       	and	r24, r24
     de2:	81 f4       	brne	.+32     	; 0xe04 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_64_CONFIG;
     de4:	85 b5       	in	r24, 0x25	; 37
     de6:	83 60       	ori	r24, 0x03	; 3
     de8:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     dea:	0e c0       	rjmp	.+28     	; 0xe08 <Pwm_Start+0x14a>
    break;
  }

  case PWM_PRESCALER_256:
  {
    switch(Channel)
     dec:	88 23       	and	r24, r24
     dee:	51 f4       	brne	.+20     	; 0xe04 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_64_CONFIG;
     df0:	85 b5       	in	r24, 0x25	; 37
     df2:	83 60       	ori	r24, 0x03	; 3
     df4:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     df6:	08 c0       	rjmp	.+16     	; 0xe08 <Pwm_Start+0x14a>
  }

 
  case PWM_PRESCALER_1024:
  {
    switch(Channel)
     df8:	88 23       	and	r24, r24
     dfa:	21 f4       	brne	.+8      	; 0xe04 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_1024_CONFIG;
     dfc:	85 b5       	in	r24, 0x25	; 37
     dfe:	85 60       	ori	r24, 0x05	; 5
     e00:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <Pwm_Start+0x14a>



}

switch(Channel)
     e04:	88 23       	and	r24, r24
     e06:	d1 f4       	brne	.+52     	; 0xe3c <Pwm_Start+0x17e>
    {
      case PWM_CH0:{
      pwm_time_on=MAX_HOLD;
      dutyReal=((float)Duty/(float)FULL_SPEED);
     e08:	69 2f       	mov	r22, r25
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__floatunsisf>
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	48 ec       	ldi	r20, 0xC8	; 200
     e1a:	52 e4       	ldi	r21, 0x42	; 66
     e1c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__divsf3>
      pwm_time_on=(float)pwm_time_on*dutyReal;
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	4f e7       	ldi	r20, 0x7F	; 127
     e26:	53 e4       	ldi	r21, 0x43	; 67
     e28:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__mulsf3>
     e2c:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__fixunssfsi>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
      OCR0=pwm_time_on;
     e34:	98 bd       	out	0x28, r25	; 40
     e36:	87 bd       	out	0x27, r24	; 39
      Ret=E_OK;
     e38:	80 e0       	ldi	r24, 0x00	; 0
      break;
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <Pwm_Start+0x180>
      Ret=E_OK;
      }
      break;
  */
      default:
      Ret=E_NOK;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
      break;
    }
sgl_is_started=1;
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	90 93 3e 01 	sts	0x013E, r25
return Ret;
}
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	08 95       	ret

00000e4a <Pwm_Update>:


ERROR_STATUS Pwm_Update(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
uint8_t Ret=0;
if (sgl_is_started == 1)
     e4a:	90 91 3e 01 	lds	r25, 0x013E
     e4e:	91 30       	cpi	r25, 0x01	; 1
     e50:	21 f4       	brne	.+8      	; 0xe5a <Pwm_Update+0x10>
{
  Pwm_Start( Channel,Duty,Frequncy);
     e52:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Pwm_Start>
Ret=E_OK;
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	08 95       	ret
}else{Ret=E_NOK;}
     e5a:	81 e0       	ldi	r24, 0x01	; 1


return Ret;
}
     e5c:	08 95       	ret

00000e5e <Pwm_Stop>:
/*********************************************************************************/

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
uint8_t Ret=0;
switch(Channel)
     e5e:	83 30       	cpi	r24, 0x03	; 3
     e60:	18 f4       	brcc	.+6      	; 0xe68 <Pwm_Stop+0xa>
     e62:	81 30       	cpi	r24, 0x01	; 1
     e64:	60 f4       	brcc	.+24     	; 0xe7e <Pwm_Stop+0x20>
     e66:	03 c0       	rjmp	.+6      	; 0xe6e <Pwm_Stop+0x10>
     e68:	83 30       	cpi	r24, 0x03	; 3
     e6a:	d1 f4       	brne	.+52     	; 0xea0 <Pwm_Stop+0x42>
     e6c:	0f c0       	rjmp	.+30     	; 0xe8c <Pwm_Stop+0x2e>
{
  case PWM_CH0:
  TCCR0 &=TIMER_STOPT02;
     e6e:	84 b5       	in	r24, 0x24	; 36
     e70:	95 b5       	in	r25, 0x25	; 37
     e72:	88 7f       	andi	r24, 0xF8	; 248
     e74:	90 70       	andi	r25, 0x00	; 0
     e76:	95 bd       	out	0x25, r25	; 37
     e78:	84 bd       	out	0x24, r24	; 36
  Ret=E_OK;
     e7a:	80 e0       	ldi	r24, 0x00	; 0
  break;
     e7c:	08 95       	ret

  case PWM_CH1A:
  case PWM_CH1B:
  TCCR0 &=TIMER_STOPT1;
     e7e:	84 b5       	in	r24, 0x24	; 36
     e80:	95 b5       	in	r25, 0x25	; 37
     e82:	98 7f       	andi	r25, 0xF8	; 248
     e84:	95 bd       	out	0x25, r25	; 37
     e86:	84 bd       	out	0x24, r24	; 36
  Ret=E_OK;
     e88:	80 e0       	ldi	r24, 0x00	; 0
  break;
     e8a:	08 95       	ret


  case PWM_CH2:
  TCCR2 &=TIMER_STOPT02;
     e8c:	e0 eb       	ldi	r30, 0xB0	; 176
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	88 7f       	andi	r24, 0xF8	; 248
     e96:	90 70       	andi	r25, 0x00	; 0
     e98:	91 83       	std	Z+1, r25	; 0x01
     e9a:	80 83       	st	Z, r24
  Ret=E_OK;
     e9c:	80 e0       	ldi	r24, 0x00	; 0
  break;
     e9e:	08 95       	ret
  default:
  Ret=E_NOK;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
  break;
}

return Ret;
}
     ea2:	08 95       	ret

00000ea4 <timer0Set>:
}

}
void timer0Set(uint8_t u8_value)
{
TCNT0 =	u8_value;
     ea4:	86 bd       	out	0x26, r24	; 38
}
     ea6:	08 95       	ret

00000ea8 <timer0Read>:

uint8_t timer0Read(void)
{
	 return TCNT0;
     ea8:	86 b5       	in	r24, 0x26	; 38
}
     eaa:	08 95       	ret

00000eac <timer0Start>:
Depending on prescaler	x     X    X

*/
void timer0Start(void)
{
	 TCCR0 &= (0xF8);
     eac:	84 b5       	in	r24, 0x24	; 36
     eae:	95 b5       	in	r25, 0x25	; 37
     eb0:	88 7f       	andi	r24, 0xF8	; 248
     eb2:	90 70       	andi	r25, 0x00	; 0
     eb4:	95 bd       	out	0x25, r25	; 37
     eb6:	84 bd       	out	0x24, r24	; 36
	 TCCR0 |= Prescaler_Value;
     eb8:	24 b5       	in	r18, 0x24	; 36
     eba:	35 b5       	in	r19, 0x25	; 37
     ebc:	80 91 46 01 	lds	r24, 0x0146
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	82 2b       	or	r24, r18
     ec4:	93 2b       	or	r25, r19
     ec6:	95 bd       	out	0x25, r25	; 37
     ec8:	84 bd       	out	0x24, r24	; 36
}
     eca:	08 95       	ret

00000ecc <timer0Stop>:
						      0     0    0
*/
void timer0Stop(void)
 {

TCCR0 &= (0xF8);
     ecc:	84 b5       	in	r24, 0x24	; 36
     ece:	95 b5       	in	r25, 0x25	; 37
     ed0:	88 7f       	andi	r24, 0xF8	; 248
     ed2:	90 70       	andi	r25, 0x00	; 0
     ed4:	95 bd       	out	0x25, r25	; 37
     ed6:	84 bd       	out	0x24, r24	; 36

 }
     ed8:	08 95       	ret

00000eda <timer0Init>:
uint8_t Prescaler_Value2=0;
uint8_t u8g_T1_Prescaler=0;
volatile uint8_t pwm_time_on=0,flag=0;
volatile uint8_t timer2_interrupt_raised = 0;
void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal,uint8_t u8_initialValue, uint8_t u8_outputCompare,En_timer0Interrupt_t en_interruptMask)
{
     eda:	ef 92       	push	r14
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
if(en_prescal == T0_NO_CLOCK)
     ee0:	44 23       	and	r20, r20
     ee2:	19 f4       	brne	.+6      	; 0xeea <timer0Init+0x10>
{/*
if there is no clock the timer will be disabled
*/
timer0Stop();
     ee4:	0e 94 66 07 	call	0xecc	; 0xecc <timer0Stop>
     ee8:	5d c0       	rjmp	.+186    	; 0xfa4 <timer0Init+0xca>
}
else
{
TCCR0 |= en_mode|en_prescal;
     eea:	e4 b5       	in	r30, 0x24	; 36
     eec:	f5 b5       	in	r31, 0x25	; 37
     eee:	84 2b       	or	r24, r20
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	8e 2b       	or	r24, r30
     ef4:	9f 2b       	or	r25, r31
     ef6:	95 bd       	out	0x25, r25	; 37
     ef8:	84 bd       	out	0x24, r24	; 36
Prescaler_Value=en_prescal;
     efa:	40 93 46 01 	sts	0x0146, r20
TCNT0 = u8_initialValue;
     efe:	26 bd       	out	0x26, r18	; 38
switch(en_OC0){
     f00:	60 31       	cpi	r22, 0x10	; 16
     f02:	89 f0       	breq	.+34     	; 0xf26 <timer0Init+0x4c>
     f04:	61 31       	cpi	r22, 0x11	; 17
     f06:	18 f4       	brcc	.+6      	; 0xf0e <timer0Init+0x34>
     f08:	66 23       	and	r22, r22
     f0a:	31 f0       	breq	.+12     	; 0xf18 <timer0Init+0x3e>
     f0c:	1d c0       	rjmp	.+58     	; 0xf48 <timer0Init+0x6e>
     f0e:	60 32       	cpi	r22, 0x20	; 32
     f10:	81 f0       	breq	.+32     	; 0xf32 <timer0Init+0x58>
     f12:	60 33       	cpi	r22, 0x30	; 48
     f14:	c9 f4       	brne	.+50     	; 0xf48 <timer0Init+0x6e>
     f16:	13 c0       	rjmp	.+38     	; 0xf3e <timer0Init+0x64>
	case  T0_OC0_DIS:
	{
	TCCR0 &= 0xCF;
     f18:	84 b5       	in	r24, 0x24	; 36
     f1a:	95 b5       	in	r25, 0x25	; 37
     f1c:	8f 7c       	andi	r24, 0xCF	; 207
     f1e:	90 70       	andi	r25, 0x00	; 0
     f20:	95 bd       	out	0x25, r25	; 37
     f22:	84 bd       	out	0x24, r24	; 36
		break;
     f24:	11 c0       	rjmp	.+34     	; 0xf48 <timer0Init+0x6e>
	}
	case T0_OC0_TOGGLE:
	{
		TCCR0|=T0_OC0_TOGGLE;
     f26:	84 b5       	in	r24, 0x24	; 36
     f28:	95 b5       	in	r25, 0x25	; 37
     f2a:	80 61       	ori	r24, 0x10	; 16
     f2c:	95 bd       	out	0x25, r25	; 37
     f2e:	84 bd       	out	0x24, r24	; 36
		break;
     f30:	0b c0       	rjmp	.+22     	; 0xf48 <timer0Init+0x6e>
	}
	case  T0_OC0_CLEAR:
	{
	TCCR0 |= T0_OC0_CLEAR;
     f32:	84 b5       	in	r24, 0x24	; 36
     f34:	95 b5       	in	r25, 0x25	; 37
     f36:	80 62       	ori	r24, 0x20	; 32
     f38:	95 bd       	out	0x25, r25	; 37
     f3a:	84 bd       	out	0x24, r24	; 36

		break;
     f3c:	05 c0       	rjmp	.+10     	; 0xf48 <timer0Init+0x6e>
	}
	case T0_OC0_SET:
	{
		TCCR0 |=T0_OC0_SET;
     f3e:	84 b5       	in	r24, 0x24	; 36
     f40:	95 b5       	in	r25, 0x25	; 37
     f42:	80 63       	ori	r24, 0x30	; 48
     f44:	95 bd       	out	0x25, r25	; 37
     f46:	84 bd       	out	0x24, r24	; 36
		break;
	}

}
OCR0  =u8_outputCompare;
     f48:	10 e0       	ldi	r17, 0x00	; 0
     f4a:	18 bd       	out	0x28, r17	; 40
     f4c:	07 bd       	out	0x27, r16	; 39
switch(en_interruptMask){
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	e8 16       	cp	r14, r24
     f52:	79 f0       	breq	.+30     	; 0xf72 <timer0Init+0x98>
     f54:	e8 16       	cp	r14, r24
     f56:	20 f0       	brcs	.+8      	; 0xf60 <timer0Init+0x86>
     f58:	82 e0       	ldi	r24, 0x02	; 2
     f5a:	e8 16       	cp	r14, r24
     f5c:	19 f5       	brne	.+70     	; 0xfa4 <timer0Init+0xca>
     f5e:	14 c0       	rjmp	.+40     	; 0xf88 <timer0Init+0xae>
case  T0_POLLING:{
pooling=0;
     f60:	10 92 45 01 	sts	0x0145, r1
G_interrupt_Disable();
     f64:	0e 94 5f 02 	call	0x4be	; 0x4be <G_interrupt_Disable>
TIMSK0 &= T0_POLLING;
     f68:	ee e6       	ldi	r30, 0x6E	; 110
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	10 82       	st	Z, r1
break;
     f70:	19 c0       	rjmp	.+50     	; 0xfa4 <timer0Init+0xca>
}
case T0_INTERRUPT_NORMAL :
{pooling=1;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	80 93 45 01 	sts	0x0145, r24
G_interrupt_Enable();
     f78:	0e 94 44 02 	call	0x488	; 0x488 <G_interrupt_Enable>
TIMSK0 |= T0_INTERRUPT_NORMAL;
     f7c:	ee e6       	ldi	r30, 0x6E	; 110
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	81 60       	ori	r24, 0x01	; 1
     f84:	80 83       	st	Z, r24
break;
     f86:	0e c0       	rjmp	.+28     	; 0xfa4 <timer0Init+0xca>
}
case T0_INTERRUPT_CMP:
{pooling=1;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	80 93 45 01 	sts	0x0145, r24
//G_interrupt_Enable();
SET_BIT(SREG,7);
     f8e:	8f b7       	in	r24, 0x3f	; 63
     f90:	80 68       	ori	r24, 0x80	; 128
     f92:	8f bf       	out	0x3f, r24	; 63
TIMSK0 |= T0_INTERRUPT_NORMAL;
     f94:	ee e6       	ldi	r30, 0x6E	; 110
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	81 60       	ori	r24, 0x01	; 1
     f9c:	80 83       	st	Z, r24
TIMSK0 |=T0_INTERRUPT_CMP;
     f9e:	80 81       	ld	r24, Z
     fa0:	82 60       	ori	r24, 0x02	; 2
     fa2:	80 83       	st	Z, r24
}
}

}

}
     fa4:	1f 91       	pop	r17
     fa6:	0f 91       	pop	r16
     fa8:	ef 90       	pop	r14
     faa:	08 95       	ret

00000fac <timer0DelayMs>:
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
     fac:	ac 01       	movw	r20, r24
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	41 15       	cp	r20, r1
     fb4:	51 05       	cpc	r21, r1
     fb6:	61 05       	cpc	r22, r1
     fb8:	71 05       	cpc	r23, r1
     fba:	71 f0       	breq	.+28     	; 0xfd8 <timer0DelayMs+0x2c>
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	dc 01       	movw	r26, r24
{
	while ((TIFR0&0x01)==0);
     fc2:	a8 9b       	sbis	0x15, 0	; 21
     fc4:	fe cf       	rjmp	.-4      	; 0xfc2 <timer0DelayMs+0x16>
	TIFR0 |=0x01;
     fc6:	a8 9a       	sbi	0x15, 0	; 21
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	a1 1d       	adc	r26, r1
     fcc:	b1 1d       	adc	r27, r1
     fce:	84 17       	cp	r24, r20
     fd0:	95 07       	cpc	r25, r21
     fd2:	a6 07       	cpc	r26, r22
     fd4:	b7 07       	cpc	r27, r23
     fd6:	a8 f3       	brcs	.-22     	; 0xfc2 <timer0DelayMs+0x16>
     fd8:	08 95       	ret

00000fda <timer0DelayUs>:
 at pooling _no prescaling
 240at TCNT0

 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	a1 05       	cpc	r26, r1
     fe2:	b1 05       	cpc	r27, r1
     fe4:	31 f0       	breq	.+12     	; 0xff2 <timer0DelayUs+0x18>
	{
	timer0Set(240);
     fe6:	80 ef       	ldi	r24, 0xF0	; 240
     fe8:	0e 94 52 07 	call	0xea4	; 0xea4 <timer0Set>
	while(timer0Read()<=255);
     fec:	0e 94 54 07 	call	0xea8	; 0xea8 <timer0Read>
     ff0:	fd cf       	rjmp	.-6      	; 0xfec <timer0DelayUs+0x12>
	//while(u32_ovf_counter <= (8*u32_delay_in_us/1000));
	}
	TIFR0 |=(1<<TOV0);/*Clear the flag*/
     ff2:	a8 9a       	sbi	0x15, 0	; 21
}/*1*/
     ff4:	08 95       	ret

00000ff6 <timer0SwPWM>:
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
     ff6:	cf 92       	push	r12
     ff8:	df 92       	push	r13
     ffa:	ef 92       	push	r14
     ffc:	ff 92       	push	r15
     ffe:	cf 93       	push	r28
    1000:	c8 2f       	mov	r28, r24
float dutyReal;
pwm_time_on=MAX_HOLD;
    1002:	8f ef       	ldi	r24, 0xFF	; 255
    1004:	80 93 41 01 	sts	0x0141, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
    1008:	60 91 41 01 	lds	r22, 0x0141
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__floatunsisf>
    1016:	6b 01       	movw	r12, r22
    1018:	7c 01       	movw	r14, r24
}/*1*/
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
    101a:	6c 2f       	mov	r22, r28
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__floatunsisf>
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	48 ec       	ldi	r20, 0xC8	; 200
    102c:	52 e4       	ldi	r21, 0x42	; 66
    102e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__divsf3>
    1032:	9b 01       	movw	r18, r22
    1034:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
    1036:	c7 01       	movw	r24, r14
    1038:	b6 01       	movw	r22, r12
    103a:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__mulsf3>
    103e:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__fixunssfsi>
    1042:	60 93 41 01 	sts	0x0141, r22
switch(pooling)
    1046:	80 91 45 01 	lds	r24, 0x0145
    104a:	88 23       	and	r24, r24
    104c:	19 f0       	breq	.+6      	; 0x1054 <timer0SwPWM+0x5e>
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	09 f5       	brne	.+66     	; 0x1094 <timer0SwPWM+0x9e>
    1052:	19 c0       	rjmp	.+50     	; 0x1086 <timer0SwPWM+0x90>
{
	case 0:
	{
	timer0Start();
    1054:	0e 94 56 07 	call	0xeac	; 0xeac <timer0Start>
	timer0Set(pwm_time_on);
    1058:	80 91 41 01 	lds	r24, 0x0141
    105c:	0e 94 52 07 	call	0xea4	; 0xea4 <timer0Set>
	//freq 50KHZ is the Max frequency possible
	while ((TIFR0 &0x01)==0);
    1060:	a8 9b       	sbis	0x15, 0	; 21
    1062:	fe cf       	rjmp	.-4      	; 0x1060 <timer0SwPWM+0x6a>
	TIFR0 |=0x01;
    1064:	a8 9a       	sbi	0x15, 0	; 21
	PORTC_DATA |=0xff;
    1066:	88 b1       	in	r24, 0x08	; 8
    1068:	8f ef       	ldi	r24, 0xFF	; 255
    106a:	88 b9       	out	0x08, r24	; 8
	timer0Start();
    106c:	0e 94 56 07 	call	0xeac	; 0xeac <timer0Start>
	timer0Set(MAX_HOLD-pwm_time_on);
    1070:	80 91 41 01 	lds	r24, 0x0141
    1074:	80 95       	com	r24
    1076:	0e 94 52 07 	call	0xea4	; 0xea4 <timer0Set>
	//freq
	while ((TIFR0 & 0x01)==0);
    107a:	a8 9b       	sbis	0x15, 0	; 21
    107c:	fe cf       	rjmp	.-4      	; 0x107a <timer0SwPWM+0x84>
	TIFR0 |=0x01;
    107e:	a8 9a       	sbi	0x15, 0	; 21
	PORTC_DATA &=0x00;
    1080:	88 b1       	in	r24, 0x08	; 8
    1082:	18 b8       	out	0x08, r1	; 8

break;
    1084:	07 c0       	rjmp	.+14     	; 0x1094 <timer0SwPWM+0x9e>
}
case 1:
{
timer0Start();
    1086:	0e 94 56 07 	call	0xeac	; 0xeac <timer0Start>
OCR0=pwm_time_on;
    108a:	80 91 41 01 	lds	r24, 0x0141
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	98 bd       	out	0x28, r25	; 40
    1092:	87 bd       	out	0x27, r24	; 39
break;
}

}

}
    1094:	cf 91       	pop	r28
    1096:	ff 90       	pop	r15
    1098:	ef 90       	pop	r14
    109a:	df 90       	pop	r13
    109c:	cf 90       	pop	r12
    109e:	08 95       	ret

000010a0 <Timer_interrupt_COMP_routine>:



void Timer_interrupt_COMP_routine(void)
{
	PORTD_DATA ^=0xff;
    10a0:	8b b1       	in	r24, 0x0b	; 11
    10a2:	80 95       	com	r24
    10a4:	8b b9       	out	0x0b, r24	; 11

}
    10a6:	08 95       	ret

000010a8 <timer1Set>:
	}

*/
void timer1Set(uint16_t u16_value)
{
TCNT1=u16_value;
    10a8:	90 93 85 00 	sts	0x0085, r25
    10ac:	80 93 84 00 	sts	0x0084, r24
}
    10b0:	08 95       	ret

000010b2 <timer1Read>:
 * Description:
 * @return TCNT1
 */
uint16_t timer1Read(void)
{
return TCNT1;
    10b2:	80 91 84 00 	lds	r24, 0x0084
    10b6:	90 91 85 00 	lds	r25, 0x0085
}
    10ba:	08 95       	ret

000010bc <timer1Start>:
 * Description:
 * @param
 */
void timer1Start(void)
{
TCCR1B |=u8g_T1_Prescaler;
    10bc:	e1 e8       	ldi	r30, 0x81	; 129
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	90 81       	ld	r25, Z
    10c2:	80 91 42 01 	lds	r24, 0x0142
    10c6:	89 2b       	or	r24, r25
    10c8:	80 83       	st	Z, r24
}
    10ca:	08 95       	ret

000010cc <timer1Stop>:
 * Description:
 * @param
 */
void timer1Stop(void)
{
TCCR1B &=0xfff8;
    10cc:	e1 e8       	ldi	r30, 0x81	; 129
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	88 7f       	andi	r24, 0xF8	; 248
    10d4:	80 83       	st	Z, r24
/*Keep all sittings as it is and put zeros in cs10,cs11,cs12*/
}
    10d6:	08 95       	ret

000010d8 <timer1DelayMs>:
 */
void timer1DelayMs(uint16_t u16_delay_in_ms)
{


}
    10d8:	08 95       	ret

000010da <timer1DelayUs>:
 */
void timer1DelayUs(uint32_t u32_delay_in_us)
{


}
    10da:	08 95       	ret

000010dc <timer1SwPWM>:
 */
void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{


}
    10dc:	08 95       	ret

000010de <timer2Set>:
* Description:
* @param value
*/
void timer2Set(uint8_t u8_a_value)
{
TCNT2=u8_a_value;
    10de:	80 93 b2 00 	sts	0x00B2, r24
}
    10e2:	08 95       	ret

000010e4 <timer2Read>:
/**
* Description:
* @return
*/
uint8_t timer2Read(void){
return TCNT2;
    10e4:	80 91 b2 00 	lds	r24, 0x00B2
}
    10e8:	08 95       	ret

000010ea <timer2Start>:
/**
* Description:
*/
void timer2Start(void)
{
TCCR2B &= 0xf8;
    10ea:	e1 eb       	ldi	r30, 0xB1	; 177
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	88 7f       	andi	r24, 0xF8	; 248
    10f2:	80 83       	st	Z, r24
TCCR2B |= Prescaler_Value2;
    10f4:	90 81       	ld	r25, Z
    10f6:	80 91 43 01 	lds	r24, 0x0143
    10fa:	89 2b       	or	r24, r25
    10fc:	80 83       	st	Z, r24
}
    10fe:	08 95       	ret

00001100 <timer2Stop>:
/**
* Description:
*/
void timer2Stop(void)
{
TCCR2B &= 0xf8;
    1100:	e1 eb       	ldi	r30, 0xB1	; 177
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	88 7f       	andi	r24, 0xF8	; 248
    1108:	80 83       	st	Z, r24

}
    110a:	08 95       	ret

0000110c <timer2Init>:


}

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC,En_timer2perscaler_t en_prescal2, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
    110c:	cf 92       	push	r12
    110e:	0f 93       	push	r16
    1110:	1f 93       	push	r17
if(en_prescal2 == T2_NO_CLOCK)
    1112:	44 23       	and	r20, r20
    1114:	19 f4       	brne	.+6      	; 0x111c <timer2Init+0x10>
{/*
if there is no clock the timer will be disabled
*/
timer2Stop();
    1116:	0e 94 80 08 	call	0x1100	; 0x1100 <timer2Stop>
    111a:	5e c0       	rjmp	.+188    	; 0x11d8 <timer2Init+0xcc>
}
else
{
TCCR2A |= en_mode;
    111c:	e0 eb       	ldi	r30, 0xB0	; 176
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	90 81       	ld	r25, Z
    1122:	89 2b       	or	r24, r25
    1124:	80 83       	st	Z, r24
TCCR2B |= en_prescal2 ;
    1126:	e1 eb       	ldi	r30, 0xB1	; 177
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	84 2b       	or	r24, r20
    112e:	80 83       	st	Z, r24

Prescaler_Value2=en_prescal2;
    1130:	40 93 43 01 	sts	0x0143, r20
TCNT2 = u8_initialValue;
    1134:	20 93 b2 00 	sts	0x00B2, r18
switch(en_OC){
    1138:	60 34       	cpi	r22, 0x40	; 64
    113a:	81 f0       	breq	.+32     	; 0x115c <timer2Init+0x50>
    113c:	61 34       	cpi	r22, 0x41	; 65
    113e:	18 f4       	brcc	.+6      	; 0x1146 <timer2Init+0x3a>
    1140:	66 23       	and	r22, r22
    1142:	31 f0       	breq	.+12     	; 0x1150 <timer2Init+0x44>
    1144:	1c c0       	rjmp	.+56     	; 0x117e <timer2Init+0x72>
    1146:	60 38       	cpi	r22, 0x80	; 128
    1148:	79 f0       	breq	.+30     	; 0x1168 <timer2Init+0x5c>
    114a:	60 3a       	cpi	r22, 0xA0	; 160
    114c:	c1 f4       	brne	.+48     	; 0x117e <timer2Init+0x72>
    114e:	12 c0       	rjmp	.+36     	; 0x1174 <timer2Init+0x68>
	case  T2_OC2A_DIS:
	{
	TCCR2B &= 0xFC;
    1150:	e1 eb       	ldi	r30, 0xB1	; 177
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	8c 7f       	andi	r24, 0xFC	; 252
    1158:	80 83       	st	Z, r24
		break;
    115a:	11 c0       	rjmp	.+34     	; 0x117e <timer2Init+0x72>
	}
	case T2_OC2A_TOGGLE:
	{
		TCCR2A |=T2_OC2A_TOGGLE;
    115c:	e0 eb       	ldi	r30, 0xB0	; 176
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	80 64       	ori	r24, 0x40	; 64
    1164:	80 83       	st	Z, r24
		break;
    1166:	0b c0       	rjmp	.+22     	; 0x117e <timer2Init+0x72>
	}
	case  T2_OC2A_CLEAR:
	{
	TCCR2A |= T2_OC2A_CLEAR;
    1168:	e0 eb       	ldi	r30, 0xB0	; 176
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	80 68       	ori	r24, 0x80	; 128
    1170:	80 83       	st	Z, r24

		break;
    1172:	05 c0       	rjmp	.+10     	; 0x117e <timer2Init+0x72>
	}
	case T2_OC2A_SET:
	{
		TCCR2A |=T2_OC2A_SET;
    1174:	e0 eb       	ldi	r30, 0xB0	; 176
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	80 6a       	ori	r24, 0xA0	; 160
    117c:	80 83       	st	Z, r24
		break;
	}

}
OCR2  = u8_outputCompare;
    117e:	10 e0       	ldi	r17, 0x00	; 0
    1180:	10 93 b4 00 	sts	0x00B4, r17
    1184:	00 93 b3 00 	sts	0x00B3, r16
switch(en_interruptMask){
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	c8 16       	cp	r12, r24
    118c:	69 f0       	breq	.+26     	; 0x11a8 <timer2Init+0x9c>
    118e:	c8 16       	cp	r12, r24
    1190:	20 f0       	brcs	.+8      	; 0x119a <timer2Init+0x8e>
    1192:	83 e0       	ldi	r24, 0x03	; 3
    1194:	c8 16       	cp	r12, r24
    1196:	01 f5       	brne	.+64     	; 0x11d8 <timer2Init+0xcc>
    1198:	12 c0       	rjmp	.+36     	; 0x11be <timer2Init+0xb2>
case  T2_POLLING:
pooling_2=0;
    119a:	10 92 44 01 	sts	0x0144, r1
TIMSK2 &= T2_POLLING;
    119e:	e0 e7       	ldi	r30, 0x70	; 112
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	10 82       	st	Z, r1
break;
    11a6:	18 c0       	rjmp	.+48     	; 0x11d8 <timer2Init+0xcc>
case T2_INTERRUPT_NORMAL :
{
	pooling_2=1;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	80 93 44 01 	sts	0x0144, r24
G_interrupt_Enable();
    11ae:	0e 94 44 02 	call	0x488	; 0x488 <G_interrupt_Enable>
TIMSK2 |= T2_INTERRUPT_NORMAL;
    11b2:	e0 e7       	ldi	r30, 0x70	; 112
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	81 60       	ori	r24, 0x01	; 1
    11ba:	80 83       	st	Z, r24

break;
    11bc:	0d c0       	rjmp	.+26     	; 0x11d8 <timer2Init+0xcc>
}
case T2_INTERRUPT_CMP:
{
	pooling_2=1;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	80 93 44 01 	sts	0x0144, r24
G_interrupt_Enable();
    11c4:	0e 94 44 02 	call	0x488	; 0x488 <G_interrupt_Enable>
//SET_BIT(SREG,7);
TIMSK2 |=T2_INTERRUPT_NORMAL;
    11c8:	e0 e7       	ldi	r30, 0x70	; 112
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	81 60       	ori	r24, 0x01	; 1
    11d0:	80 83       	st	Z, r24
TIMSK2 |=T2_INTERRUPT_CMP;
    11d2:	80 81       	ld	r24, Z
    11d4:	83 60       	ori	r24, 0x03	; 3
    11d6:	80 83       	st	Z, r24

}



}
    11d8:	1f 91       	pop	r17
    11da:	0f 91       	pop	r16
    11dc:	cf 90       	pop	r12
    11de:	08 95       	ret

000011e0 <timer2DelayMs>:
		Prescalercounst=1;
		break;

		}*/
void timer2DelayMs(uint16_t u16_delay_in_ms)
{
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <timer2DelayMs+0xa>
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <timer2DelayMs+0xc>
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	8c 01       	movw	r16, r24
	volatile uint16_t count=0;
    11f2:	1a 82       	std	Y+2, r1	; 0x02
    11f4:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t Prescalercounst=0,set_timer2=0;
    11f6:	1b 82       	std	Y+3, r1	; 0x03
    11f8:	1c 82       	std	Y+4, r1	; 0x04
	switch(Prescaler_Value2)
    11fa:	80 91 43 01 	lds	r24, 0x0143
    11fe:	84 30       	cpi	r24, 0x04	; 4
    1200:	f9 f0       	breq	.+62     	; 0x1240 <timer2DelayMs+0x60>
    1202:	85 30       	cpi	r24, 0x05	; 5
    1204:	38 f4       	brcc	.+14     	; 0x1214 <timer2DelayMs+0x34>
    1206:	82 30       	cpi	r24, 0x02	; 2
    1208:	89 f0       	breq	.+34     	; 0x122c <timer2DelayMs+0x4c>
    120a:	83 30       	cpi	r24, 0x03	; 3
    120c:	a0 f4       	brcc	.+40     	; 0x1236 <timer2DelayMs+0x56>
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	51 f5       	brne	.+84     	; 0x1266 <timer2DelayMs+0x86>
    1212:	07 c0       	rjmp	.+14     	; 0x1222 <timer2DelayMs+0x42>
    1214:	86 30       	cpi	r24, 0x06	; 6
    1216:	f1 f0       	breq	.+60     	; 0x1254 <timer2DelayMs+0x74>
    1218:	86 30       	cpi	r24, 0x06	; 6
    121a:	b8 f0       	brcs	.+46     	; 0x124a <timer2DelayMs+0x6a>
    121c:	87 30       	cpi	r24, 0x07	; 7
    121e:	19 f5       	brne	.+70     	; 0x1266 <timer2DelayMs+0x86>
    1220:	1e c0       	rjmp	.+60     	; 0x125e <timer2DelayMs+0x7e>
	{
		case T2_PRESCALER_NO:{
		Prescalercounst=58;
    1222:	8a e3       	ldi	r24, 0x3A	; 58
    1224:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=10;
    1226:	8a e0       	ldi	r24, 0x0A	; 10
    1228:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    122a:	1d c0       	rjmp	.+58     	; 0x1266 <timer2DelayMs+0x86>
		case T2_PRESCALER_8:
		{Prescalercounst=8;
    122c:	88 e0       	ldi	r24, 0x08	; 8
    122e:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=12;
    1230:	8c e0       	ldi	r24, 0x0C	; 12
    1232:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    1234:	18 c0       	rjmp	.+48     	; 0x1266 <timer2DelayMs+0x86>
		case T2_PRESCALER_32:
		{Prescalercounst=2;
    1236:	82 e0       	ldi	r24, 0x02	; 2
    1238:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=8;
    123a:	88 e0       	ldi	r24, 0x08	; 8
    123c:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    123e:	13 c0       	rjmp	.+38     	; 0x1266 <timer2DelayMs+0x86>
		case T2_PRESCALER_64:
		{Prescalercounst=1;
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=6;
    1244:	86 e0       	ldi	r24, 0x06	; 6
    1246:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    1248:	0e c0       	rjmp	.+28     	; 0x1266 <timer2DelayMs+0x86>
		case T2_PRESCALER_128:
		{Prescalercounst=1;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=131;
    124e:	83 e8       	ldi	r24, 0x83	; 131
    1250:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    1252:	09 c0       	rjmp	.+18     	; 0x1266 <timer2DelayMs+0x86>
		case T2_PRESCALER_256:
		{Prescalercounst=1;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=194;
    1258:	82 ec       	ldi	r24, 0xC2	; 194
    125a:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    125c:	04 c0       	rjmp	.+8      	; 0x1266 <timer2DelayMs+0x86>
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=240;
    1262:	80 ef       	ldi	r24, 0xF0	; 240
    1264:	8c 83       	std	Y+4, r24	; 0x04
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
    1266:	1a 82       	std	Y+2, r1	; 0x02
    1268:	19 82       	std	Y+1, r1	; 0x01
    126a:	2b 81       	ldd	r18, Y+3	; 0x03
    126c:	49 81       	ldd	r20, Y+1	; 0x01
    126e:	5a 81       	ldd	r21, Y+2	; 0x02
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	02 9f       	mul	r16, r18
    1274:	c0 01       	movw	r24, r0
    1276:	03 9f       	mul	r16, r19
    1278:	90 0d       	add	r25, r0
    127a:	12 9f       	mul	r17, r18
    127c:	90 0d       	add	r25, r0
    127e:	11 24       	eor	r1, r1
    1280:	48 17       	cp	r20, r24
    1282:	59 07       	cpc	r21, r25
    1284:	c8 f4       	brcc	.+50     	; 0x12b8 <timer2DelayMs+0xd8>
	{
		timer2Set(set_timer2);//10 for no prescaler....12 for 8 prescaler .... 8 for 32 prescaler ....6 for prescaler 64 .....
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
    1288:	0e 94 6f 08 	call	0x10de	; 0x10de <timer2Set>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR2 & 0x01)==0);
    128c:	b8 9b       	sbis	0x17, 0	; 23
    128e:	fe cf       	rjmp	.-4      	; 0x128c <timer2DelayMs+0xac>
		TIFR2 |=0x01;
    1290:	b8 9a       	sbi	0x17, 0	; 23
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
		set_timer2=240;
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	9a 81       	ldd	r25, Y+2	; 0x02
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	9a 83       	std	Y+2, r25	; 0x02
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	2b 81       	ldd	r18, Y+3	; 0x03
    129e:	49 81       	ldd	r20, Y+1	; 0x01
    12a0:	5a 81       	ldd	r21, Y+2	; 0x02
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	02 9f       	mul	r16, r18
    12a6:	c0 01       	movw	r24, r0
    12a8:	03 9f       	mul	r16, r19
    12aa:	90 0d       	add	r25, r0
    12ac:	12 9f       	mul	r17, r18
    12ae:	90 0d       	add	r25, r0
    12b0:	11 24       	eor	r1, r1
    12b2:	48 17       	cp	r20, r24
    12b4:	59 07       	cpc	r21, r25
    12b6:	38 f3       	brcs	.-50     	; 0x1286 <timer2DelayMs+0xa6>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR2 & 0x01)==0);
		TIFR2 |=0x01;

	}
}
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	08 95       	ret

000012ca <timer2DelayUs>:

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
    12ca:	cf 92       	push	r12
    12cc:	df 92       	push	r13
    12ce:	ef 92       	push	r14
    12d0:	ff 92       	push	r15
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <timer2DelayUs+0xe>
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	6b 01       	movw	r12, r22
    12de:	7c 01       	movw	r14, r24
	volatile uint16_t count =0;
    12e0:	1a 82       	std	Y+2, r1	; 0x02
    12e2:	19 82       	std	Y+1, r1	; 0x01
	for (count=0;count<u16_delay_in_us;count++)
    12e4:	1a 82       	std	Y+2, r1	; 0x02
    12e6:	19 82       	std	Y+1, r1	; 0x01
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	9a 81       	ldd	r25, Y+2	; 0x02
    12ec:	a0 e0       	ldi	r26, 0x00	; 0
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	8c 15       	cp	r24, r12
    12f2:	9d 05       	cpc	r25, r13
    12f4:	ae 05       	cpc	r26, r14
    12f6:	bf 05       	cpc	r27, r15
    12f8:	a0 f4       	brcc	.+40     	; 0x1322 <timer2DelayUs+0x58>
	{
		timer2Set(254);//254 for no prescaler
    12fa:	8e ef       	ldi	r24, 0xFE	; 254
    12fc:	0e 94 6f 08 	call	0x10de	; 0x10de <timer2Set>
		while ((TIFR2 & 0x01)==0);
    1300:	b8 9b       	sbis	0x17, 0	; 23
    1302:	fe cf       	rjmp	.-4      	; 0x1300 <timer2DelayUs+0x36>
		TIFR2 |=0x01;
    1304:	b8 9a       	sbi	0x17, 0	; 23

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
	volatile uint16_t count =0;
	for (count=0;count<u16_delay_in_us;count++)
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	9a 81       	ldd	r25, Y+2	; 0x02
    130a:	01 96       	adiw	r24, 0x01	; 1
    130c:	9a 83       	std	Y+2, r25	; 0x02
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	9a 81       	ldd	r25, Y+2	; 0x02
    1314:	a0 e0       	ldi	r26, 0x00	; 0
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	8c 15       	cp	r24, r12
    131a:	9d 05       	cpc	r25, r13
    131c:	ae 05       	cpc	r26, r14
    131e:	bf 05       	cpc	r27, r15
    1320:	60 f3       	brcs	.-40     	; 0x12fa <timer2DelayUs+0x30>
		while ((TIFR2 & 0x01)==0);
		TIFR2 |=0x01;

	}

}
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	ff 90       	pop	r15
    132c:	ef 90       	pop	r14
    132e:	df 90       	pop	r13
    1330:	cf 90       	pop	r12
    1332:	08 95       	ret

00001334 <timer2SwPWM>:
/**
* Description:
* @param dutyCycle
*/
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    1334:	cf 92       	push	r12
    1336:	df 92       	push	r13
    1338:	ef 92       	push	r14
    133a:	ff 92       	push	r15
    133c:	cf 93       	push	r28
    133e:	c8 2f       	mov	r28, r24

float dutyReal;
pwm_time_on=MAX_HOLD;
    1340:	8f ef       	ldi	r24, 0xFF	; 255
    1342:	80 93 41 01 	sts	0x0141, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
    1346:	60 91 41 01 	lds	r22, 0x0141
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__floatunsisf>
    1354:	6b 01       	movw	r12, r22
    1356:	7c 01       	movw	r14, r24
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{

float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
    1358:	6c 2f       	mov	r22, r28
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__floatunsisf>
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	48 ec       	ldi	r20, 0xC8	; 200
    136a:	52 e4       	ldi	r21, 0x42	; 66
    136c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__divsf3>
    1370:	9b 01       	movw	r18, r22
    1372:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
    1374:	c7 01       	movw	r24, r14
    1376:	b6 01       	movw	r22, r12
    1378:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__mulsf3>
    137c:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__fixunssfsi>
    1380:	60 93 41 01 	sts	0x0141, r22
switch(pooling_2)
    1384:	80 91 44 01 	lds	r24, 0x0144
    1388:	88 23       	and	r24, r24
    138a:	19 f0       	breq	.+6      	; 0x1392 <timer2SwPWM+0x5e>
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	19 f5       	brne	.+70     	; 0x13d6 <timer2SwPWM+0xa2>
    1390:	19 c0       	rjmp	.+50     	; 0x13c4 <timer2SwPWM+0x90>
{
	case 0:
	{
		timer2Start();
    1392:	0e 94 75 08 	call	0x10ea	; 0x10ea <timer2Start>
		timer2Set(pwm_time_on);
    1396:	80 91 41 01 	lds	r24, 0x0141
    139a:	0e 94 6f 08 	call	0x10de	; 0x10de <timer2Set>
		//freq 50KHZ is the Max frequency possible
		while ((TIFR2 & 0x01)==0);
    139e:	b8 9b       	sbis	0x17, 0	; 23
    13a0:	fe cf       	rjmp	.-4      	; 0x139e <timer2SwPWM+0x6a>
		TIFR2 |=0x01;
    13a2:	b8 9a       	sbi	0x17, 0	; 23
		PORTC_DATA |=0xff;
    13a4:	88 b1       	in	r24, 0x08	; 8
    13a6:	8f ef       	ldi	r24, 0xFF	; 255
    13a8:	88 b9       	out	0x08, r24	; 8
		timer2Start();
    13aa:	0e 94 75 08 	call	0x10ea	; 0x10ea <timer2Start>
		timer2Set(MAX_HOLD-pwm_time_on);
    13ae:	80 91 41 01 	lds	r24, 0x0141
    13b2:	80 95       	com	r24
    13b4:	0e 94 6f 08 	call	0x10de	; 0x10de <timer2Set>
		//freq
		while ((TIFR2 & 0x01)==0);
    13b8:	b8 9b       	sbis	0x17, 0	; 23
    13ba:	fe cf       	rjmp	.-4      	; 0x13b8 <timer2SwPWM+0x84>
		TIFR2 |=0x01;
    13bc:	b8 9a       	sbi	0x17, 0	; 23
		PORTC_DATA &=0x00;
    13be:	88 b1       	in	r24, 0x08	; 8
    13c0:	18 b8       	out	0x08, r1	; 8

		break;
    13c2:	09 c0       	rjmp	.+18     	; 0x13d6 <timer2SwPWM+0xa2>
	}
	case 1:
	{
		timer2Start();
    13c4:	0e 94 75 08 	call	0x10ea	; 0x10ea <timer2Start>
		OCR2=pwm_time_on;
    13c8:	80 91 41 01 	lds	r24, 0x0141
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	90 93 b4 00 	sts	0x00B4, r25
    13d2:	80 93 b3 00 	sts	0x00B3, r24
	}

}


}
    13d6:	cf 91       	pop	r28
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
    13dc:	df 90       	pop	r13
    13de:	cf 90       	pop	r12
    13e0:	08 95       	ret

000013e2 <Timer2_interrupt_COMP_routine>:
void Timer2_interrupt_COMP_routine(void)
{



}
    13e2:	08 95       	ret

000013e4 <Timer2_interrupt_routine>:
void Timer2_interrupt_routine(void)
{
timer2_interrupt_raised=1;
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	80 93 3f 01 	sts	0x013F, r24

}
    13ea:	08 95       	ret

000013ec <Us_Init>:
 *                                                                                                  *
 *                                                                                                  *
 ***************************************************************************************************/

ERROR_STATUS Us_Init(void)
{uint8_t Ret;
    13ec:	cf 92       	push	r12
    13ee:	ef 92       	push	r14
    13f0:	0f 93       	push	r16
    13f2:	cf 93       	push	r28
Ret=DIO_init(&US_Configuration);
    13f4:	8e e1       	ldi	r24, 0x1E	; 30
    13f6:	91 e0       	ldi	r25, 0x01	; 1
    13f8:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_init>
Ret=Icu_Init(&ICU_Configuration);
    13fc:	89 e0       	ldi	r24, 0x09	; 9
    13fe:	91 e0       	ldi	r25, 0x01	; 1
    1400:	0e 94 45 01 	call	0x28a	; 0x28a <Icu_Init>
    1404:	c8 2f       	mov	r28, r24
timer2Init(T2_NORMAL_MODE,T2_OC2B_CLEAR,T2_PRESCALER_1024,0,0,0,T2_INTERRUPT_NORMAL);
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	60 e2       	ldi	r22, 0x20	; 32
    140a:	47 e0       	ldi	r20, 0x07	; 7
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	00 e0       	ldi	r16, 0x00	; 0
    1410:	ee 24       	eor	r14, r14
    1412:	cc 24       	eor	r12, r12
    1414:	c3 94       	inc	r12
    1416:	0e 94 86 08 	call	0x110c	; 0x110c <timer2Init>
return Ret;
}
    141a:	8c 2f       	mov	r24, r28
    141c:	cf 91       	pop	r28
    141e:	0f 91       	pop	r16
    1420:	ef 90       	pop	r14
    1422:	cf 90       	pop	r12
    1424:	08 95       	ret

00001426 <Us_Trigger>:
ERROR_STATUS Us_Trigger(void)
{uint8_t Ret=0;
if(timer2_interrupt_raised){
    1426:	80 91 3f 01 	lds	r24, 0x013F
    142a:	88 23       	and	r24, r24
    142c:	99 f0       	breq	.+38     	; 0x1454 <Us_Trigger+0x2e>
timer2_interrupt_raised=0;
    142e:	10 92 3f 01 	sts	0x013F, r1
Ret=DIO_Toggle(GPIOC,BIT4);
    1432:	82 e0       	ldi	r24, 0x02	; 2
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	60 e1       	ldi	r22, 0x10	; 16
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    143e:	82 e3       	ldi	r24, 0x32	; 50
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	01 97       	sbiw	r24, 0x01	; 1
for (int i=0;i<50;i++)
    1444:	f1 f7       	brne	.-4      	; 0x1442 <Us_Trigger+0x1c>
{;
}
Ret=DIO_Toggle(GPIOC,BIT4);
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	60 e1       	ldi	r22, 0x10	; 16
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    1452:	08 95       	ret
Ret=Icu_Init(&ICU_Configuration);
timer2Init(T2_NORMAL_MODE,T2_OC2B_CLEAR,T2_PRESCALER_1024,0,0,0,T2_INTERRUPT_NORMAL);
return Ret;
}
ERROR_STATUS Us_Trigger(void)
{uint8_t Ret=0;
    1454:	80 e0       	ldi	r24, 0x00	; 0
{;
}
Ret=DIO_Toggle(GPIOC,BIT4);
}
return Ret;	
}
    1456:	08 95       	ret

00001458 <Us_GetDistance>:


ERROR_STATUS Us_GetDistance(uint16_t *Distance)
{uint8_t Ret=0;
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	00 d0       	rcall	.+0      	; 0x1462 <Us_GetDistance+0xa>
    1462:	00 d0       	rcall	.+0      	; 0x1464 <Us_GetDistance+0xc>
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	8c 01       	movw	r16, r24
	uint32_t u32l_Time;
	Ret=Icu_ReadTime(ICU_CH2,ICU_RISE_TO_FALL,&u32l_Time);
    146a:	82 e0       	ldi	r24, 0x02	; 2
    146c:	61 e0       	ldi	r22, 0x01	; 1
    146e:	ae 01       	movw	r20, r28
    1470:	4f 5f       	subi	r20, 0xFF	; 255
    1472:	5f 4f       	sbci	r21, 0xFF	; 255
    1474:	0e 94 74 01 	call	0x2e8	; 0x2e8 <Icu_ReadTime>
	*Distance=u32l_Time;
    1478:	29 81       	ldd	r18, Y+1	; 0x01
    147a:	3a 81       	ldd	r19, Y+2	; 0x02
    147c:	f8 01       	movw	r30, r16
    147e:	31 83       	std	Z+1, r19	; 0x01
    1480:	20 83       	st	Z, r18
	return Ret;
}
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	1f 91       	pop	r17
    1490:	0f 91       	pop	r16
    1492:	08 95       	ret

00001494 <__divsf3>:
    1494:	0c d0       	rcall	.+24     	; 0x14ae <__divsf3x>
    1496:	e6 c0       	rjmp	.+460    	; 0x1664 <__fp_round>
    1498:	de d0       	rcall	.+444    	; 0x1656 <__fp_pscB>
    149a:	40 f0       	brcs	.+16     	; 0x14ac <__divsf3+0x18>
    149c:	d5 d0       	rcall	.+426    	; 0x1648 <__fp_pscA>
    149e:	30 f0       	brcs	.+12     	; 0x14ac <__divsf3+0x18>
    14a0:	21 f4       	brne	.+8      	; 0x14aa <__divsf3+0x16>
    14a2:	5f 3f       	cpi	r21, 0xFF	; 255
    14a4:	19 f0       	breq	.+6      	; 0x14ac <__divsf3+0x18>
    14a6:	c7 c0       	rjmp	.+398    	; 0x1636 <__fp_inf>
    14a8:	51 11       	cpse	r21, r1
    14aa:	10 c1       	rjmp	.+544    	; 0x16cc <__fp_szero>
    14ac:	ca c0       	rjmp	.+404    	; 0x1642 <__fp_nan>

000014ae <__divsf3x>:
    14ae:	eb d0       	rcall	.+470    	; 0x1686 <__fp_split3>
    14b0:	98 f3       	brcs	.-26     	; 0x1498 <__divsf3+0x4>

000014b2 <__divsf3_pse>:
    14b2:	99 23       	and	r25, r25
    14b4:	c9 f3       	breq	.-14     	; 0x14a8 <__divsf3+0x14>
    14b6:	55 23       	and	r21, r21
    14b8:	b1 f3       	breq	.-20     	; 0x14a6 <__divsf3+0x12>
    14ba:	95 1b       	sub	r25, r21
    14bc:	55 0b       	sbc	r21, r21
    14be:	bb 27       	eor	r27, r27
    14c0:	aa 27       	eor	r26, r26
    14c2:	62 17       	cp	r22, r18
    14c4:	73 07       	cpc	r23, r19
    14c6:	84 07       	cpc	r24, r20
    14c8:	38 f0       	brcs	.+14     	; 0x14d8 <__divsf3_pse+0x26>
    14ca:	9f 5f       	subi	r25, 0xFF	; 255
    14cc:	5f 4f       	sbci	r21, 0xFF	; 255
    14ce:	22 0f       	add	r18, r18
    14d0:	33 1f       	adc	r19, r19
    14d2:	44 1f       	adc	r20, r20
    14d4:	aa 1f       	adc	r26, r26
    14d6:	a9 f3       	breq	.-22     	; 0x14c2 <__divsf3_pse+0x10>
    14d8:	33 d0       	rcall	.+102    	; 0x1540 <__divsf3_pse+0x8e>
    14da:	0e 2e       	mov	r0, r30
    14dc:	3a f0       	brmi	.+14     	; 0x14ec <__divsf3_pse+0x3a>
    14de:	e0 e8       	ldi	r30, 0x80	; 128
    14e0:	30 d0       	rcall	.+96     	; 0x1542 <__divsf3_pse+0x90>
    14e2:	91 50       	subi	r25, 0x01	; 1
    14e4:	50 40       	sbci	r21, 0x00	; 0
    14e6:	e6 95       	lsr	r30
    14e8:	00 1c       	adc	r0, r0
    14ea:	ca f7       	brpl	.-14     	; 0x14de <__divsf3_pse+0x2c>
    14ec:	29 d0       	rcall	.+82     	; 0x1540 <__divsf3_pse+0x8e>
    14ee:	fe 2f       	mov	r31, r30
    14f0:	27 d0       	rcall	.+78     	; 0x1540 <__divsf3_pse+0x8e>
    14f2:	66 0f       	add	r22, r22
    14f4:	77 1f       	adc	r23, r23
    14f6:	88 1f       	adc	r24, r24
    14f8:	bb 1f       	adc	r27, r27
    14fa:	26 17       	cp	r18, r22
    14fc:	37 07       	cpc	r19, r23
    14fe:	48 07       	cpc	r20, r24
    1500:	ab 07       	cpc	r26, r27
    1502:	b0 e8       	ldi	r27, 0x80	; 128
    1504:	09 f0       	breq	.+2      	; 0x1508 <__divsf3_pse+0x56>
    1506:	bb 0b       	sbc	r27, r27
    1508:	80 2d       	mov	r24, r0
    150a:	bf 01       	movw	r22, r30
    150c:	ff 27       	eor	r31, r31
    150e:	93 58       	subi	r25, 0x83	; 131
    1510:	5f 4f       	sbci	r21, 0xFF	; 255
    1512:	2a f0       	brmi	.+10     	; 0x151e <__divsf3_pse+0x6c>
    1514:	9e 3f       	cpi	r25, 0xFE	; 254
    1516:	51 05       	cpc	r21, r1
    1518:	68 f0       	brcs	.+26     	; 0x1534 <__divsf3_pse+0x82>
    151a:	8d c0       	rjmp	.+282    	; 0x1636 <__fp_inf>
    151c:	d7 c0       	rjmp	.+430    	; 0x16cc <__fp_szero>
    151e:	5f 3f       	cpi	r21, 0xFF	; 255
    1520:	ec f3       	brlt	.-6      	; 0x151c <__divsf3_pse+0x6a>
    1522:	98 3e       	cpi	r25, 0xE8	; 232
    1524:	dc f3       	brlt	.-10     	; 0x151c <__divsf3_pse+0x6a>
    1526:	86 95       	lsr	r24
    1528:	77 95       	ror	r23
    152a:	67 95       	ror	r22
    152c:	b7 95       	ror	r27
    152e:	f7 95       	ror	r31
    1530:	9f 5f       	subi	r25, 0xFF	; 255
    1532:	c9 f7       	brne	.-14     	; 0x1526 <__divsf3_pse+0x74>
    1534:	88 0f       	add	r24, r24
    1536:	91 1d       	adc	r25, r1
    1538:	96 95       	lsr	r25
    153a:	87 95       	ror	r24
    153c:	97 f9       	bld	r25, 7
    153e:	08 95       	ret
    1540:	e1 e0       	ldi	r30, 0x01	; 1
    1542:	66 0f       	add	r22, r22
    1544:	77 1f       	adc	r23, r23
    1546:	88 1f       	adc	r24, r24
    1548:	bb 1f       	adc	r27, r27
    154a:	62 17       	cp	r22, r18
    154c:	73 07       	cpc	r23, r19
    154e:	84 07       	cpc	r24, r20
    1550:	ba 07       	cpc	r27, r26
    1552:	20 f0       	brcs	.+8      	; 0x155c <__divsf3_pse+0xaa>
    1554:	62 1b       	sub	r22, r18
    1556:	73 0b       	sbc	r23, r19
    1558:	84 0b       	sbc	r24, r20
    155a:	ba 0b       	sbc	r27, r26
    155c:	ee 1f       	adc	r30, r30
    155e:	88 f7       	brcc	.-30     	; 0x1542 <__divsf3_pse+0x90>
    1560:	e0 95       	com	r30
    1562:	08 95       	ret

00001564 <__fixunssfsi>:
    1564:	98 d0       	rcall	.+304    	; 0x1696 <__fp_splitA>
    1566:	88 f0       	brcs	.+34     	; 0x158a <__fixunssfsi+0x26>
    1568:	9f 57       	subi	r25, 0x7F	; 127
    156a:	90 f0       	brcs	.+36     	; 0x1590 <__fixunssfsi+0x2c>
    156c:	b9 2f       	mov	r27, r25
    156e:	99 27       	eor	r25, r25
    1570:	b7 51       	subi	r27, 0x17	; 23
    1572:	a0 f0       	brcs	.+40     	; 0x159c <__fixunssfsi+0x38>
    1574:	d1 f0       	breq	.+52     	; 0x15aa <__fixunssfsi+0x46>
    1576:	66 0f       	add	r22, r22
    1578:	77 1f       	adc	r23, r23
    157a:	88 1f       	adc	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	1a f0       	brmi	.+6      	; 0x1586 <__fixunssfsi+0x22>
    1580:	ba 95       	dec	r27
    1582:	c9 f7       	brne	.-14     	; 0x1576 <__fixunssfsi+0x12>
    1584:	12 c0       	rjmp	.+36     	; 0x15aa <__fixunssfsi+0x46>
    1586:	b1 30       	cpi	r27, 0x01	; 1
    1588:	81 f0       	breq	.+32     	; 0x15aa <__fixunssfsi+0x46>
    158a:	9f d0       	rcall	.+318    	; 0x16ca <__fp_zero>
    158c:	b1 e0       	ldi	r27, 0x01	; 1
    158e:	08 95       	ret
    1590:	9c c0       	rjmp	.+312    	; 0x16ca <__fp_zero>
    1592:	67 2f       	mov	r22, r23
    1594:	78 2f       	mov	r23, r24
    1596:	88 27       	eor	r24, r24
    1598:	b8 5f       	subi	r27, 0xF8	; 248
    159a:	39 f0       	breq	.+14     	; 0x15aa <__fixunssfsi+0x46>
    159c:	b9 3f       	cpi	r27, 0xF9	; 249
    159e:	cc f3       	brlt	.-14     	; 0x1592 <__fixunssfsi+0x2e>
    15a0:	86 95       	lsr	r24
    15a2:	77 95       	ror	r23
    15a4:	67 95       	ror	r22
    15a6:	b3 95       	inc	r27
    15a8:	d9 f7       	brne	.-10     	; 0x15a0 <__fixunssfsi+0x3c>
    15aa:	3e f4       	brtc	.+14     	; 0x15ba <__fixunssfsi+0x56>
    15ac:	90 95       	com	r25
    15ae:	80 95       	com	r24
    15b0:	70 95       	com	r23
    15b2:	61 95       	neg	r22
    15b4:	7f 4f       	sbci	r23, 0xFF	; 255
    15b6:	8f 4f       	sbci	r24, 0xFF	; 255
    15b8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ba:	08 95       	ret

000015bc <__floatunsisf>:
    15bc:	e8 94       	clt
    15be:	09 c0       	rjmp	.+18     	; 0x15d2 <__floatsisf+0x12>

000015c0 <__floatsisf>:
    15c0:	97 fb       	bst	r25, 7
    15c2:	3e f4       	brtc	.+14     	; 0x15d2 <__floatsisf+0x12>
    15c4:	90 95       	com	r25
    15c6:	80 95       	com	r24
    15c8:	70 95       	com	r23
    15ca:	61 95       	neg	r22
    15cc:	7f 4f       	sbci	r23, 0xFF	; 255
    15ce:	8f 4f       	sbci	r24, 0xFF	; 255
    15d0:	9f 4f       	sbci	r25, 0xFF	; 255
    15d2:	99 23       	and	r25, r25
    15d4:	a9 f0       	breq	.+42     	; 0x1600 <__floatsisf+0x40>
    15d6:	f9 2f       	mov	r31, r25
    15d8:	96 e9       	ldi	r25, 0x96	; 150
    15da:	bb 27       	eor	r27, r27
    15dc:	93 95       	inc	r25
    15de:	f6 95       	lsr	r31
    15e0:	87 95       	ror	r24
    15e2:	77 95       	ror	r23
    15e4:	67 95       	ror	r22
    15e6:	b7 95       	ror	r27
    15e8:	f1 11       	cpse	r31, r1
    15ea:	f8 cf       	rjmp	.-16     	; 0x15dc <__floatsisf+0x1c>
    15ec:	fa f4       	brpl	.+62     	; 0x162c <__floatsisf+0x6c>
    15ee:	bb 0f       	add	r27, r27
    15f0:	11 f4       	brne	.+4      	; 0x15f6 <__floatsisf+0x36>
    15f2:	60 ff       	sbrs	r22, 0
    15f4:	1b c0       	rjmp	.+54     	; 0x162c <__floatsisf+0x6c>
    15f6:	6f 5f       	subi	r22, 0xFF	; 255
    15f8:	7f 4f       	sbci	r23, 0xFF	; 255
    15fa:	8f 4f       	sbci	r24, 0xFF	; 255
    15fc:	9f 4f       	sbci	r25, 0xFF	; 255
    15fe:	16 c0       	rjmp	.+44     	; 0x162c <__floatsisf+0x6c>
    1600:	88 23       	and	r24, r24
    1602:	11 f0       	breq	.+4      	; 0x1608 <__floatsisf+0x48>
    1604:	96 e9       	ldi	r25, 0x96	; 150
    1606:	11 c0       	rjmp	.+34     	; 0x162a <__floatsisf+0x6a>
    1608:	77 23       	and	r23, r23
    160a:	21 f0       	breq	.+8      	; 0x1614 <__floatsisf+0x54>
    160c:	9e e8       	ldi	r25, 0x8E	; 142
    160e:	87 2f       	mov	r24, r23
    1610:	76 2f       	mov	r23, r22
    1612:	05 c0       	rjmp	.+10     	; 0x161e <__floatsisf+0x5e>
    1614:	66 23       	and	r22, r22
    1616:	71 f0       	breq	.+28     	; 0x1634 <__floatsisf+0x74>
    1618:	96 e8       	ldi	r25, 0x86	; 134
    161a:	86 2f       	mov	r24, r22
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	2a f0       	brmi	.+10     	; 0x162c <__floatsisf+0x6c>
    1622:	9a 95       	dec	r25
    1624:	66 0f       	add	r22, r22
    1626:	77 1f       	adc	r23, r23
    1628:	88 1f       	adc	r24, r24
    162a:	da f7       	brpl	.-10     	; 0x1622 <__floatsisf+0x62>
    162c:	88 0f       	add	r24, r24
    162e:	96 95       	lsr	r25
    1630:	87 95       	ror	r24
    1632:	97 f9       	bld	r25, 7
    1634:	08 95       	ret

00001636 <__fp_inf>:
    1636:	97 f9       	bld	r25, 7
    1638:	9f 67       	ori	r25, 0x7F	; 127
    163a:	80 e8       	ldi	r24, 0x80	; 128
    163c:	70 e0       	ldi	r23, 0x00	; 0
    163e:	60 e0       	ldi	r22, 0x00	; 0
    1640:	08 95       	ret

00001642 <__fp_nan>:
    1642:	9f ef       	ldi	r25, 0xFF	; 255
    1644:	80 ec       	ldi	r24, 0xC0	; 192
    1646:	08 95       	ret

00001648 <__fp_pscA>:
    1648:	00 24       	eor	r0, r0
    164a:	0a 94       	dec	r0
    164c:	16 16       	cp	r1, r22
    164e:	17 06       	cpc	r1, r23
    1650:	18 06       	cpc	r1, r24
    1652:	09 06       	cpc	r0, r25
    1654:	08 95       	ret

00001656 <__fp_pscB>:
    1656:	00 24       	eor	r0, r0
    1658:	0a 94       	dec	r0
    165a:	12 16       	cp	r1, r18
    165c:	13 06       	cpc	r1, r19
    165e:	14 06       	cpc	r1, r20
    1660:	05 06       	cpc	r0, r21
    1662:	08 95       	ret

00001664 <__fp_round>:
    1664:	09 2e       	mov	r0, r25
    1666:	03 94       	inc	r0
    1668:	00 0c       	add	r0, r0
    166a:	11 f4       	brne	.+4      	; 0x1670 <__fp_round+0xc>
    166c:	88 23       	and	r24, r24
    166e:	52 f0       	brmi	.+20     	; 0x1684 <__fp_round+0x20>
    1670:	bb 0f       	add	r27, r27
    1672:	40 f4       	brcc	.+16     	; 0x1684 <__fp_round+0x20>
    1674:	bf 2b       	or	r27, r31
    1676:	11 f4       	brne	.+4      	; 0x167c <__fp_round+0x18>
    1678:	60 ff       	sbrs	r22, 0
    167a:	04 c0       	rjmp	.+8      	; 0x1684 <__fp_round+0x20>
    167c:	6f 5f       	subi	r22, 0xFF	; 255
    167e:	7f 4f       	sbci	r23, 0xFF	; 255
    1680:	8f 4f       	sbci	r24, 0xFF	; 255
    1682:	9f 4f       	sbci	r25, 0xFF	; 255
    1684:	08 95       	ret

00001686 <__fp_split3>:
    1686:	57 fd       	sbrc	r21, 7
    1688:	90 58       	subi	r25, 0x80	; 128
    168a:	44 0f       	add	r20, r20
    168c:	55 1f       	adc	r21, r21
    168e:	59 f0       	breq	.+22     	; 0x16a6 <__fp_splitA+0x10>
    1690:	5f 3f       	cpi	r21, 0xFF	; 255
    1692:	71 f0       	breq	.+28     	; 0x16b0 <__fp_splitA+0x1a>
    1694:	47 95       	ror	r20

00001696 <__fp_splitA>:
    1696:	88 0f       	add	r24, r24
    1698:	97 fb       	bst	r25, 7
    169a:	99 1f       	adc	r25, r25
    169c:	61 f0       	breq	.+24     	; 0x16b6 <__fp_splitA+0x20>
    169e:	9f 3f       	cpi	r25, 0xFF	; 255
    16a0:	79 f0       	breq	.+30     	; 0x16c0 <__fp_splitA+0x2a>
    16a2:	87 95       	ror	r24
    16a4:	08 95       	ret
    16a6:	12 16       	cp	r1, r18
    16a8:	13 06       	cpc	r1, r19
    16aa:	14 06       	cpc	r1, r20
    16ac:	55 1f       	adc	r21, r21
    16ae:	f2 cf       	rjmp	.-28     	; 0x1694 <__fp_split3+0xe>
    16b0:	46 95       	lsr	r20
    16b2:	f1 df       	rcall	.-30     	; 0x1696 <__fp_splitA>
    16b4:	08 c0       	rjmp	.+16     	; 0x16c6 <__fp_splitA+0x30>
    16b6:	16 16       	cp	r1, r22
    16b8:	17 06       	cpc	r1, r23
    16ba:	18 06       	cpc	r1, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	f1 cf       	rjmp	.-30     	; 0x16a2 <__fp_splitA+0xc>
    16c0:	86 95       	lsr	r24
    16c2:	71 05       	cpc	r23, r1
    16c4:	61 05       	cpc	r22, r1
    16c6:	08 94       	sec
    16c8:	08 95       	ret

000016ca <__fp_zero>:
    16ca:	e8 94       	clt

000016cc <__fp_szero>:
    16cc:	bb 27       	eor	r27, r27
    16ce:	66 27       	eor	r22, r22
    16d0:	77 27       	eor	r23, r23
    16d2:	cb 01       	movw	r24, r22
    16d4:	97 f9       	bld	r25, 7
    16d6:	08 95       	ret

000016d8 <__mulsf3>:
    16d8:	0b d0       	rcall	.+22     	; 0x16f0 <__mulsf3x>
    16da:	c4 cf       	rjmp	.-120    	; 0x1664 <__fp_round>
    16dc:	b5 df       	rcall	.-150    	; 0x1648 <__fp_pscA>
    16de:	28 f0       	brcs	.+10     	; 0x16ea <__mulsf3+0x12>
    16e0:	ba df       	rcall	.-140    	; 0x1656 <__fp_pscB>
    16e2:	18 f0       	brcs	.+6      	; 0x16ea <__mulsf3+0x12>
    16e4:	95 23       	and	r25, r21
    16e6:	09 f0       	breq	.+2      	; 0x16ea <__mulsf3+0x12>
    16e8:	a6 cf       	rjmp	.-180    	; 0x1636 <__fp_inf>
    16ea:	ab cf       	rjmp	.-170    	; 0x1642 <__fp_nan>
    16ec:	11 24       	eor	r1, r1
    16ee:	ee cf       	rjmp	.-36     	; 0x16cc <__fp_szero>

000016f0 <__mulsf3x>:
    16f0:	ca df       	rcall	.-108    	; 0x1686 <__fp_split3>
    16f2:	a0 f3       	brcs	.-24     	; 0x16dc <__mulsf3+0x4>

000016f4 <__mulsf3_pse>:
    16f4:	95 9f       	mul	r25, r21
    16f6:	d1 f3       	breq	.-12     	; 0x16ec <__mulsf3+0x14>
    16f8:	95 0f       	add	r25, r21
    16fa:	50 e0       	ldi	r21, 0x00	; 0
    16fc:	55 1f       	adc	r21, r21
    16fe:	62 9f       	mul	r22, r18
    1700:	f0 01       	movw	r30, r0
    1702:	72 9f       	mul	r23, r18
    1704:	bb 27       	eor	r27, r27
    1706:	f0 0d       	add	r31, r0
    1708:	b1 1d       	adc	r27, r1
    170a:	63 9f       	mul	r22, r19
    170c:	aa 27       	eor	r26, r26
    170e:	f0 0d       	add	r31, r0
    1710:	b1 1d       	adc	r27, r1
    1712:	aa 1f       	adc	r26, r26
    1714:	64 9f       	mul	r22, r20
    1716:	66 27       	eor	r22, r22
    1718:	b0 0d       	add	r27, r0
    171a:	a1 1d       	adc	r26, r1
    171c:	66 1f       	adc	r22, r22
    171e:	82 9f       	mul	r24, r18
    1720:	22 27       	eor	r18, r18
    1722:	b0 0d       	add	r27, r0
    1724:	a1 1d       	adc	r26, r1
    1726:	62 1f       	adc	r22, r18
    1728:	73 9f       	mul	r23, r19
    172a:	b0 0d       	add	r27, r0
    172c:	a1 1d       	adc	r26, r1
    172e:	62 1f       	adc	r22, r18
    1730:	83 9f       	mul	r24, r19
    1732:	a0 0d       	add	r26, r0
    1734:	61 1d       	adc	r22, r1
    1736:	22 1f       	adc	r18, r18
    1738:	74 9f       	mul	r23, r20
    173a:	33 27       	eor	r19, r19
    173c:	a0 0d       	add	r26, r0
    173e:	61 1d       	adc	r22, r1
    1740:	23 1f       	adc	r18, r19
    1742:	84 9f       	mul	r24, r20
    1744:	60 0d       	add	r22, r0
    1746:	21 1d       	adc	r18, r1
    1748:	82 2f       	mov	r24, r18
    174a:	76 2f       	mov	r23, r22
    174c:	6a 2f       	mov	r22, r26
    174e:	11 24       	eor	r1, r1
    1750:	9f 57       	subi	r25, 0x7F	; 127
    1752:	50 40       	sbci	r21, 0x00	; 0
    1754:	8a f0       	brmi	.+34     	; 0x1778 <__mulsf3_pse+0x84>
    1756:	e1 f0       	breq	.+56     	; 0x1790 <__mulsf3_pse+0x9c>
    1758:	88 23       	and	r24, r24
    175a:	4a f0       	brmi	.+18     	; 0x176e <__mulsf3_pse+0x7a>
    175c:	ee 0f       	add	r30, r30
    175e:	ff 1f       	adc	r31, r31
    1760:	bb 1f       	adc	r27, r27
    1762:	66 1f       	adc	r22, r22
    1764:	77 1f       	adc	r23, r23
    1766:	88 1f       	adc	r24, r24
    1768:	91 50       	subi	r25, 0x01	; 1
    176a:	50 40       	sbci	r21, 0x00	; 0
    176c:	a9 f7       	brne	.-22     	; 0x1758 <__mulsf3_pse+0x64>
    176e:	9e 3f       	cpi	r25, 0xFE	; 254
    1770:	51 05       	cpc	r21, r1
    1772:	70 f0       	brcs	.+28     	; 0x1790 <__mulsf3_pse+0x9c>
    1774:	60 cf       	rjmp	.-320    	; 0x1636 <__fp_inf>
    1776:	aa cf       	rjmp	.-172    	; 0x16cc <__fp_szero>
    1778:	5f 3f       	cpi	r21, 0xFF	; 255
    177a:	ec f3       	brlt	.-6      	; 0x1776 <__mulsf3_pse+0x82>
    177c:	98 3e       	cpi	r25, 0xE8	; 232
    177e:	dc f3       	brlt	.-10     	; 0x1776 <__mulsf3_pse+0x82>
    1780:	86 95       	lsr	r24
    1782:	77 95       	ror	r23
    1784:	67 95       	ror	r22
    1786:	b7 95       	ror	r27
    1788:	f7 95       	ror	r31
    178a:	e7 95       	ror	r30
    178c:	9f 5f       	subi	r25, 0xFF	; 255
    178e:	c1 f7       	brne	.-16     	; 0x1780 <__mulsf3_pse+0x8c>
    1790:	fe 2b       	or	r31, r30
    1792:	88 0f       	add	r24, r24
    1794:	91 1d       	adc	r25, r1
    1796:	96 95       	lsr	r25
    1798:	87 95       	ror	r24
    179a:	97 f9       	bld	r25, 7
    179c:	08 95       	ret

0000179e <_exit>:
    179e:	f8 94       	cli

000017a0 <__stop_program>:
    17a0:	ff cf       	rjmp	.-2      	; 0x17a0 <__stop_program>
