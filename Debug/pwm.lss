
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000017cc  00001860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800128  00800128  00001888  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00001888  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00003454  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000039d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022e6  00000000  00000000  00003b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b66  00000000  00000000  00005e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000992  00000000  00000000  000069c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dbc  00000000  00000000  00007358  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d34  00000000  00000000  00008114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020f9  00000000  00000000  00008e48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_1>
       8:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__vector_2>
       c:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__vector_3>
      10:	0c 94 f5 02 	jmp	0x5ea	; 0x5ea <__vector_4>
      14:	0c 94 1c 03 	jmp	0x638	; 0x638 <__vector_5>
      18:	0c 94 43 03 	jmp	0x686	; 0x686 <__vector_6>
      1c:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__vector_7>
      20:	0c 94 91 03 	jmp	0x722	; 0x722 <__vector_8>
      24:	0c 94 b8 03 	jmp	0x770	; 0x770 <__vector_9>
      28:	0c 94 df 03 	jmp	0x7be	; 0x7be <__vector_10>
      2c:	0c 94 06 04 	jmp	0x80c	; 0x80c <__vector_11>
      30:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__vector_12>
      34:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__vector_13>
      38:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__vector_14>
      3c:	0c 94 a2 04 	jmp	0x944	; 0x944 <__vector_15>
      40:	0c 94 c9 04 	jmp	0x992	; 0x992 <__vector_16>
      44:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__vector_17>
      48:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <__vector_18>
      4c:	0c 94 3e 05 	jmp	0xa7c	; 0xa7c <__vector_19>
      50:	0c 94 65 05 	jmp	0xaca	; 0xaca <__vector_20>
      54:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__vector_21>
      58:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__vector_22>
      5c:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__vector_23>
      60:	0c 94 01 06 	jmp	0xc02	; 0xc02 <__vector_24>
      64:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__vector_25>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ec       	ldi	r30, 0xCC	; 204
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 32       	cpi	r26, 0x28	; 40
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a8 e2       	ldi	r26, 0x28	; 40
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 37       	cpi	r26, 0x75	; 117
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <main>
      9e:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DIO_init>:
*/


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
      a6:	fc 01       	movw	r30, r24
  uint8_t RET=0;
  static uint8_t Multiple_init=0;
  if (DIO_info == NULL)
      a8:	00 97       	sbiw	r24, 0x00	; 0
      aa:	09 f4       	brne	.+2      	; 0xae <DIO_init+0x8>
      ac:	5e c0       	rjmp	.+188    	; 0x16a <DIO_init+0xc4>
  {
    RET=NULL_PTR+DIO_MODULE;

  }else{
    u8_is_init=1;
      ae:	81 e0       	ldi	r24, 0x01	; 1
      b0:	80 93 28 01 	sts	0x0128, r24
    switch(DIO_info->dir)
      b4:	82 81       	ldd	r24, Z+2	; 0x02
      b6:	88 23       	and	r24, r24
      b8:	21 f0       	breq	.+8      	; 0xc2 <DIO_init+0x1c>
      ba:	8f 3f       	cpi	r24, 0xFF	; 255
      bc:	09 f0       	breq	.+2      	; 0xc0 <DIO_init+0x1a>
      be:	57 c0       	rjmp	.+174    	; 0x16e <DIO_init+0xc8>
      c0:	2c c0       	rjmp	.+88     	; 0x11a <DIO_init+0x74>
    {
    case INPUT:
      switch(DIO_info ->GPIO)
      c2:	80 81       	ld	r24, Z
      c4:	82 30       	cpi	r24, 0x02	; 2
      c6:	89 f0       	breq	.+34     	; 0xea <DIO_init+0x44>
      c8:	83 30       	cpi	r24, 0x03	; 3
      ca:	d9 f0       	breq	.+54     	; 0x102 <DIO_init+0x5c>
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	09 f0       	breq	.+2      	; 0xd2 <DIO_init+0x2c>
      d0:	50 c0       	rjmp	.+160    	; 0x172 <DIO_init+0xcc>
      {
      case GPIOB:
        PORTB_DIR &=(~(DIO_info->pins)) ;
      d2:	94 b1       	in	r25, 0x04	; 4
      d4:	81 81       	ldd	r24, Z+1	; 0x01
      d6:	80 95       	com	r24
      d8:	89 23       	and	r24, r25
      da:	84 b9       	out	0x04, r24	; 4
        Multiple_init+=2;
      dc:	80 91 29 01 	lds	r24, 0x0129
      e0:	8e 5f       	subi	r24, 0xFE	; 254
      e2:	80 93 29 01 	sts	0x0129, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
      e6:	80 e0       	ldi	r24, 0x00	; 0
      switch(DIO_info ->GPIO)
      {
      case GPIOB:
        PORTB_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=2;
        break;
      e8:	08 95       	ret
      case GPIOC:
        PORTC_DIR &=(~(DIO_info->pins)) ;
      ea:	97 b1       	in	r25, 0x07	; 7
      ec:	81 81       	ldd	r24, Z+1	; 0x01
      ee:	80 95       	com	r24
      f0:	89 23       	and	r24, r25
      f2:	87 b9       	out	0x07, r24	; 7
        Multiple_init+=3;
      f4:	80 91 29 01 	lds	r24, 0x0129
      f8:	8d 5f       	subi	r24, 0xFD	; 253
      fa:	80 93 29 01 	sts	0x0129, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
      fe:	80 e0       	ldi	r24, 0x00	; 0
        Multiple_init+=2;
        break;
      case GPIOC:
        PORTC_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=3;
        break;
     100:	08 95       	ret
      case GPIOD:
        PORTD_DIR &=(~(DIO_info->pins)) ;
     102:	9a b1       	in	r25, 0x0a	; 10
     104:	81 81       	ldd	r24, Z+1	; 0x01
     106:	80 95       	com	r24
     108:	89 23       	and	r24, r25
     10a:	8a b9       	out	0x0a, r24	; 10
        Multiple_init+=4;
     10c:	80 91 29 01 	lds	r24, 0x0129
     110:	8c 5f       	subi	r24, 0xFC	; 252
     112:	80 93 29 01 	sts	0x0129, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     116:	80 e0       	ldi	r24, 0x00	; 0
        Multiple_init+=3;
        break;
      case GPIOD:
        PORTD_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=4;
        break;
     118:	08 95       	ret
        break;
      }
      break;

      case OUTPUT:
        switch(DIO_info ->GPIO)
     11a:	80 81       	ld	r24, Z
     11c:	82 30       	cpi	r24, 0x02	; 2
     11e:	79 f0       	breq	.+30     	; 0x13e <DIO_init+0x98>
     120:	83 30       	cpi	r24, 0x03	; 3
     122:	c1 f0       	breq	.+48     	; 0x154 <DIO_init+0xae>
     124:	81 30       	cpi	r24, 0x01	; 1
     126:	39 f5       	brne	.+78     	; 0x176 <DIO_init+0xd0>
        {
        case GPIOB:
          PORTB_DIR |=(DIO_info->pins)  ;
     128:	94 b1       	in	r25, 0x04	; 4
     12a:	81 81       	ldd	r24, Z+1	; 0x01
     12c:	89 2b       	or	r24, r25
     12e:	84 b9       	out	0x04, r24	; 4
          Multiple_init+=2;
     130:	80 91 29 01 	lds	r24, 0x0129
     134:	8e 5f       	subi	r24, 0xFE	; 254
     136:	80 93 29 01 	sts	0x0129, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     13a:	80 e0       	ldi	r24, 0x00	; 0
        switch(DIO_info ->GPIO)
        {
        case GPIOB:
          PORTB_DIR |=(DIO_info->pins)  ;
          Multiple_init+=2;
          break;
     13c:	08 95       	ret
        case GPIOC:
          PORTC_DIR |=(DIO_info->pins)  ;
     13e:	97 b1       	in	r25, 0x07	; 7
     140:	81 81       	ldd	r24, Z+1	; 0x01
     142:	89 2b       	or	r24, r25
     144:	87 b9       	out	0x07, r24	; 7
          Multiple_init+=3;
     146:	80 91 29 01 	lds	r24, 0x0129
     14a:	8d 5f       	subi	r24, 0xFD	; 253
     14c:	80 93 29 01 	sts	0x0129, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     150:	80 e0       	ldi	r24, 0x00	; 0
          Multiple_init+=2;
          break;
        case GPIOC:
          PORTC_DIR |=(DIO_info->pins)  ;
          Multiple_init+=3;
          break;
     152:	08 95       	ret
        case GPIOD:
          PORTD_DIR |=(DIO_info->pins)  ;
     154:	9a b1       	in	r25, 0x0a	; 10
     156:	81 81       	ldd	r24, Z+1	; 0x01
     158:	89 2b       	or	r24, r25
     15a:	8a b9       	out	0x0a, r24	; 10
          Multiple_init+=4;
     15c:	80 91 29 01 	lds	r24, 0x0129
     160:	8c 5f       	subi	r24, 0xFC	; 252
     162:	80 93 29 01 	sts	0x0129, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     166:	80 e0       	ldi	r24, 0x00	; 0
          Multiple_init+=3;
          break;
        case GPIOD:
          PORTD_DIR |=(DIO_info->pins)  ;
          Multiple_init+=4;
          break;
     168:	08 95       	ret
{
  uint8_t RET=0;
  static uint8_t Multiple_init=0;
  if (DIO_info == NULL)
  {
    RET=NULL_PTR+DIO_MODULE;
     16a:	86 e1       	ldi	r24, 0x16	; 22
     16c:	08 95       	ret
          break;
        }

        break;
        default:
          RET=E_NOK+DIO_MODULE+INVALID_DIRECTION;
     16e:	83 e2       	ldi	r24, 0x23	; 35
     170:	08 95       	ret
      case GPIOD:
        PORTD_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=4;
        break;
      default:
        RET=E_NOK+DIO_MODULE+INVALID_PORT;
     172:	85 e2       	ldi	r24, 0x25	; 37
     174:	08 95       	ret
        case GPIOD:
          PORTD_DIR |=(DIO_info->pins)  ;
          Multiple_init+=4;
          break;
        default:
          RET=E_NOK+DIO_MODULE+INVALID_PORT;
     176:	85 e2       	ldi	r24, 0x25	; 37
    }


  }
  return RET;
}
     178:	08 95       	ret

0000017a <DIO_deinit>:

void DIO_deinit(void){
  u8_is_init=0;
     17a:	10 92 28 01 	sts	0x0128, r1
}
     17e:	08 95       	ret

00000180 <DIO_is_init>:

void DIO_is_init(void){
  u8_is_init=1;
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	80 93 28 01 	sts	0x0128, r24
}
     186:	08 95       	ret

00000188 <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;

if(u8_is_init==1){
     188:	90 91 28 01 	lds	r25, 0x0128
     18c:	91 30       	cpi	r25, 0x01	; 1
     18e:	91 f5       	brne	.+100    	; 0x1f4 <DIO_Write+0x6c>
switch(value){
     190:	44 23       	and	r20, r20
     192:	19 f0       	breq	.+6      	; 0x19a <DIO_Write+0x12>
     194:	4f 3f       	cpi	r20, 0xFF	; 255
     196:	81 f5       	brne	.+96     	; 0x1f8 <DIO_Write+0x70>
     198:	18 c0       	rjmp	.+48     	; 0x1ca <DIO_Write+0x42>
case LOW:
{
  switch (GPIO)
     19a:	82 30       	cpi	r24, 0x02	; 2
     19c:	51 f0       	breq	.+20     	; 0x1b2 <DIO_Write+0x2a>
     19e:	83 30       	cpi	r24, 0x03	; 3
     1a0:	71 f0       	breq	.+28     	; 0x1be <DIO_Write+0x36>
     1a2:	81 30       	cpi	r24, 0x01	; 1
     1a4:	59 f5       	brne	.+86     	; 0x1fc <DIO_Write+0x74>
  {
  case GPIOB:
    PORTB_DATA &= ~(pins);
     1a6:	85 b1       	in	r24, 0x05	; 5
     1a8:	60 95       	com	r22
     1aa:	68 23       	and	r22, r24
     1ac:	65 b9       	out	0x05, r22	; 5
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1ae:	84 e1       	ldi	r24, 0x14	; 20
{
  switch (GPIO)
  {
  case GPIOB:
    PORTB_DATA &= ~(pins);
    break;
     1b0:	08 95       	ret
  case GPIOC:
    PORTC_DATA &= ~(pins);
     1b2:	88 b1       	in	r24, 0x08	; 8
     1b4:	60 95       	com	r22
     1b6:	68 23       	and	r22, r24
     1b8:	68 b9       	out	0x08, r22	; 8
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1ba:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    PORTB_DATA &= ~(pins);
    break;
  case GPIOC:
    PORTC_DATA &= ~(pins);
    break;
     1bc:	08 95       	ret
  case GPIOD:
    PORTD_DATA &= ~(pins);
     1be:	8b b1       	in	r24, 0x0b	; 11
     1c0:	60 95       	com	r22
     1c2:	68 23       	and	r22, r24
     1c4:	6b b9       	out	0x0b, r22	; 11
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1c6:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    PORTC_DATA &= ~(pins);
    break;
  case GPIOD:
    PORTD_DATA &= ~(pins);
    break;
     1c8:	08 95       	ret
    break;
  }
  break;
}
case HIGH:{
  switch (GPIO)
     1ca:	82 30       	cpi	r24, 0x02	; 2
     1cc:	49 f0       	breq	.+18     	; 0x1e0 <DIO_Write+0x58>
     1ce:	83 30       	cpi	r24, 0x03	; 3
     1d0:	61 f0       	breq	.+24     	; 0x1ea <DIO_Write+0x62>
     1d2:	81 30       	cpi	r24, 0x01	; 1
     1d4:	a9 f4       	brne	.+42     	; 0x200 <DIO_Write+0x78>
  { 
  case GPIOB:
    PORTB_DATA |=(pins);
     1d6:	85 b1       	in	r24, 0x05	; 5
     1d8:	68 2b       	or	r22, r24
     1da:	65 b9       	out	0x05, r22	; 5
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1dc:	84 e1       	ldi	r24, 0x14	; 20
case HIGH:{
  switch (GPIO)
  { 
  case GPIOB:
    PORTB_DATA |=(pins);
    break;
     1de:	08 95       	ret
  case GPIOC:
    PORTC_DATA |=(pins);
     1e0:	88 b1       	in	r24, 0x08	; 8
     1e2:	68 2b       	or	r22, r24
     1e4:	68 b9       	out	0x08, r22	; 8
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1e6:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    PORTB_DATA |=(pins);
    break;
  case GPIOC:
    PORTC_DATA |=(pins);
    break;
     1e8:	08 95       	ret
  case GPIOD:
    PORTD_DATA |=(pins);
     1ea:	8b b1       	in	r24, 0x0b	; 11
     1ec:	68 2b       	or	r22, r24
     1ee:	6b b9       	out	0x0b, r22	; 11
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1f0:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    PORTC_DATA |=(pins);
    break;
  case GPIOD:
    PORTD_DATA |=(pins);
    break;
     1f2:	08 95       	ret
default:
  Ret+=INVALID_VALUE;
  break;
}

}else{Ret+=NOT_INIT;}
     1f4:	88 e1       	ldi	r24, 0x18	; 24
     1f6:	08 95       	ret
    break;
  }
  break;
}
default:
  Ret+=INVALID_VALUE;
     1f8:	86 e2       	ldi	r24, 0x26	; 38
     1fa:	08 95       	ret
    break;
  case GPIOD:
    PORTD_DATA &= ~(pins);
    break;
  default:
    Ret+=INVALID_PORT;
     1fc:	84 e2       	ldi	r24, 0x24	; 36
     1fe:	08 95       	ret
    break;
  case GPIOD:
    PORTD_DATA |=(pins);
    break;
  default:
    Ret+=INVALID_PORT;
     200:	84 e2       	ldi	r24, 0x24	; 36
  break;
}

}else{Ret+=NOT_INIT;}
return Ret;
}
     202:	08 95       	ret

00000204 <DIO_Read>:


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
if(u8_is_init==1){
     204:	90 91 28 01 	lds	r25, 0x0128
     208:	91 30       	cpi	r25, 0x01	; 1
     20a:	01 f5       	brne	.+64     	; 0x24c <DIO_Read+0x48>
  switch (GPIO)
     20c:	82 30       	cpi	r24, 0x02	; 2
     20e:	51 f0       	breq	.+20     	; 0x224 <DIO_Read+0x20>
     210:	83 30       	cpi	r24, 0x03	; 3
     212:	71 f0       	breq	.+28     	; 0x230 <DIO_Read+0x2c>
     214:	81 30       	cpi	r24, 0x01	; 1
     216:	91 f4       	brne	.+36     	; 0x23c <DIO_Read+0x38>
  { 
  case GPIOB:
    *data=(PORTB_PIN & pins);
     218:	83 b1       	in	r24, 0x03	; 3
     21a:	68 23       	and	r22, r24
     21c:	fa 01       	movw	r30, r20
     21e:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
     220:	84 e1       	ldi	r24, 0x14	; 20
if(u8_is_init==1){
  switch (GPIO)
  { 
  case GPIOB:
    *data=(PORTB_PIN & pins);
    break;
     222:	0d c0       	rjmp	.+26     	; 0x23e <DIO_Read+0x3a>
  case GPIOC:
    *data=(PORTC_PIN & pins);
     224:	86 b1       	in	r24, 0x06	; 6
     226:	68 23       	and	r22, r24
     228:	fa 01       	movw	r30, r20
     22a:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
     22c:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    *data=(PORTB_PIN & pins);
    break;
  case GPIOC:
    *data=(PORTC_PIN & pins);
    break;
     22e:	07 c0       	rjmp	.+14     	; 0x23e <DIO_Read+0x3a>
  case GPIOD:
    *data=(PORTD_PIN & pins);
     230:	89 b1       	in	r24, 0x09	; 9
     232:	68 23       	and	r22, r24
     234:	fa 01       	movw	r30, r20
     236:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
     238:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    *data=(PORTC_PIN & pins);
    break;
  case GPIOD:
    *data=(PORTD_PIN & pins);
    break;
     23a:	01 c0       	rjmp	.+2      	; 0x23e <DIO_Read+0x3a>
    default:
    ret+=INVALID_PORT;
     23c:	84 e2       	ldi	r24, 0x24	; 36
    break;
  }
  if(*data > 0)
     23e:	fa 01       	movw	r30, r20
     240:	90 81       	ld	r25, Z
     242:	99 23       	and	r25, r25
     244:	21 f0       	breq	.+8      	; 0x24e <DIO_Read+0x4a>
  {
    *data = 1;
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	90 83       	st	Z, r25
     24a:	08 95       	ret
  }
}else{ret+=NOT_INIT;}
     24c:	88 e1       	ldi	r24, 0x18	; 24
return ret;
}
     24e:	08 95       	ret

00000250 <DIO_Toggle>:
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
if(u8_is_init==1){
     250:	90 91 28 01 	lds	r25, 0x0128
     254:	91 30       	cpi	r25, 0x01	; 1
     256:	a9 f4       	brne	.+42     	; 0x282 <DIO_Toggle+0x32>
  switch (GPIO)
     258:	82 30       	cpi	r24, 0x02	; 2
     25a:	49 f0       	breq	.+18     	; 0x26e <DIO_Toggle+0x1e>
     25c:	83 30       	cpi	r24, 0x03	; 3
     25e:	61 f0       	breq	.+24     	; 0x278 <DIO_Toggle+0x28>
     260:	81 30       	cpi	r24, 0x01	; 1
     262:	89 f4       	brne	.+34     	; 0x286 <DIO_Toggle+0x36>
  {
  case GPIOB:
    PORTB_DATA ^=(pins);
     264:	85 b1       	in	r24, 0x05	; 5
     266:	68 27       	eor	r22, r24
     268:	65 b9       	out	0x05, r22	; 5
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
     26a:	84 e1       	ldi	r24, 0x14	; 20
if(u8_is_init==1){
  switch (GPIO)
  {
  case GPIOB:
    PORTB_DATA ^=(pins);
    break;
     26c:	08 95       	ret
  case GPIOC:
    PORTC_DATA ^=(pins);
     26e:	88 b1       	in	r24, 0x08	; 8
     270:	68 27       	eor	r22, r24
     272:	68 b9       	out	0x08, r22	; 8
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
     274:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    PORTB_DATA ^=(pins);
    break;
  case GPIOC:
    PORTC_DATA ^=(pins);
    break;
     276:	08 95       	ret
  case GPIOD:
    PORTD_DATA ^=(pins);
     278:	8b b1       	in	r24, 0x0b	; 11
     27a:	68 27       	eor	r22, r24
     27c:	6b b9       	out	0x0b, r22	; 11
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
     27e:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    PORTC_DATA ^=(pins);
    break;
  case GPIOD:
    PORTD_DATA ^=(pins);
    break;
     280:	08 95       	ret
  default:
    ret+=INVALID_PORT;
    break;
  }
}else{ret+=NOT_INIT;}
     282:	88 e1       	ldi	r24, 0x18	; 24
     284:	08 95       	ret
    break;
  case GPIOD:
    PORTD_DATA ^=(pins);
    break;
  default:
    ret+=INVALID_PORT;
     286:	84 e2       	ldi	r24, 0x24	; 36
    break;
  }
}else{ret+=NOT_INIT;}
  return ret;
}
     288:	08 95       	ret

0000028a <system_init>:


void system_init(void)
{

Us_Init();	
     28a:	0e 94 0b 0a 	call	0x1416	; 0x1416 <Us_Init>
motor_init();
     28e:	0e 94 54 06 	call	0xca8	; 0xca8 <motor_init>
speaker_init();
     292:	0e 94 60 07 	call	0xec0	; 0xec0 <speaker_init>


}
     296:	08 95       	ret

00000298 <system_update>:


void system_update(void)
{
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	00 d0       	rcall	.+0      	; 0x29e <system_update+0x6>
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
uint16_t Distance = 0;
     2a2:	1a 82       	std	Y+2, r1	; 0x02
     2a4:	19 82       	std	Y+1, r1	; 0x01
uint8_t state_machine=0;	
Us_GetDistance(&Distance);
     2a6:	ce 01       	movw	r24, r28
     2a8:	01 96       	adiw	r24, 0x01	; 1
     2aa:	0e 94 41 0a 	call	0x1482	; 0x1482 <Us_GetDistance>

motor_start_sm(state_machine);
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	0e 94 5d 06 	call	0xcba	; 0xcba <motor_start_sm>
speaker_start_sm(state_machine);
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	0e 94 65 07 	call	0xeca	; 0xeca <speaker_start_sm>


     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <Icu_Init>:
static volatile uint32_t u32_Time_rising_edge=0;
static volatile uint32_t u32_Time_faling_edge=0;
static volatile uint32_t Timer_High=0;
static volatile uint32_t Timer_Low=0;
ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	ec 01       	movw	r28, r24
  uint8_t Ret=0;
//Enable Global int
G_interrupt_Enable();
     2ca:	0e 94 61 02 	call	0x4c2	; 0x4c2 <G_interrupt_Enable>
//Enable EXTI
switch(Icu_Cfg->ICU_Ch_No)
     2ce:	88 81       	ld	r24, Y
     2d0:	88 23       	and	r24, r24
     2d2:	19 f0       	breq	.+6      	; 0x2da <Icu_Init+0x16>
     2d4:	81 30       	cpi	r24, 0x01	; 1
     2d6:	91 f4       	brne	.+36     	; 0x2fc <Icu_Init+0x38>
     2d8:	09 c0       	rjmp	.+18     	; 0x2ec <Icu_Init+0x28>
{
case ICU_CH0:
EX_interrupt0_enable0();
     2da:	0e 94 71 02 	call	0x4e2	; 0x4e2 <EX_interrupt0_enable0>
INT0_external_interrupt = (Icu_Cfg->external_int);
     2de:	8a 81       	ldd	r24, Y+2	; 0x02
     2e0:	9b 81       	ldd	r25, Y+3	; 0x03
     2e2:	90 93 1a 01 	sts	0x011A, r25
     2e6:	80 93 19 01 	sts	0x0119, r24

break;
     2ea:	08 c0       	rjmp	.+16     	; 0x2fc <Icu_Init+0x38>
case ICU_CH1:
EX_interrupt1_enable1();
     2ec:	0e 94 65 02 	call	0x4ca	; 0x4ca <EX_interrupt1_enable1>
INT1_external_interrupt = (Icu_Cfg->external_int);
     2f0:	8a 81       	ldd	r24, Y+2	; 0x02
     2f2:	9b 81       	ldd	r25, Y+3	; 0x03
     2f4:	90 93 70 01 	sts	0x0170, r25
     2f8:	80 93 6f 01 	sts	0x016F, r24

break;
}

switch(Icu_Cfg->ICU_Ch_Timer)
     2fc:	89 81       	ldd	r24, Y+1	; 0x01
     2fe:	81 30       	cpi	r24, 0x01	; 1
     300:	61 f4       	brne	.+24     	; 0x31a <Icu_Init+0x56>
    TCCR0=0x05;
    TIMSK0=0x01;
    break;
    */
   case ICU_TIMER_CH1:
   TCCR1B=0x05;
     302:	85 e0       	ldi	r24, 0x05	; 5
     304:	80 93 81 00 	sts	0x0081, r24
	TIMSK1=0x01;
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	80 93 6f 00 	sts	0x006F, r24
	TIMER1OVF=(Icu_Cfg->timer_int);
     30e:	8c 81       	ldd	r24, Y+4	; 0x04
     310:	9d 81       	ldd	r25, Y+5	; 0x05
     312:	90 93 16 01 	sts	0x0116, r25
     316:	80 93 15 01 	sts	0x0115, r24
 */
}


return Ret;
}
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <Icu_ReadTime>:
 *          - E_NOK : not successful                   *
 * Description  : calculates the time between 2 edges              *
 ***************************************************************************/

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time)
{
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
uint8_t Ret=0;
switch(Icu_Channel)
     326:	81 30       	cpi	r24, 0x01	; 1
     328:	29 f4       	brne	.+10     	; 0x334 <Icu_ReadTime+0x12>
 /* case ICU_TIMER_CH0:
  TCCR0|=0x03;
  Ret=E_OK;
  break;
 */ case ICU_TIMER_CH1:
  TCCR1B|=0x05;
     32a:	e1 e8       	ldi	r30, 0x81	; 129
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	80 81       	ld	r24, Z
     330:	85 60       	ori	r24, 0x05	; 5
     332:	80 83       	st	Z, r24
  default:
  Ret=E_NOK;
  break;
}

switch(Icu_EdgeToEdge)
     334:	61 30       	cpi	r22, 0x01	; 1
     336:	01 f1       	breq	.+64     	; 0x378 <Icu_ReadTime+0x56>
     338:	61 30       	cpi	r22, 0x01	; 1
     33a:	18 f0       	brcs	.+6      	; 0x342 <Icu_ReadTime+0x20>
     33c:	62 30       	cpi	r22, 0x02	; 2
     33e:	d1 f5       	brne	.+116    	; 0x3b4 <Icu_ReadTime+0x92>
     340:	2a c0       	rjmp	.+84     	; 0x396 <Icu_ReadTime+0x74>
{
  case ICU_RISE_TO_RISE:
  *Icu_Time=Timer_High+Timer_Low;
     342:	80 91 2e 01 	lds	r24, 0x012E
     346:	90 91 2f 01 	lds	r25, 0x012F
     34a:	a0 91 30 01 	lds	r26, 0x0130
     34e:	b0 91 31 01 	lds	r27, 0x0131
     352:	00 91 2a 01 	lds	r16, 0x012A
     356:	10 91 2b 01 	lds	r17, 0x012B
     35a:	20 91 2c 01 	lds	r18, 0x012C
     35e:	30 91 2d 01 	lds	r19, 0x012D
     362:	80 0f       	add	r24, r16
     364:	91 1f       	adc	r25, r17
     366:	a2 1f       	adc	r26, r18
     368:	b3 1f       	adc	r27, r19
     36a:	fa 01       	movw	r30, r20
     36c:	80 83       	st	Z, r24
     36e:	91 83       	std	Z+1, r25	; 0x01
     370:	a2 83       	std	Z+2, r26	; 0x02
     372:	b3 83       	std	Z+3, r27	; 0x03
  Ret=E_OK;
     374:	80 e0       	ldi	r24, 0x00	; 0
  break;
     376:	1f c0       	rjmp	.+62     	; 0x3b6 <Icu_ReadTime+0x94>
  case ICU_RISE_TO_FALL:
  *Icu_Time=Timer_High;
     378:	80 91 2e 01 	lds	r24, 0x012E
     37c:	90 91 2f 01 	lds	r25, 0x012F
     380:	a0 91 30 01 	lds	r26, 0x0130
     384:	b0 91 31 01 	lds	r27, 0x0131
     388:	fa 01       	movw	r30, r20
     38a:	80 83       	st	Z, r24
     38c:	91 83       	std	Z+1, r25	; 0x01
     38e:	a2 83       	std	Z+2, r26	; 0x02
     390:	b3 83       	std	Z+3, r27	; 0x03
  Ret=E_OK;
     392:	80 e0       	ldi	r24, 0x00	; 0
  break;
     394:	10 c0       	rjmp	.+32     	; 0x3b6 <Icu_ReadTime+0x94>
  case ICU_FALE_TO_RISE:
  *Icu_Time=Timer_Low;
     396:	80 91 2a 01 	lds	r24, 0x012A
     39a:	90 91 2b 01 	lds	r25, 0x012B
     39e:	a0 91 2c 01 	lds	r26, 0x012C
     3a2:	b0 91 2d 01 	lds	r27, 0x012D
     3a6:	fa 01       	movw	r30, r20
     3a8:	80 83       	st	Z, r24
     3aa:	91 83       	std	Z+1, r25	; 0x01
     3ac:	a2 83       	std	Z+2, r26	; 0x02
     3ae:	b3 83       	std	Z+3, r27	; 0x03
  Ret=E_OK;
     3b0:	80 e0       	ldi	r24, 0x00	; 0
  break;
     3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <Icu_ReadTime+0x94>

  default:
  Ret=E_NOK;
     3b4:	81 e0       	ldi	r24, 0x01	; 1
  break;
}

return Ret;
}
     3b6:	1f 91       	pop	r17
     3b8:	0f 91       	pop	r16
     3ba:	08 95       	ret

000003bc <EXTI0>:

void EXTI0(void)
{
  //u32_sgv_TimerVal=(uint32_t)TCNT1;
  u32_sgv_TimerVal=TCNT1;
     3bc:	80 91 84 00 	lds	r24, 0x0084
     3c0:	90 91 85 00 	lds	r25, 0x0085
     3c4:	a0 e0       	ldi	r26, 0x00	; 0
     3c6:	b0 e0       	ldi	r27, 0x00	; 0
     3c8:	80 93 3b 01 	sts	0x013B, r24
     3cc:	90 93 3c 01 	sts	0x013C, r25
     3d0:	a0 93 3d 01 	sts	0x013D, r26
     3d4:	b0 93 3e 01 	sts	0x013E, r27
  u8_ovf_happend=0;
     3d8:	10 92 3a 01 	sts	0x013A, r1
//  if(READBIT(EXTERNAL_INTERRUPT_CONTROL,6))
    if(READBIT(EXTERNAL_INTERRUPT_CONTROL,ISC00) && READBIT(EXTERNAL_INTERRUPT_CONTROL,ISC01))
     3dc:	80 91 69 00 	lds	r24, 0x0069
     3e0:	80 ff       	sbrs	r24, 0
     3e2:	37 c0       	rjmp	.+110    	; 0x452 <EXTI0+0x96>
     3e4:	80 91 69 00 	lds	r24, 0x0069
     3e8:	86 95       	lsr	r24
     3ea:	80 ff       	sbrs	r24, 0
     3ec:	32 c0       	rjmp	.+100    	; 0x452 <EXTI0+0x96>
    {
		
    u32_Time_rising_edge=u32_sgv_TimerVal;
     3ee:	80 91 3b 01 	lds	r24, 0x013B
     3f2:	90 91 3c 01 	lds	r25, 0x013C
     3f6:	a0 91 3d 01 	lds	r26, 0x013D
     3fa:	b0 91 3e 01 	lds	r27, 0x013E
     3fe:	80 93 36 01 	sts	0x0136, r24
     402:	90 93 37 01 	sts	0x0137, r25
     406:	a0 93 38 01 	sts	0x0138, r26
     40a:	b0 93 39 01 	sts	0x0139, r27
    Timer_Low = u32_Time_rising_edge - u32_Time_faling_edge;
     40e:	80 91 36 01 	lds	r24, 0x0136
     412:	90 91 37 01 	lds	r25, 0x0137
     416:	a0 91 38 01 	lds	r26, 0x0138
     41a:	b0 91 39 01 	lds	r27, 0x0139
     41e:	40 91 32 01 	lds	r20, 0x0132
     422:	50 91 33 01 	lds	r21, 0x0133
     426:	60 91 34 01 	lds	r22, 0x0134
     42a:	70 91 35 01 	lds	r23, 0x0135
     42e:	84 1b       	sub	r24, r20
     430:	95 0b       	sbc	r25, r21
     432:	a6 0b       	sbc	r26, r22
     434:	b7 0b       	sbc	r27, r23
     436:	80 93 2a 01 	sts	0x012A, r24
     43a:	90 93 2b 01 	sts	0x012B, r25
     43e:	a0 93 2c 01 	sts	0x012C, r26
     442:	b0 93 2d 01 	sts	0x012D, r27
    /*****************************************/
    CLEAR_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC00);  /*Make it falling*/
     446:	e9 e6       	ldi	r30, 0x69	; 105
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8e 7f       	andi	r24, 0xFE	; 254
     44e:	80 83       	st	Z, r24
     450:	08 95       	ret
    /***************************************/
   }else{
      u32_Time_faling_edge=u32_sgv_TimerVal;
     452:	80 91 3b 01 	lds	r24, 0x013B
     456:	90 91 3c 01 	lds	r25, 0x013C
     45a:	a0 91 3d 01 	lds	r26, 0x013D
     45e:	b0 91 3e 01 	lds	r27, 0x013E
     462:	80 93 32 01 	sts	0x0132, r24
     466:	90 93 33 01 	sts	0x0133, r25
     46a:	a0 93 34 01 	sts	0x0134, r26
     46e:	b0 93 35 01 	sts	0x0135, r27
      Timer_High =u32_Time_faling_edge - u32_Time_rising_edge;
     472:	80 91 32 01 	lds	r24, 0x0132
     476:	90 91 33 01 	lds	r25, 0x0133
     47a:	a0 91 34 01 	lds	r26, 0x0134
     47e:	b0 91 35 01 	lds	r27, 0x0135
     482:	40 91 36 01 	lds	r20, 0x0136
     486:	50 91 37 01 	lds	r21, 0x0137
     48a:	60 91 38 01 	lds	r22, 0x0138
     48e:	70 91 39 01 	lds	r23, 0x0139
     492:	84 1b       	sub	r24, r20
     494:	95 0b       	sbc	r25, r21
     496:	a6 0b       	sbc	r26, r22
     498:	b7 0b       	sbc	r27, r23
     49a:	80 93 2e 01 	sts	0x012E, r24
     49e:	90 93 2f 01 	sts	0x012F, r25
     4a2:	a0 93 30 01 	sts	0x0130, r26
     4a6:	b0 93 31 01 	sts	0x0131, r27
   /*********************************/
      SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC00);    /*Make it Rising*/
     4aa:	e9 e6       	ldi	r30, 0x69	; 105
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	81 60       	ori	r24, 0x01	; 1
     4b2:	80 83       	st	Z, r24
     4b4:	08 95       	ret

000004b6 <timer_interrupt1>:
 }

}
void timer_interrupt1(void)
{
  u8_ovf_happend=1;
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	80 93 3a 01 	sts	0x013A, r24
Us_Trigger();
     4bc:	0e 94 28 0a 	call	0x1450	; 0x1450 <Us_Trigger>
}
     4c0:	08 95       	ret

000004c2 <G_interrupt_Enable>:
ptr_to_Fun ANA_COMP;
ptr_to_Fun TWI_I2C;
ptr_to_Fun SPM_RDY;
void G_interrupt_Enable(void)
{
 SREG |=(0x80);
     4c2:	8f b7       	in	r24, 0x3f	; 63
     4c4:	80 68       	ori	r24, 0x80	; 128
     4c6:	8f bf       	out	0x3f, r24	; 63
}
     4c8:	08 95       	ret

000004ca <EX_interrupt1_enable1>:

void EX_interrupt1_enable1(void)
{
CLEAR_BIT(PORTD_DIR,3);/*Input*/
     4ca:	53 98       	cbi	0x0a, 3	; 10
SET_BIT(PORTD_DATA,3);/*Pullup*/
     4cc:	5b 9a       	sbi	0x0b, 3	; 11
SET_BIT(EXTERNAL_INTERRUPT_MASK_REG,INT1);/*EXT1*/
     4ce:	e9 9a       	sbi	0x1d, 1	; 29
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC10);/*Rising*/
     4d0:	e9 e6       	ldi	r30, 0x69	; 105
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	80 81       	ld	r24, Z
     4d6:	84 60       	ori	r24, 0x04	; 4
     4d8:	80 83       	st	Z, r24
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC11);/*Rising*/
     4da:	80 81       	ld	r24, Z
     4dc:	88 60       	ori	r24, 0x08	; 8
     4de:	80 83       	st	Z, r24
}
     4e0:	08 95       	ret

000004e2 <EX_interrupt0_enable0>:
void EX_interrupt0_enable0(void)
{
CLEAR_BIT(PORTD_DIR,2);/*Input*/
     4e2:	52 98       	cbi	0x0a, 2	; 10
//SET_BIT(PORTD_DATA,2);/*Pullup*/
SET_BIT(EXTERNAL_INTERRUPT_MASK_REG,INT0);/*EXT0*/
     4e4:	e8 9a       	sbi	0x1d, 0	; 29
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC00);/*Rising*/
     4e6:	e9 e6       	ldi	r30, 0x69	; 105
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	80 81       	ld	r24, Z
     4ec:	81 60       	ori	r24, 0x01	; 1
     4ee:	80 83       	st	Z, r24
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC01);/*Rising*/
     4f0:	80 81       	ld	r24, Z
     4f2:	82 60       	ori	r24, 0x02	; 2
     4f4:	80 83       	st	Z, r24
}
     4f6:	08 95       	ret

000004f8 <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
     4f8:	8f b7       	in	r24, 0x3f	; 63
     4fa:	8f 77       	andi	r24, 0x7F	; 127
     4fc:	8f bf       	out	0x3f, r24	; 63
}
     4fe:	08 95       	ret

00000500 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     500:	1f 92       	push	r1
     502:	0f 92       	push	r0
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	0f 92       	push	r0
     508:	11 24       	eor	r1, r1
     50a:	2f 93       	push	r18
     50c:	3f 93       	push	r19
     50e:	4f 93       	push	r20
     510:	5f 93       	push	r21
     512:	6f 93       	push	r22
     514:	7f 93       	push	r23
     516:	8f 93       	push	r24
     518:	9f 93       	push	r25
     51a:	af 93       	push	r26
     51c:	bf 93       	push	r27
     51e:	ef 93       	push	r30
     520:	ff 93       	push	r31
  INT0_external_interrupt();
     522:	e0 91 19 01 	lds	r30, 0x0119
     526:	f0 91 1a 01 	lds	r31, 0x011A
     52a:	09 95       	icall
}
     52c:	ff 91       	pop	r31
     52e:	ef 91       	pop	r30
     530:	bf 91       	pop	r27
     532:	af 91       	pop	r26
     534:	9f 91       	pop	r25
     536:	8f 91       	pop	r24
     538:	7f 91       	pop	r23
     53a:	6f 91       	pop	r22
     53c:	5f 91       	pop	r21
     53e:	4f 91       	pop	r20
     540:	3f 91       	pop	r19
     542:	2f 91       	pop	r18
     544:	0f 90       	pop	r0
     546:	0f be       	out	0x3f, r0	; 63
     548:	0f 90       	pop	r0
     54a:	1f 90       	pop	r1
     54c:	18 95       	reti

0000054e <__vector_2>:


void __vector_2(void) __attribute__((signal));
void
 __vector_2(void)
{
     54e:	1f 92       	push	r1
     550:	0f 92       	push	r0
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	0f 92       	push	r0
     556:	11 24       	eor	r1, r1
     558:	2f 93       	push	r18
     55a:	3f 93       	push	r19
     55c:	4f 93       	push	r20
     55e:	5f 93       	push	r21
     560:	6f 93       	push	r22
     562:	7f 93       	push	r23
     564:	8f 93       	push	r24
     566:	9f 93       	push	r25
     568:	af 93       	push	r26
     56a:	bf 93       	push	r27
     56c:	ef 93       	push	r30
     56e:	ff 93       	push	r31
  INT1_external_interrupt();
     570:	e0 91 6f 01 	lds	r30, 0x016F
     574:	f0 91 70 01 	lds	r31, 0x0170
     578:	09 95       	icall
}
     57a:	ff 91       	pop	r31
     57c:	ef 91       	pop	r30
     57e:	bf 91       	pop	r27
     580:	af 91       	pop	r26
     582:	9f 91       	pop	r25
     584:	8f 91       	pop	r24
     586:	7f 91       	pop	r23
     588:	6f 91       	pop	r22
     58a:	5f 91       	pop	r21
     58c:	4f 91       	pop	r20
     58e:	3f 91       	pop	r19
     590:	2f 91       	pop	r18
     592:	0f 90       	pop	r0
     594:	0f be       	out	0x3f, r0	; 63
     596:	0f 90       	pop	r0
     598:	1f 90       	pop	r1
     59a:	18 95       	reti

0000059c <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     59c:	1f 92       	push	r1
     59e:	0f 92       	push	r0
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	0f 92       	push	r0
     5a4:	11 24       	eor	r1, r1
     5a6:	2f 93       	push	r18
     5a8:	3f 93       	push	r19
     5aa:	4f 93       	push	r20
     5ac:	5f 93       	push	r21
     5ae:	6f 93       	push	r22
     5b0:	7f 93       	push	r23
     5b2:	8f 93       	push	r24
     5b4:	9f 93       	push	r25
     5b6:	af 93       	push	r26
     5b8:	bf 93       	push	r27
     5ba:	ef 93       	push	r30
     5bc:	ff 93       	push	r31
  Pin_Change_Interrupt_Request_0();
     5be:	e0 91 55 01 	lds	r30, 0x0155
     5c2:	f0 91 56 01 	lds	r31, 0x0156
     5c6:	09 95       	icall
}
     5c8:	ff 91       	pop	r31
     5ca:	ef 91       	pop	r30
     5cc:	bf 91       	pop	r27
     5ce:	af 91       	pop	r26
     5d0:	9f 91       	pop	r25
     5d2:	8f 91       	pop	r24
     5d4:	7f 91       	pop	r23
     5d6:	6f 91       	pop	r22
     5d8:	5f 91       	pop	r21
     5da:	4f 91       	pop	r20
     5dc:	3f 91       	pop	r19
     5de:	2f 91       	pop	r18
     5e0:	0f 90       	pop	r0
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	0f 90       	pop	r0
     5e6:	1f 90       	pop	r1
     5e8:	18 95       	reti

000005ea <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     5ea:	1f 92       	push	r1
     5ec:	0f 92       	push	r0
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	0f 92       	push	r0
     5f2:	11 24       	eor	r1, r1
     5f4:	2f 93       	push	r18
     5f6:	3f 93       	push	r19
     5f8:	4f 93       	push	r20
     5fa:	5f 93       	push	r21
     5fc:	6f 93       	push	r22
     5fe:	7f 93       	push	r23
     600:	8f 93       	push	r24
     602:	9f 93       	push	r25
     604:	af 93       	push	r26
     606:	bf 93       	push	r27
     608:	ef 93       	push	r30
     60a:	ff 93       	push	r31
Pin_Change_Interrupt_Request_1();
     60c:	e0 91 69 01 	lds	r30, 0x0169
     610:	f0 91 6a 01 	lds	r31, 0x016A
     614:	09 95       	icall
}
     616:	ff 91       	pop	r31
     618:	ef 91       	pop	r30
     61a:	bf 91       	pop	r27
     61c:	af 91       	pop	r26
     61e:	9f 91       	pop	r25
     620:	8f 91       	pop	r24
     622:	7f 91       	pop	r23
     624:	6f 91       	pop	r22
     626:	5f 91       	pop	r21
     628:	4f 91       	pop	r20
     62a:	3f 91       	pop	r19
     62c:	2f 91       	pop	r18
     62e:	0f 90       	pop	r0
     630:	0f be       	out	0x3f, r0	; 63
     632:	0f 90       	pop	r0
     634:	1f 90       	pop	r1
     636:	18 95       	reti

00000638 <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     638:	1f 92       	push	r1
     63a:	0f 92       	push	r0
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	0f 92       	push	r0
     640:	11 24       	eor	r1, r1
     642:	2f 93       	push	r18
     644:	3f 93       	push	r19
     646:	4f 93       	push	r20
     648:	5f 93       	push	r21
     64a:	6f 93       	push	r22
     64c:	7f 93       	push	r23
     64e:	8f 93       	push	r24
     650:	9f 93       	push	r25
     652:	af 93       	push	r26
     654:	bf 93       	push	r27
     656:	ef 93       	push	r30
     658:	ff 93       	push	r31
  Pin_Change_Interrupt_Request_2();
     65a:	e0 91 5b 01 	lds	r30, 0x015B
     65e:	f0 91 5c 01 	lds	r31, 0x015C
     662:	09 95       	icall
}
     664:	ff 91       	pop	r31
     666:	ef 91       	pop	r30
     668:	bf 91       	pop	r27
     66a:	af 91       	pop	r26
     66c:	9f 91       	pop	r25
     66e:	8f 91       	pop	r24
     670:	7f 91       	pop	r23
     672:	6f 91       	pop	r22
     674:	5f 91       	pop	r21
     676:	4f 91       	pop	r20
     678:	3f 91       	pop	r19
     67a:	2f 91       	pop	r18
     67c:	0f 90       	pop	r0
     67e:	0f be       	out	0x3f, r0	; 63
     680:	0f 90       	pop	r0
     682:	1f 90       	pop	r1
     684:	18 95       	reti

00000686 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     686:	1f 92       	push	r1
     688:	0f 92       	push	r0
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	0f 92       	push	r0
     68e:	11 24       	eor	r1, r1
     690:	2f 93       	push	r18
     692:	3f 93       	push	r19
     694:	4f 93       	push	r20
     696:	5f 93       	push	r21
     698:	6f 93       	push	r22
     69a:	7f 93       	push	r23
     69c:	8f 93       	push	r24
     69e:	9f 93       	push	r25
     6a0:	af 93       	push	r26
     6a2:	bf 93       	push	r27
     6a4:	ef 93       	push	r30
     6a6:	ff 93       	push	r31
  watch_dog_interrupt();
     6a8:	e0 91 4d 01 	lds	r30, 0x014D
     6ac:	f0 91 4e 01 	lds	r31, 0x014E
     6b0:	09 95       	icall
}
     6b2:	ff 91       	pop	r31
     6b4:	ef 91       	pop	r30
     6b6:	bf 91       	pop	r27
     6b8:	af 91       	pop	r26
     6ba:	9f 91       	pop	r25
     6bc:	8f 91       	pop	r24
     6be:	7f 91       	pop	r23
     6c0:	6f 91       	pop	r22
     6c2:	5f 91       	pop	r21
     6c4:	4f 91       	pop	r20
     6c6:	3f 91       	pop	r19
     6c8:	2f 91       	pop	r18
     6ca:	0f 90       	pop	r0
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	0f 90       	pop	r0
     6d0:	1f 90       	pop	r1
     6d2:	18 95       	reti

000006d4 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
     6d4:	1f 92       	push	r1
     6d6:	0f 92       	push	r0
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	0f 92       	push	r0
     6dc:	11 24       	eor	r1, r1
     6de:	2f 93       	push	r18
     6e0:	3f 93       	push	r19
     6e2:	4f 93       	push	r20
     6e4:	5f 93       	push	r21
     6e6:	6f 93       	push	r22
     6e8:	7f 93       	push	r23
     6ea:	8f 93       	push	r24
     6ec:	9f 93       	push	r25
     6ee:	af 93       	push	r26
     6f0:	bf 93       	push	r27
     6f2:	ef 93       	push	r30
     6f4:	ff 93       	push	r31
TIMER2COMPA();
     6f6:	e0 91 67 01 	lds	r30, 0x0167
     6fa:	f0 91 68 01 	lds	r31, 0x0168
     6fe:	09 95       	icall
}
     700:	ff 91       	pop	r31
     702:	ef 91       	pop	r30
     704:	bf 91       	pop	r27
     706:	af 91       	pop	r26
     708:	9f 91       	pop	r25
     70a:	8f 91       	pop	r24
     70c:	7f 91       	pop	r23
     70e:	6f 91       	pop	r22
     710:	5f 91       	pop	r21
     712:	4f 91       	pop	r20
     714:	3f 91       	pop	r19
     716:	2f 91       	pop	r18
     718:	0f 90       	pop	r0
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	0f 90       	pop	r0
     71e:	1f 90       	pop	r1
     720:	18 95       	reti

00000722 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
     722:	1f 92       	push	r1
     724:	0f 92       	push	r0
     726:	0f b6       	in	r0, 0x3f	; 63
     728:	0f 92       	push	r0
     72a:	11 24       	eor	r1, r1
     72c:	2f 93       	push	r18
     72e:	3f 93       	push	r19
     730:	4f 93       	push	r20
     732:	5f 93       	push	r21
     734:	6f 93       	push	r22
     736:	7f 93       	push	r23
     738:	8f 93       	push	r24
     73a:	9f 93       	push	r25
     73c:	af 93       	push	r26
     73e:	bf 93       	push	r27
     740:	ef 93       	push	r30
     742:	ff 93       	push	r31
  TIMER2COMPB();
     744:	e0 91 57 01 	lds	r30, 0x0157
     748:	f0 91 58 01 	lds	r31, 0x0158
     74c:	09 95       	icall
}
     74e:	ff 91       	pop	r31
     750:	ef 91       	pop	r30
     752:	bf 91       	pop	r27
     754:	af 91       	pop	r26
     756:	9f 91       	pop	r25
     758:	8f 91       	pop	r24
     75a:	7f 91       	pop	r23
     75c:	6f 91       	pop	r22
     75e:	5f 91       	pop	r21
     760:	4f 91       	pop	r20
     762:	3f 91       	pop	r19
     764:	2f 91       	pop	r18
     766:	0f 90       	pop	r0
     768:	0f be       	out	0x3f, r0	; 63
     76a:	0f 90       	pop	r0
     76c:	1f 90       	pop	r1
     76e:	18 95       	reti

00000770 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
     770:	1f 92       	push	r1
     772:	0f 92       	push	r0
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	0f 92       	push	r0
     778:	11 24       	eor	r1, r1
     77a:	2f 93       	push	r18
     77c:	3f 93       	push	r19
     77e:	4f 93       	push	r20
     780:	5f 93       	push	r21
     782:	6f 93       	push	r22
     784:	7f 93       	push	r23
     786:	8f 93       	push	r24
     788:	9f 93       	push	r25
     78a:	af 93       	push	r26
     78c:	bf 93       	push	r27
     78e:	ef 93       	push	r30
     790:	ff 93       	push	r31
  TIMER2OVF();
     792:	e0 91 17 01 	lds	r30, 0x0117
     796:	f0 91 18 01 	lds	r31, 0x0118
     79a:	09 95       	icall
}
     79c:	ff 91       	pop	r31
     79e:	ef 91       	pop	r30
     7a0:	bf 91       	pop	r27
     7a2:	af 91       	pop	r26
     7a4:	9f 91       	pop	r25
     7a6:	8f 91       	pop	r24
     7a8:	7f 91       	pop	r23
     7aa:	6f 91       	pop	r22
     7ac:	5f 91       	pop	r21
     7ae:	4f 91       	pop	r20
     7b0:	3f 91       	pop	r19
     7b2:	2f 91       	pop	r18
     7b4:	0f 90       	pop	r0
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	0f 90       	pop	r0
     7ba:	1f 90       	pop	r1
     7bc:	18 95       	reti

000007be <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     7be:	1f 92       	push	r1
     7c0:	0f 92       	push	r0
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	0f 92       	push	r0
     7c6:	11 24       	eor	r1, r1
     7c8:	2f 93       	push	r18
     7ca:	3f 93       	push	r19
     7cc:	4f 93       	push	r20
     7ce:	5f 93       	push	r21
     7d0:	6f 93       	push	r22
     7d2:	7f 93       	push	r23
     7d4:	8f 93       	push	r24
     7d6:	9f 93       	push	r25
     7d8:	af 93       	push	r26
     7da:	bf 93       	push	r27
     7dc:	ef 93       	push	r30
     7de:	ff 93       	push	r31

  TIMER1CAPT();
     7e0:	e0 91 73 01 	lds	r30, 0x0173
     7e4:	f0 91 74 01 	lds	r31, 0x0174
     7e8:	09 95       	icall
}
     7ea:	ff 91       	pop	r31
     7ec:	ef 91       	pop	r30
     7ee:	bf 91       	pop	r27
     7f0:	af 91       	pop	r26
     7f2:	9f 91       	pop	r25
     7f4:	8f 91       	pop	r24
     7f6:	7f 91       	pop	r23
     7f8:	6f 91       	pop	r22
     7fa:	5f 91       	pop	r21
     7fc:	4f 91       	pop	r20
     7fe:	3f 91       	pop	r19
     800:	2f 91       	pop	r18
     802:	0f 90       	pop	r0
     804:	0f be       	out	0x3f, r0	; 63
     806:	0f 90       	pop	r0
     808:	1f 90       	pop	r1
     80a:	18 95       	reti

0000080c <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     80c:	1f 92       	push	r1
     80e:	0f 92       	push	r0
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	0f 92       	push	r0
     814:	11 24       	eor	r1, r1
     816:	2f 93       	push	r18
     818:	3f 93       	push	r19
     81a:	4f 93       	push	r20
     81c:	5f 93       	push	r21
     81e:	6f 93       	push	r22
     820:	7f 93       	push	r23
     822:	8f 93       	push	r24
     824:	9f 93       	push	r25
     826:	af 93       	push	r26
     828:	bf 93       	push	r27
     82a:	ef 93       	push	r30
     82c:	ff 93       	push	r31

  TIMER1COMPA();
     82e:	e0 91 53 01 	lds	r30, 0x0153
     832:	f0 91 54 01 	lds	r31, 0x0154
     836:	09 95       	icall
}
     838:	ff 91       	pop	r31
     83a:	ef 91       	pop	r30
     83c:	bf 91       	pop	r27
     83e:	af 91       	pop	r26
     840:	9f 91       	pop	r25
     842:	8f 91       	pop	r24
     844:	7f 91       	pop	r23
     846:	6f 91       	pop	r22
     848:	5f 91       	pop	r21
     84a:	4f 91       	pop	r20
     84c:	3f 91       	pop	r19
     84e:	2f 91       	pop	r18
     850:	0f 90       	pop	r0
     852:	0f be       	out	0x3f, r0	; 63
     854:	0f 90       	pop	r0
     856:	1f 90       	pop	r1
     858:	18 95       	reti

0000085a <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
     85a:	1f 92       	push	r1
     85c:	0f 92       	push	r0
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	0f 92       	push	r0
     862:	11 24       	eor	r1, r1
     864:	2f 93       	push	r18
     866:	3f 93       	push	r19
     868:	4f 93       	push	r20
     86a:	5f 93       	push	r21
     86c:	6f 93       	push	r22
     86e:	7f 93       	push	r23
     870:	8f 93       	push	r24
     872:	9f 93       	push	r25
     874:	af 93       	push	r26
     876:	bf 93       	push	r27
     878:	ef 93       	push	r30
     87a:	ff 93       	push	r31
  TIMER1COMPB();
     87c:	e0 91 51 01 	lds	r30, 0x0151
     880:	f0 91 52 01 	lds	r31, 0x0152
     884:	09 95       	icall
}
     886:	ff 91       	pop	r31
     888:	ef 91       	pop	r30
     88a:	bf 91       	pop	r27
     88c:	af 91       	pop	r26
     88e:	9f 91       	pop	r25
     890:	8f 91       	pop	r24
     892:	7f 91       	pop	r23
     894:	6f 91       	pop	r22
     896:	5f 91       	pop	r21
     898:	4f 91       	pop	r20
     89a:	3f 91       	pop	r19
     89c:	2f 91       	pop	r18
     89e:	0f 90       	pop	r0
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	0f 90       	pop	r0
     8a4:	1f 90       	pop	r1
     8a6:	18 95       	reti

000008a8 <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     8a8:	1f 92       	push	r1
     8aa:	0f 92       	push	r0
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	0f 92       	push	r0
     8b0:	11 24       	eor	r1, r1
     8b2:	2f 93       	push	r18
     8b4:	3f 93       	push	r19
     8b6:	4f 93       	push	r20
     8b8:	5f 93       	push	r21
     8ba:	6f 93       	push	r22
     8bc:	7f 93       	push	r23
     8be:	8f 93       	push	r24
     8c0:	9f 93       	push	r25
     8c2:	af 93       	push	r26
     8c4:	bf 93       	push	r27
     8c6:	ef 93       	push	r30
     8c8:	ff 93       	push	r31
  TIMER1OVF();
     8ca:	e0 91 15 01 	lds	r30, 0x0115
     8ce:	f0 91 16 01 	lds	r31, 0x0116
     8d2:	09 95       	icall
}
     8d4:	ff 91       	pop	r31
     8d6:	ef 91       	pop	r30
     8d8:	bf 91       	pop	r27
     8da:	af 91       	pop	r26
     8dc:	9f 91       	pop	r25
     8de:	8f 91       	pop	r24
     8e0:	7f 91       	pop	r23
     8e2:	6f 91       	pop	r22
     8e4:	5f 91       	pop	r21
     8e6:	4f 91       	pop	r20
     8e8:	3f 91       	pop	r19
     8ea:	2f 91       	pop	r18
     8ec:	0f 90       	pop	r0
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	0f 90       	pop	r0
     8f2:	1f 90       	pop	r1
     8f4:	18 95       	reti

000008f6 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
     8f6:	1f 92       	push	r1
     8f8:	0f 92       	push	r0
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	0f 92       	push	r0
     8fe:	11 24       	eor	r1, r1
     900:	2f 93       	push	r18
     902:	3f 93       	push	r19
     904:	4f 93       	push	r20
     906:	5f 93       	push	r21
     908:	6f 93       	push	r22
     90a:	7f 93       	push	r23
     90c:	8f 93       	push	r24
     90e:	9f 93       	push	r25
     910:	af 93       	push	r26
     912:	bf 93       	push	r27
     914:	ef 93       	push	r30
     916:	ff 93       	push	r31
  TIMER0COMPA();
     918:	e0 91 71 01 	lds	r30, 0x0171
     91c:	f0 91 72 01 	lds	r31, 0x0172
     920:	09 95       	icall
}
     922:	ff 91       	pop	r31
     924:	ef 91       	pop	r30
     926:	bf 91       	pop	r27
     928:	af 91       	pop	r26
     92a:	9f 91       	pop	r25
     92c:	8f 91       	pop	r24
     92e:	7f 91       	pop	r23
     930:	6f 91       	pop	r22
     932:	5f 91       	pop	r21
     934:	4f 91       	pop	r20
     936:	3f 91       	pop	r19
     938:	2f 91       	pop	r18
     93a:	0f 90       	pop	r0
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	0f 90       	pop	r0
     940:	1f 90       	pop	r1
     942:	18 95       	reti

00000944 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
     944:	1f 92       	push	r1
     946:	0f 92       	push	r0
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	0f 92       	push	r0
     94c:	11 24       	eor	r1, r1
     94e:	2f 93       	push	r18
     950:	3f 93       	push	r19
     952:	4f 93       	push	r20
     954:	5f 93       	push	r21
     956:	6f 93       	push	r22
     958:	7f 93       	push	r23
     95a:	8f 93       	push	r24
     95c:	9f 93       	push	r25
     95e:	af 93       	push	r26
     960:	bf 93       	push	r27
     962:	ef 93       	push	r30
     964:	ff 93       	push	r31
  TIMER0COMPB();
     966:	e0 91 61 01 	lds	r30, 0x0161
     96a:	f0 91 62 01 	lds	r31, 0x0162
     96e:	09 95       	icall
}
     970:	ff 91       	pop	r31
     972:	ef 91       	pop	r30
     974:	bf 91       	pop	r27
     976:	af 91       	pop	r26
     978:	9f 91       	pop	r25
     97a:	8f 91       	pop	r24
     97c:	7f 91       	pop	r23
     97e:	6f 91       	pop	r22
     980:	5f 91       	pop	r21
     982:	4f 91       	pop	r20
     984:	3f 91       	pop	r19
     986:	2f 91       	pop	r18
     988:	0f 90       	pop	r0
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	0f 90       	pop	r0
     98e:	1f 90       	pop	r1
     990:	18 95       	reti

00000992 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     992:	1f 92       	push	r1
     994:	0f 92       	push	r0
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	0f 92       	push	r0
     99a:	11 24       	eor	r1, r1
     99c:	2f 93       	push	r18
     99e:	3f 93       	push	r19
     9a0:	4f 93       	push	r20
     9a2:	5f 93       	push	r21
     9a4:	6f 93       	push	r22
     9a6:	7f 93       	push	r23
     9a8:	8f 93       	push	r24
     9aa:	9f 93       	push	r25
     9ac:	af 93       	push	r26
     9ae:	bf 93       	push	r27
     9b0:	ef 93       	push	r30
     9b2:	ff 93       	push	r31
  TIMER0OVF_INT();
     9b4:	e0 91 5d 01 	lds	r30, 0x015D
     9b8:	f0 91 5e 01 	lds	r31, 0x015E
     9bc:	09 95       	icall
}
     9be:	ff 91       	pop	r31
     9c0:	ef 91       	pop	r30
     9c2:	bf 91       	pop	r27
     9c4:	af 91       	pop	r26
     9c6:	9f 91       	pop	r25
     9c8:	8f 91       	pop	r24
     9ca:	7f 91       	pop	r23
     9cc:	6f 91       	pop	r22
     9ce:	5f 91       	pop	r21
     9d0:	4f 91       	pop	r20
     9d2:	3f 91       	pop	r19
     9d4:	2f 91       	pop	r18
     9d6:	0f 90       	pop	r0
     9d8:	0f be       	out	0x3f, r0	; 63
     9da:	0f 90       	pop	r0
     9dc:	1f 90       	pop	r1
     9de:	18 95       	reti

000009e0 <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
     9e0:	1f 92       	push	r1
     9e2:	0f 92       	push	r0
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	0f 92       	push	r0
     9e8:	11 24       	eor	r1, r1
     9ea:	2f 93       	push	r18
     9ec:	3f 93       	push	r19
     9ee:	4f 93       	push	r20
     9f0:	5f 93       	push	r21
     9f2:	6f 93       	push	r22
     9f4:	7f 93       	push	r23
     9f6:	8f 93       	push	r24
     9f8:	9f 93       	push	r25
     9fa:	af 93       	push	r26
     9fc:	bf 93       	push	r27
     9fe:	ef 93       	push	r30
     a00:	ff 93       	push	r31
  SPI_STC();
     a02:	e0 91 59 01 	lds	r30, 0x0159
     a06:	f0 91 5a 01 	lds	r31, 0x015A
     a0a:	09 95       	icall
}
     a0c:	ff 91       	pop	r31
     a0e:	ef 91       	pop	r30
     a10:	bf 91       	pop	r27
     a12:	af 91       	pop	r26
     a14:	9f 91       	pop	r25
     a16:	8f 91       	pop	r24
     a18:	7f 91       	pop	r23
     a1a:	6f 91       	pop	r22
     a1c:	5f 91       	pop	r21
     a1e:	4f 91       	pop	r20
     a20:	3f 91       	pop	r19
     a22:	2f 91       	pop	r18
     a24:	0f 90       	pop	r0
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	0f 90       	pop	r0
     a2a:	1f 90       	pop	r1
     a2c:	18 95       	reti

00000a2e <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
     a2e:	1f 92       	push	r1
     a30:	0f 92       	push	r0
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	0f 92       	push	r0
     a36:	11 24       	eor	r1, r1
     a38:	2f 93       	push	r18
     a3a:	3f 93       	push	r19
     a3c:	4f 93       	push	r20
     a3e:	5f 93       	push	r21
     a40:	6f 93       	push	r22
     a42:	7f 93       	push	r23
     a44:	8f 93       	push	r24
     a46:	9f 93       	push	r25
     a48:	af 93       	push	r26
     a4a:	bf 93       	push	r27
     a4c:	ef 93       	push	r30
     a4e:	ff 93       	push	r31
  USART_RXC();
     a50:	e0 91 4b 01 	lds	r30, 0x014B
     a54:	f0 91 4c 01 	lds	r31, 0x014C
     a58:	09 95       	icall
}
     a5a:	ff 91       	pop	r31
     a5c:	ef 91       	pop	r30
     a5e:	bf 91       	pop	r27
     a60:	af 91       	pop	r26
     a62:	9f 91       	pop	r25
     a64:	8f 91       	pop	r24
     a66:	7f 91       	pop	r23
     a68:	6f 91       	pop	r22
     a6a:	5f 91       	pop	r21
     a6c:	4f 91       	pop	r20
     a6e:	3f 91       	pop	r19
     a70:	2f 91       	pop	r18
     a72:	0f 90       	pop	r0
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	0f 90       	pop	r0
     a78:	1f 90       	pop	r1
     a7a:	18 95       	reti

00000a7c <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
     a7c:	1f 92       	push	r1
     a7e:	0f 92       	push	r0
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	0f 92       	push	r0
     a84:	11 24       	eor	r1, r1
     a86:	2f 93       	push	r18
     a88:	3f 93       	push	r19
     a8a:	4f 93       	push	r20
     a8c:	5f 93       	push	r21
     a8e:	6f 93       	push	r22
     a90:	7f 93       	push	r23
     a92:	8f 93       	push	r24
     a94:	9f 93       	push	r25
     a96:	af 93       	push	r26
     a98:	bf 93       	push	r27
     a9a:	ef 93       	push	r30
     a9c:	ff 93       	push	r31
  USART_UDRE();
     a9e:	e0 91 6d 01 	lds	r30, 0x016D
     aa2:	f0 91 6e 01 	lds	r31, 0x016E
     aa6:	09 95       	icall
}
     aa8:	ff 91       	pop	r31
     aaa:	ef 91       	pop	r30
     aac:	bf 91       	pop	r27
     aae:	af 91       	pop	r26
     ab0:	9f 91       	pop	r25
     ab2:	8f 91       	pop	r24
     ab4:	7f 91       	pop	r23
     ab6:	6f 91       	pop	r22
     ab8:	5f 91       	pop	r21
     aba:	4f 91       	pop	r20
     abc:	3f 91       	pop	r19
     abe:	2f 91       	pop	r18
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti

00000aca <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	2f 93       	push	r18
     ad6:	3f 93       	push	r19
     ad8:	4f 93       	push	r20
     ada:	5f 93       	push	r21
     adc:	6f 93       	push	r22
     ade:	7f 93       	push	r23
     ae0:	8f 93       	push	r24
     ae2:	9f 93       	push	r25
     ae4:	af 93       	push	r26
     ae6:	bf 93       	push	r27
     ae8:	ef 93       	push	r30
     aea:	ff 93       	push	r31
  USART_TXC();
     aec:	e0 91 6b 01 	lds	r30, 0x016B
     af0:	f0 91 6c 01 	lds	r31, 0x016C
     af4:	09 95       	icall
}
     af6:	ff 91       	pop	r31
     af8:	ef 91       	pop	r30
     afa:	bf 91       	pop	r27
     afc:	af 91       	pop	r26
     afe:	9f 91       	pop	r25
     b00:	8f 91       	pop	r24
     b02:	7f 91       	pop	r23
     b04:	6f 91       	pop	r22
     b06:	5f 91       	pop	r21
     b08:	4f 91       	pop	r20
     b0a:	3f 91       	pop	r19
     b0c:	2f 91       	pop	r18
     b0e:	0f 90       	pop	r0
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	0f 90       	pop	r0
     b14:	1f 90       	pop	r1
     b16:	18 95       	reti

00000b18 <__vector_21>:

void __vector_21(void) __attribute__((signal));
void __vector_21(void)
{
     b18:	1f 92       	push	r1
     b1a:	0f 92       	push	r0
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	0f 92       	push	r0
     b20:	11 24       	eor	r1, r1
     b22:	2f 93       	push	r18
     b24:	3f 93       	push	r19
     b26:	4f 93       	push	r20
     b28:	5f 93       	push	r21
     b2a:	6f 93       	push	r22
     b2c:	7f 93       	push	r23
     b2e:	8f 93       	push	r24
     b30:	9f 93       	push	r25
     b32:	af 93       	push	r26
     b34:	bf 93       	push	r27
     b36:	ef 93       	push	r30
     b38:	ff 93       	push	r31
  ADC_INT();
     b3a:	e0 91 63 01 	lds	r30, 0x0163
     b3e:	f0 91 64 01 	lds	r31, 0x0164
     b42:	09 95       	icall
}
     b44:	ff 91       	pop	r31
     b46:	ef 91       	pop	r30
     b48:	bf 91       	pop	r27
     b4a:	af 91       	pop	r26
     b4c:	9f 91       	pop	r25
     b4e:	8f 91       	pop	r24
     b50:	7f 91       	pop	r23
     b52:	6f 91       	pop	r22
     b54:	5f 91       	pop	r21
     b56:	4f 91       	pop	r20
     b58:	3f 91       	pop	r19
     b5a:	2f 91       	pop	r18
     b5c:	0f 90       	pop	r0
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	0f 90       	pop	r0
     b62:	1f 90       	pop	r1
     b64:	18 95       	reti

00000b66 <__vector_22>:

void __vector_22(void) __attribute__((signal));
void __vector_22(void)
{
     b66:	1f 92       	push	r1
     b68:	0f 92       	push	r0
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	0f 92       	push	r0
     b6e:	11 24       	eor	r1, r1
     b70:	2f 93       	push	r18
     b72:	3f 93       	push	r19
     b74:	4f 93       	push	r20
     b76:	5f 93       	push	r21
     b78:	6f 93       	push	r22
     b7a:	7f 93       	push	r23
     b7c:	8f 93       	push	r24
     b7e:	9f 93       	push	r25
     b80:	af 93       	push	r26
     b82:	bf 93       	push	r27
     b84:	ef 93       	push	r30
     b86:	ff 93       	push	r31
  EE_RDY();
     b88:	e0 91 65 01 	lds	r30, 0x0165
     b8c:	f0 91 66 01 	lds	r31, 0x0166
     b90:	09 95       	icall
}
     b92:	ff 91       	pop	r31
     b94:	ef 91       	pop	r30
     b96:	bf 91       	pop	r27
     b98:	af 91       	pop	r26
     b9a:	9f 91       	pop	r25
     b9c:	8f 91       	pop	r24
     b9e:	7f 91       	pop	r23
     ba0:	6f 91       	pop	r22
     ba2:	5f 91       	pop	r21
     ba4:	4f 91       	pop	r20
     ba6:	3f 91       	pop	r19
     ba8:	2f 91       	pop	r18
     baa:	0f 90       	pop	r0
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	0f 90       	pop	r0
     bb0:	1f 90       	pop	r1
     bb2:	18 95       	reti

00000bb4 <__vector_23>:

void __vector_23(void) __attribute__((signal));
void __vector_23(void)
{
     bb4:	1f 92       	push	r1
     bb6:	0f 92       	push	r0
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	0f 92       	push	r0
     bbc:	11 24       	eor	r1, r1
     bbe:	2f 93       	push	r18
     bc0:	3f 93       	push	r19
     bc2:	4f 93       	push	r20
     bc4:	5f 93       	push	r21
     bc6:	6f 93       	push	r22
     bc8:	7f 93       	push	r23
     bca:	8f 93       	push	r24
     bcc:	9f 93       	push	r25
     bce:	af 93       	push	r26
     bd0:	bf 93       	push	r27
     bd2:	ef 93       	push	r30
     bd4:	ff 93       	push	r31
  ANA_COMP();
     bd6:	e0 91 5f 01 	lds	r30, 0x015F
     bda:	f0 91 60 01 	lds	r31, 0x0160
     bde:	09 95       	icall
}
     be0:	ff 91       	pop	r31
     be2:	ef 91       	pop	r30
     be4:	bf 91       	pop	r27
     be6:	af 91       	pop	r26
     be8:	9f 91       	pop	r25
     bea:	8f 91       	pop	r24
     bec:	7f 91       	pop	r23
     bee:	6f 91       	pop	r22
     bf0:	5f 91       	pop	r21
     bf2:	4f 91       	pop	r20
     bf4:	3f 91       	pop	r19
     bf6:	2f 91       	pop	r18
     bf8:	0f 90       	pop	r0
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	0f 90       	pop	r0
     bfe:	1f 90       	pop	r1
     c00:	18 95       	reti

00000c02 <__vector_24>:

void __vector_24(void) __attribute__((signal));
void __vector_24(void)
{
     c02:	1f 92       	push	r1
     c04:	0f 92       	push	r0
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	0f 92       	push	r0
     c0a:	11 24       	eor	r1, r1
     c0c:	2f 93       	push	r18
     c0e:	3f 93       	push	r19
     c10:	4f 93       	push	r20
     c12:	5f 93       	push	r21
     c14:	6f 93       	push	r22
     c16:	7f 93       	push	r23
     c18:	8f 93       	push	r24
     c1a:	9f 93       	push	r25
     c1c:	af 93       	push	r26
     c1e:	bf 93       	push	r27
     c20:	ef 93       	push	r30
     c22:	ff 93       	push	r31
  TWI_I2C();
     c24:	e0 91 49 01 	lds	r30, 0x0149
     c28:	f0 91 4a 01 	lds	r31, 0x014A
     c2c:	09 95       	icall
}
     c2e:	ff 91       	pop	r31
     c30:	ef 91       	pop	r30
     c32:	bf 91       	pop	r27
     c34:	af 91       	pop	r26
     c36:	9f 91       	pop	r25
     c38:	8f 91       	pop	r24
     c3a:	7f 91       	pop	r23
     c3c:	6f 91       	pop	r22
     c3e:	5f 91       	pop	r21
     c40:	4f 91       	pop	r20
     c42:	3f 91       	pop	r19
     c44:	2f 91       	pop	r18
     c46:	0f 90       	pop	r0
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	0f 90       	pop	r0
     c4c:	1f 90       	pop	r1
     c4e:	18 95       	reti

00000c50 <__vector_25>:

void __vector_25(void) __attribute__((signal));
void __vector_25(void)
{
     c50:	1f 92       	push	r1
     c52:	0f 92       	push	r0
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	0f 92       	push	r0
     c58:	11 24       	eor	r1, r1
     c5a:	2f 93       	push	r18
     c5c:	3f 93       	push	r19
     c5e:	4f 93       	push	r20
     c60:	5f 93       	push	r21
     c62:	6f 93       	push	r22
     c64:	7f 93       	push	r23
     c66:	8f 93       	push	r24
     c68:	9f 93       	push	r25
     c6a:	af 93       	push	r26
     c6c:	bf 93       	push	r27
     c6e:	ef 93       	push	r30
     c70:	ff 93       	push	r31
  SPM_RDY();
     c72:	e0 91 4f 01 	lds	r30, 0x014F
     c76:	f0 91 50 01 	lds	r31, 0x0150
     c7a:	09 95       	icall
}
     c7c:	ff 91       	pop	r31
     c7e:	ef 91       	pop	r30
     c80:	bf 91       	pop	r27
     c82:	af 91       	pop	r26
     c84:	9f 91       	pop	r25
     c86:	8f 91       	pop	r24
     c88:	7f 91       	pop	r23
     c8a:	6f 91       	pop	r22
     c8c:	5f 91       	pop	r21
     c8e:	4f 91       	pop	r20
     c90:	3f 91       	pop	r19
     c92:	2f 91       	pop	r18
     c94:	0f 90       	pop	r0
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	0f 90       	pop	r0
     c9a:	1f 90       	pop	r1
     c9c:	18 95       	reti

00000c9e <main>:
/*	DIO_init(&Dio_configurationD);
	motor_init();
	DIO_Write(GPIOD,PIN6,HIGH);
    Us_Init();
	*/
system_init();
     c9e:	0e 94 45 01 	call	0x28a	; 0x28a <system_init>
		/*
	Pwm_Start(PWM_CH0,60,10);
	Us_Trigger();
	Us_GetDistance(&timespend);
*/
		system_update();
     ca2:	0e 94 4c 01 	call	0x298	; 0x298 <system_update>
     ca6:	fd cf       	rjmp	.-6      	; 0xca2 <main+0x4>

00000ca8 <motor_init>:


ERROR_STATUS motor_init(void)
{
uint8_t ret =E_OK;
ret=DIO_init(&motor_Configuration_0);
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_init>
ret=Pwm_Init(&PWM_Configuration_0);
     cb0:	8d e1       	ldi	r24, 0x1D	; 29
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Pwm_Init>
return ret;
}
     cb8:	08 95       	ret

00000cba <motor_start_sm>:
  break;
}


  return ret;
}
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	08 95       	ret

00000cbe <Pwm_Init>:
/* Return type : void                                                            */
/*                                                                               */
/* Description: initialize the PWM configuration                                 */
/*********************************************************************************/
ERROR_STATUS Pwm_Init(Pwm_Cfg_s *Pwm_Cfg)
{
     cbe:	fc 01       	movw	r30, r24
  uint8_t Ret=0;
  switch(Pwm_Cfg->Channel)
     cc0:	80 81       	ld	r24, Z
     cc2:	88 23       	and	r24, r24
     cc4:	29 f4       	brne	.+10     	; 0xcd0 <Pwm_Init+0x12>
    {
      case PWM_CH0:
      TCCR0|=T0_PWM_FAST |T0_NON_INVERTING;
     cc6:	84 b5       	in	r24, 0x24	; 36
     cc8:	95 b5       	in	r25, 0x25	; 37
     cca:	83 68       	ori	r24, 0x83	; 131
     ccc:	95 bd       	out	0x25, r25	; 37
     cce:	84 bd       	out	0x24, r24	; 36
      break;
      default:
      Ret=E_NOK;
      break;*/
    }
  sgl_Prescaler=Pwm_Cfg->Prescaler;
     cd0:	81 81       	ldd	r24, Z+1	; 0x01
     cd2:	80 93 3f 01 	sts	0x013F, r24
  u32g_T1_Prescaler=en_prescal;
  OCR1A =u16_outputCompareA;
  OCR1B =u16_outputCompareB;
  TCNT1=u16_initialValue;
  */
}
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	08 95       	ret

00000cda <Pwm_Start>:
/*-------------------------------------------------------                        */
/*((all this calculations are for phase correct mode))                           */
/*all this calculation for F_CPU 16MHz                                           */
/*********************************************************************************/
ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{uint8_t Ret=0;
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	96 2f       	mov	r25, r22
     ce0:	ba 01       	movw	r22, r20
     ce2:	a9 01       	movw	r20, r18
  float dutyReal;
uint32_t pwm_time_on = MAX_HOLD;

if(Frequncy <= 31372 && Frequncy > 3921 )
     ce4:	8a 01       	movw	r16, r20
     ce6:	9b 01       	movw	r18, r22
     ce8:	02 55       	subi	r16, 0x52	; 82
     cea:	1f 40       	sbci	r17, 0x0F	; 15
     cec:	20 40       	sbci	r18, 0x00	; 0
     cee:	30 40       	sbci	r19, 0x00	; 0
     cf0:	0b 33       	cpi	r16, 0x3B	; 59
     cf2:	eb e6       	ldi	r30, 0x6B	; 107
     cf4:	1e 07       	cpc	r17, r30
     cf6:	e0 e0       	ldi	r30, 0x00	; 0
     cf8:	2e 07       	cpc	r18, r30
     cfa:	e0 e0       	ldi	r30, 0x00	; 0
     cfc:	3e 07       	cpc	r19, r30
     cfe:	18 f4       	brcc	.+6      	; 0xd06 <Pwm_Start+0x2c>
  sgl_Prescaler=PWM_PRESCALER_NO;
     d00:	10 92 3f 01 	sts	0x013F, r1
     d04:	64 c0       	rjmp	.+200    	; 0xdce <Pwm_Start+0xf4>
else if(Frequncy <= 3921 && Frequncy > 980)
     d06:	8a 01       	movw	r16, r20
     d08:	9b 01       	movw	r18, r22
     d0a:	05 5d       	subi	r16, 0xD5	; 213
     d0c:	13 40       	sbci	r17, 0x03	; 3
     d0e:	20 40       	sbci	r18, 0x00	; 0
     d10:	30 40       	sbci	r19, 0x00	; 0
     d12:	0d 37       	cpi	r16, 0x7D	; 125
     d14:	eb e0       	ldi	r30, 0x0B	; 11
     d16:	1e 07       	cpc	r17, r30
     d18:	e0 e0       	ldi	r30, 0x00	; 0
     d1a:	2e 07       	cpc	r18, r30
     d1c:	e0 e0       	ldi	r30, 0x00	; 0
     d1e:	3e 07       	cpc	r19, r30
     d20:	20 f4       	brcc	.+8      	; 0xd2a <Pwm_Start+0x50>
  sgl_Prescaler=PWM_PRESCALER_8;
     d22:	21 e0       	ldi	r18, 0x01	; 1
     d24:	20 93 3f 01 	sts	0x013F, r18
     d28:	58 c0       	rjmp	.+176    	; 0xdda <Pwm_Start+0x100>
else if(Frequncy <= 980 && Frequncy > 490)
     d2a:	8a 01       	movw	r16, r20
     d2c:	9b 01       	movw	r18, r22
     d2e:	0b 5e       	subi	r16, 0xEB	; 235
     d30:	11 40       	sbci	r17, 0x01	; 1
     d32:	20 40       	sbci	r18, 0x00	; 0
     d34:	30 40       	sbci	r19, 0x00	; 0
     d36:	0a 3e       	cpi	r16, 0xEA	; 234
     d38:	e1 e0       	ldi	r30, 0x01	; 1
     d3a:	1e 07       	cpc	r17, r30
     d3c:	e0 e0       	ldi	r30, 0x00	; 0
     d3e:	2e 07       	cpc	r18, r30
     d40:	e0 e0       	ldi	r30, 0x00	; 0
     d42:	3e 07       	cpc	r19, r30
     d44:	20 f4       	brcc	.+8      	; 0xd4e <Pwm_Start+0x74>
  sgl_Prescaler=PWM_PRESCALER_32;
     d46:	22 e0       	ldi	r18, 0x02	; 2
     d48:	20 93 3f 01 	sts	0x013F, r18
     d4c:	4c c0       	rjmp	.+152    	; 0xde6 <Pwm_Start+0x10c>
else if(Frequncy <= 490 && Frequncy > 122)
     d4e:	8a 01       	movw	r16, r20
     d50:	9b 01       	movw	r18, r22
     d52:	0b 57       	subi	r16, 0x7B	; 123
     d54:	10 40       	sbci	r17, 0x00	; 0
     d56:	20 40       	sbci	r18, 0x00	; 0
     d58:	30 40       	sbci	r19, 0x00	; 0
     d5a:	00 37       	cpi	r16, 0x70	; 112
     d5c:	e1 e0       	ldi	r30, 0x01	; 1
     d5e:	1e 07       	cpc	r17, r30
     d60:	e0 e0       	ldi	r30, 0x00	; 0
     d62:	2e 07       	cpc	r18, r30
     d64:	e0 e0       	ldi	r30, 0x00	; 0
     d66:	3e 07       	cpc	r19, r30
     d68:	20 f4       	brcc	.+8      	; 0xd72 <Pwm_Start+0x98>
  sgl_Prescaler=PWM_PRESCALER_64;
     d6a:	23 e0       	ldi	r18, 0x03	; 3
     d6c:	20 93 3f 01 	sts	0x013F, r18
     d70:	45 c0       	rjmp	.+138    	; 0xdfc <Pwm_Start+0x122>
else if(Frequncy <= 122 && Frequncy > 31)
     d72:	8a 01       	movw	r16, r20
     d74:	9b 01       	movw	r18, r22
     d76:	00 52       	subi	r16, 0x20	; 32
     d78:	10 40       	sbci	r17, 0x00	; 0
     d7a:	20 40       	sbci	r18, 0x00	; 0
     d7c:	30 40       	sbci	r19, 0x00	; 0
     d7e:	0b 35       	cpi	r16, 0x5B	; 91
     d80:	11 05       	cpc	r17, r1
     d82:	21 05       	cpc	r18, r1
     d84:	31 05       	cpc	r19, r1
     d86:	20 f4       	brcc	.+8      	; 0xd90 <Pwm_Start+0xb6>
  sgl_Prescaler=PWM_PRESCALER_256;
     d88:	24 e0       	ldi	r18, 0x04	; 4
     d8a:	20 93 3f 01 	sts	0x013F, r18
     d8e:	3c c0       	rjmp	.+120    	; 0xe08 <Pwm_Start+0x12e>
else if(Frequncy <= 31 && Frequncy > 0)
     d90:	41 50       	subi	r20, 0x01	; 1
     d92:	50 40       	sbci	r21, 0x00	; 0
     d94:	60 40       	sbci	r22, 0x00	; 0
     d96:	70 40       	sbci	r23, 0x00	; 0
     d98:	4f 31       	cpi	r20, 0x1F	; 31
     d9a:	51 05       	cpc	r21, r1
     d9c:	61 05       	cpc	r22, r1
     d9e:	71 05       	cpc	r23, r1
     da0:	20 f4       	brcc	.+8      	; 0xdaa <Pwm_Start+0xd0>
  sgl_Prescaler=PWM_PRESCALER_1024;
     da2:	25 e0       	ldi	r18, 0x05	; 5
     da4:	20 93 3f 01 	sts	0x013F, r18
     da8:	35 c0       	rjmp	.+106    	; 0xe14 <Pwm_Start+0x13a>
else{Ret=E_NOK;}
switch(sgl_Prescaler)
     daa:	20 91 3f 01 	lds	r18, 0x013F
     dae:	22 30       	cpi	r18, 0x02	; 2
     db0:	d1 f0       	breq	.+52     	; 0xde6 <Pwm_Start+0x10c>
     db2:	23 30       	cpi	r18, 0x03	; 3
     db4:	28 f4       	brcc	.+10     	; 0xdc0 <Pwm_Start+0xe6>
     db6:	22 23       	and	r18, r18
     db8:	51 f0       	breq	.+20     	; 0xdce <Pwm_Start+0xf4>
     dba:	21 30       	cpi	r18, 0x01	; 1
     dbc:	89 f5       	brne	.+98     	; 0xe20 <Pwm_Start+0x146>
     dbe:	0d c0       	rjmp	.+26     	; 0xdda <Pwm_Start+0x100>
     dc0:	24 30       	cpi	r18, 0x04	; 4
     dc2:	11 f1       	breq	.+68     	; 0xe08 <Pwm_Start+0x12e>
     dc4:	24 30       	cpi	r18, 0x04	; 4
     dc6:	d0 f0       	brcs	.+52     	; 0xdfc <Pwm_Start+0x122>
     dc8:	25 30       	cpi	r18, 0x05	; 5
     dca:	51 f5       	brne	.+84     	; 0xe20 <Pwm_Start+0x146>
     dcc:	23 c0       	rjmp	.+70     	; 0xe14 <Pwm_Start+0x13a>
{
  case PWM_PRESCALER_NO:
  {
    switch(Channel)
     dce:	88 23       	and	r24, r24
     dd0:	39 f5       	brne	.+78     	; 0xe20 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B |= PWM_PRESCALER_NO_CONFIG;
     dd2:	85 b5       	in	r24, 0x25	; 37
     dd4:	81 60       	ori	r24, 0x01	; 1
     dd6:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     dd8:	25 c0       	rjmp	.+74     	; 0xe24 <Pwm_Start+0x14a>
  }


  case PWM_PRESCALER_8:
  {
    switch(Channel)
     dda:	88 23       	and	r24, r24
     ddc:	09 f5       	brne	.+66     	; 0xe20 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_8_CONFIG;
     dde:	85 b5       	in	r24, 0x25	; 37
     de0:	82 60       	ori	r24, 0x02	; 2
     de2:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     de4:	1f c0       	rjmp	.+62     	; 0xe24 <Pwm_Start+0x14a>
    break;
  }

  case PWM_PRESCALER_32:
  {
    switch(Channel)
     de6:	83 30       	cpi	r24, 0x03	; 3
     de8:	d9 f4       	brne	.+54     	; 0xe20 <Pwm_Start+0x146>
    {
      case PWM_CH2:
      {TCCR2|=PWM_PRESCALER_32_CONFIG_T2;
     dea:	e0 eb       	ldi	r30, 0xB0	; 176
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	91 81       	ldd	r25, Z+1	; 0x01
     df2:	83 60       	ori	r24, 0x03	; 3
     df4:	91 83       	std	Z+1, r25	; 0x01
     df6:	80 83       	st	Z, r24
      Ret=E_OK;
      }
      break;
  */
      default:
      Ret=E_NOK;
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	2f c0       	rjmp	.+94     	; 0xe5a <Pwm_Start+0x180>
    break;
  }

  case PWM_PRESCALER_64:
  {
    switch(Channel)
     dfc:	88 23       	and	r24, r24
     dfe:	81 f4       	brne	.+32     	; 0xe20 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_64_CONFIG;
     e00:	85 b5       	in	r24, 0x25	; 37
     e02:	83 60       	ori	r24, 0x03	; 3
     e04:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     e06:	0e c0       	rjmp	.+28     	; 0xe24 <Pwm_Start+0x14a>
    break;
  }

  case PWM_PRESCALER_256:
  {
    switch(Channel)
     e08:	88 23       	and	r24, r24
     e0a:	51 f4       	brne	.+20     	; 0xe20 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_64_CONFIG;
     e0c:	85 b5       	in	r24, 0x25	; 37
     e0e:	83 60       	ori	r24, 0x03	; 3
     e10:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     e12:	08 c0       	rjmp	.+16     	; 0xe24 <Pwm_Start+0x14a>
  }

 
  case PWM_PRESCALER_1024:
  {
    switch(Channel)
     e14:	88 23       	and	r24, r24
     e16:	21 f4       	brne	.+8      	; 0xe20 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_1024_CONFIG;
     e18:	85 b5       	in	r24, 0x25	; 37
     e1a:	85 60       	ori	r24, 0x05	; 5
     e1c:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <Pwm_Start+0x14a>



}

switch(Channel)
     e20:	88 23       	and	r24, r24
     e22:	d1 f4       	brne	.+52     	; 0xe58 <Pwm_Start+0x17e>
    {
      case PWM_CH0:{
      pwm_time_on=MAX_HOLD;
      dutyReal=((float)Duty/(float)FULL_SPEED);
     e24:	69 2f       	mov	r22, r25
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__floatunsisf>
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	48 ec       	ldi	r20, 0xC8	; 200
     e36:	52 e4       	ldi	r21, 0x42	; 66
     e38:	0e 94 5f 0a 	call	0x14be	; 0x14be <__divsf3>
      pwm_time_on=(float)pwm_time_on*dutyReal;
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	4f e7       	ldi	r20, 0x7F	; 127
     e42:	53 e4       	ldi	r21, 0x43	; 67
     e44:	0e 94 81 0b 	call	0x1702	; 0x1702 <__mulsf3>
     e48:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
      OCR0=pwm_time_on;
     e50:	98 bd       	out	0x28, r25	; 40
     e52:	87 bd       	out	0x27, r24	; 39
      Ret=E_OK;
     e54:	80 e0       	ldi	r24, 0x00	; 0
      break;
     e56:	01 c0       	rjmp	.+2      	; 0xe5a <Pwm_Start+0x180>
      Ret=E_OK;
      }
      break;
  */
      default:
      Ret=E_NOK;
     e58:	81 e0       	ldi	r24, 0x01	; 1
      break;
    }
sgl_is_started=1;
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	90 93 40 01 	sts	0x0140, r25
return Ret;
}
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	08 95       	ret

00000e66 <Pwm_Update>:


ERROR_STATUS Pwm_Update(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
uint8_t Ret=0;
if (sgl_is_started == 1)
     e66:	90 91 40 01 	lds	r25, 0x0140
     e6a:	91 30       	cpi	r25, 0x01	; 1
     e6c:	21 f4       	brne	.+8      	; 0xe76 <Pwm_Update+0x10>
{
  Pwm_Start( Channel,Duty,Frequncy);
     e6e:	0e 94 6d 06 	call	0xcda	; 0xcda <Pwm_Start>
Ret=E_OK;
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	08 95       	ret
}else{Ret=E_NOK;}
     e76:	81 e0       	ldi	r24, 0x01	; 1


return Ret;
}
     e78:	08 95       	ret

00000e7a <Pwm_Stop>:
/*********************************************************************************/

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
uint8_t Ret=0;
switch(Channel)
     e7a:	83 30       	cpi	r24, 0x03	; 3
     e7c:	18 f4       	brcc	.+6      	; 0xe84 <Pwm_Stop+0xa>
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	60 f4       	brcc	.+24     	; 0xe9a <Pwm_Stop+0x20>
     e82:	03 c0       	rjmp	.+6      	; 0xe8a <Pwm_Stop+0x10>
     e84:	83 30       	cpi	r24, 0x03	; 3
     e86:	d1 f4       	brne	.+52     	; 0xebc <Pwm_Stop+0x42>
     e88:	0f c0       	rjmp	.+30     	; 0xea8 <Pwm_Stop+0x2e>
{
  case PWM_CH0:
  TCCR0 &=TIMER_STOPT02;
     e8a:	84 b5       	in	r24, 0x24	; 36
     e8c:	95 b5       	in	r25, 0x25	; 37
     e8e:	88 7f       	andi	r24, 0xF8	; 248
     e90:	90 70       	andi	r25, 0x00	; 0
     e92:	95 bd       	out	0x25, r25	; 37
     e94:	84 bd       	out	0x24, r24	; 36
  Ret=E_OK;
     e96:	80 e0       	ldi	r24, 0x00	; 0
  break;
     e98:	08 95       	ret

  case PWM_CH1A:
  case PWM_CH1B:
  TCCR0 &=TIMER_STOPT1;
     e9a:	84 b5       	in	r24, 0x24	; 36
     e9c:	95 b5       	in	r25, 0x25	; 37
     e9e:	98 7f       	andi	r25, 0xF8	; 248
     ea0:	95 bd       	out	0x25, r25	; 37
     ea2:	84 bd       	out	0x24, r24	; 36
  Ret=E_OK;
     ea4:	80 e0       	ldi	r24, 0x00	; 0
  break;
     ea6:	08 95       	ret


  case PWM_CH2:
  TCCR2 &=TIMER_STOPT02;
     ea8:	e0 eb       	ldi	r30, 0xB0	; 176
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	91 81       	ldd	r25, Z+1	; 0x01
     eb0:	88 7f       	andi	r24, 0xF8	; 248
     eb2:	90 70       	andi	r25, 0x00	; 0
     eb4:	91 83       	std	Z+1, r25	; 0x01
     eb6:	80 83       	st	Z, r24
  Ret=E_OK;
     eb8:	80 e0       	ldi	r24, 0x00	; 0
  break;
     eba:	08 95       	ret
  default:
  Ret=E_NOK;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
  break;
}

return Ret;
}
     ebe:	08 95       	ret

00000ec0 <speaker_init>:


ERROR_STATUS speaker_init(void)
{
  uint8_t ret =E_OK;
  	ret=DIO_init(&speaker_Configuration_0);
     ec0:	83 e0       	ldi	r24, 0x03	; 3
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_init>
  return ret;
}
     ec8:	08 95       	ret

00000eca <speaker_start_sm>:
  break;
}


  return ret;
}
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	08 95       	ret

00000ece <timer0Set>:
}

}
void timer0Set(uint8_t u8_value)
{
TCNT0 =	u8_value;
     ece:	86 bd       	out	0x26, r24	; 38
}
     ed0:	08 95       	ret

00000ed2 <timer0Read>:

uint8_t timer0Read(void)
{
	 return TCNT0;
     ed2:	86 b5       	in	r24, 0x26	; 38
}
     ed4:	08 95       	ret

00000ed6 <timer0Start>:
Depending on prescaler	x     X    X

*/
void timer0Start(void)
{
	 TCCR0 &= (0xF8);
     ed6:	84 b5       	in	r24, 0x24	; 36
     ed8:	95 b5       	in	r25, 0x25	; 37
     eda:	88 7f       	andi	r24, 0xF8	; 248
     edc:	90 70       	andi	r25, 0x00	; 0
     ede:	95 bd       	out	0x25, r25	; 37
     ee0:	84 bd       	out	0x24, r24	; 36
	 TCCR0 |= Prescaler_Value;
     ee2:	24 b5       	in	r18, 0x24	; 36
     ee4:	35 b5       	in	r19, 0x25	; 37
     ee6:	80 91 48 01 	lds	r24, 0x0148
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	82 2b       	or	r24, r18
     eee:	93 2b       	or	r25, r19
     ef0:	95 bd       	out	0x25, r25	; 37
     ef2:	84 bd       	out	0x24, r24	; 36
}
     ef4:	08 95       	ret

00000ef6 <timer0Stop>:
						      0     0    0
*/
void timer0Stop(void)
 {

TCCR0 &= (0xF8);
     ef6:	84 b5       	in	r24, 0x24	; 36
     ef8:	95 b5       	in	r25, 0x25	; 37
     efa:	88 7f       	andi	r24, 0xF8	; 248
     efc:	90 70       	andi	r25, 0x00	; 0
     efe:	95 bd       	out	0x25, r25	; 37
     f00:	84 bd       	out	0x24, r24	; 36

 }
     f02:	08 95       	ret

00000f04 <timer0Init>:
uint8_t Prescaler_Value2=0;
uint8_t u8g_T1_Prescaler=0;
volatile uint8_t pwm_time_on=0,flag=0;
volatile uint8_t timer2_interrupt_raised = 0;
void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal,uint8_t u8_initialValue, uint8_t u8_outputCompare,En_timer0Interrupt_t en_interruptMask)
{
     f04:	ef 92       	push	r14
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
if(en_prescal == T0_NO_CLOCK)
     f0a:	44 23       	and	r20, r20
     f0c:	19 f4       	brne	.+6      	; 0xf14 <timer0Init+0x10>
{/*
if there is no clock the timer will be disabled
*/
timer0Stop();
     f0e:	0e 94 7b 07 	call	0xef6	; 0xef6 <timer0Stop>
     f12:	5d c0       	rjmp	.+186    	; 0xfce <timer0Init+0xca>
}
else
{
TCCR0 |= en_mode|en_prescal;
     f14:	e4 b5       	in	r30, 0x24	; 36
     f16:	f5 b5       	in	r31, 0x25	; 37
     f18:	84 2b       	or	r24, r20
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	8e 2b       	or	r24, r30
     f1e:	9f 2b       	or	r25, r31
     f20:	95 bd       	out	0x25, r25	; 37
     f22:	84 bd       	out	0x24, r24	; 36
Prescaler_Value=en_prescal;
     f24:	40 93 48 01 	sts	0x0148, r20
TCNT0 = u8_initialValue;
     f28:	26 bd       	out	0x26, r18	; 38
switch(en_OC0){
     f2a:	60 31       	cpi	r22, 0x10	; 16
     f2c:	89 f0       	breq	.+34     	; 0xf50 <timer0Init+0x4c>
     f2e:	61 31       	cpi	r22, 0x11	; 17
     f30:	18 f4       	brcc	.+6      	; 0xf38 <timer0Init+0x34>
     f32:	66 23       	and	r22, r22
     f34:	31 f0       	breq	.+12     	; 0xf42 <timer0Init+0x3e>
     f36:	1d c0       	rjmp	.+58     	; 0xf72 <timer0Init+0x6e>
     f38:	60 32       	cpi	r22, 0x20	; 32
     f3a:	81 f0       	breq	.+32     	; 0xf5c <timer0Init+0x58>
     f3c:	60 33       	cpi	r22, 0x30	; 48
     f3e:	c9 f4       	brne	.+50     	; 0xf72 <timer0Init+0x6e>
     f40:	13 c0       	rjmp	.+38     	; 0xf68 <timer0Init+0x64>
	case  T0_OC0_DIS:
	{
	TCCR0 &= 0xCF;
     f42:	84 b5       	in	r24, 0x24	; 36
     f44:	95 b5       	in	r25, 0x25	; 37
     f46:	8f 7c       	andi	r24, 0xCF	; 207
     f48:	90 70       	andi	r25, 0x00	; 0
     f4a:	95 bd       	out	0x25, r25	; 37
     f4c:	84 bd       	out	0x24, r24	; 36
		break;
     f4e:	11 c0       	rjmp	.+34     	; 0xf72 <timer0Init+0x6e>
	}
	case T0_OC0_TOGGLE:
	{
		TCCR0|=T0_OC0_TOGGLE;
     f50:	84 b5       	in	r24, 0x24	; 36
     f52:	95 b5       	in	r25, 0x25	; 37
     f54:	80 61       	ori	r24, 0x10	; 16
     f56:	95 bd       	out	0x25, r25	; 37
     f58:	84 bd       	out	0x24, r24	; 36
		break;
     f5a:	0b c0       	rjmp	.+22     	; 0xf72 <timer0Init+0x6e>
	}
	case  T0_OC0_CLEAR:
	{
	TCCR0 |= T0_OC0_CLEAR;
     f5c:	84 b5       	in	r24, 0x24	; 36
     f5e:	95 b5       	in	r25, 0x25	; 37
     f60:	80 62       	ori	r24, 0x20	; 32
     f62:	95 bd       	out	0x25, r25	; 37
     f64:	84 bd       	out	0x24, r24	; 36

		break;
     f66:	05 c0       	rjmp	.+10     	; 0xf72 <timer0Init+0x6e>
	}
	case T0_OC0_SET:
	{
		TCCR0 |=T0_OC0_SET;
     f68:	84 b5       	in	r24, 0x24	; 36
     f6a:	95 b5       	in	r25, 0x25	; 37
     f6c:	80 63       	ori	r24, 0x30	; 48
     f6e:	95 bd       	out	0x25, r25	; 37
     f70:	84 bd       	out	0x24, r24	; 36
		break;
	}

}
OCR0  =u8_outputCompare;
     f72:	10 e0       	ldi	r17, 0x00	; 0
     f74:	18 bd       	out	0x28, r17	; 40
     f76:	07 bd       	out	0x27, r16	; 39
switch(en_interruptMask){
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	e8 16       	cp	r14, r24
     f7c:	79 f0       	breq	.+30     	; 0xf9c <timer0Init+0x98>
     f7e:	e8 16       	cp	r14, r24
     f80:	20 f0       	brcs	.+8      	; 0xf8a <timer0Init+0x86>
     f82:	82 e0       	ldi	r24, 0x02	; 2
     f84:	e8 16       	cp	r14, r24
     f86:	19 f5       	brne	.+70     	; 0xfce <timer0Init+0xca>
     f88:	14 c0       	rjmp	.+40     	; 0xfb2 <timer0Init+0xae>
case  T0_POLLING:{
pooling=0;
     f8a:	10 92 47 01 	sts	0x0147, r1
G_interrupt_Disable();
     f8e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <G_interrupt_Disable>
TIMSK0 &= T0_POLLING;
     f92:	ee e6       	ldi	r30, 0x6E	; 110
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	10 82       	st	Z, r1
break;
     f9a:	19 c0       	rjmp	.+50     	; 0xfce <timer0Init+0xca>
}
case T0_INTERRUPT_NORMAL :
{pooling=1;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	80 93 47 01 	sts	0x0147, r24
G_interrupt_Enable();
     fa2:	0e 94 61 02 	call	0x4c2	; 0x4c2 <G_interrupt_Enable>
TIMSK0 |= T0_INTERRUPT_NORMAL;
     fa6:	ee e6       	ldi	r30, 0x6E	; 110
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	81 60       	ori	r24, 0x01	; 1
     fae:	80 83       	st	Z, r24
break;
     fb0:	0e c0       	rjmp	.+28     	; 0xfce <timer0Init+0xca>
}
case T0_INTERRUPT_CMP:
{pooling=1;
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	80 93 47 01 	sts	0x0147, r24
//G_interrupt_Enable();
SET_BIT(SREG,7);
     fb8:	8f b7       	in	r24, 0x3f	; 63
     fba:	80 68       	ori	r24, 0x80	; 128
     fbc:	8f bf       	out	0x3f, r24	; 63
TIMSK0 |= T0_INTERRUPT_NORMAL;
     fbe:	ee e6       	ldi	r30, 0x6E	; 110
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	81 60       	ori	r24, 0x01	; 1
     fc6:	80 83       	st	Z, r24
TIMSK0 |=T0_INTERRUPT_CMP;
     fc8:	80 81       	ld	r24, Z
     fca:	82 60       	ori	r24, 0x02	; 2
     fcc:	80 83       	st	Z, r24
}
}

}

}
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	ef 90       	pop	r14
     fd4:	08 95       	ret

00000fd6 <timer0DelayMs>:
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
     fd6:	ac 01       	movw	r20, r24
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	41 15       	cp	r20, r1
     fde:	51 05       	cpc	r21, r1
     fe0:	61 05       	cpc	r22, r1
     fe2:	71 05       	cpc	r23, r1
     fe4:	71 f0       	breq	.+28     	; 0x1002 <timer0DelayMs+0x2c>
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	dc 01       	movw	r26, r24
{
	while ((TIFR0&0x01)==0);
     fec:	a8 9b       	sbis	0x15, 0	; 21
     fee:	fe cf       	rjmp	.-4      	; 0xfec <timer0DelayMs+0x16>
	TIFR0 |=0x01;
     ff0:	a8 9a       	sbi	0x15, 0	; 21
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	a1 1d       	adc	r26, r1
     ff6:	b1 1d       	adc	r27, r1
     ff8:	84 17       	cp	r24, r20
     ffa:	95 07       	cpc	r25, r21
     ffc:	a6 07       	cpc	r26, r22
     ffe:	b7 07       	cpc	r27, r23
    1000:	a8 f3       	brcs	.-22     	; 0xfec <timer0DelayMs+0x16>
    1002:	08 95       	ret

00001004 <timer0DelayUs>:
 at pooling _no prescaling
 240at TCNT0

 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	a1 05       	cpc	r26, r1
    100c:	b1 05       	cpc	r27, r1
    100e:	31 f0       	breq	.+12     	; 0x101c <timer0DelayUs+0x18>
	{
	timer0Set(240);
    1010:	80 ef       	ldi	r24, 0xF0	; 240
    1012:	0e 94 67 07 	call	0xece	; 0xece <timer0Set>
	while(timer0Read()<=255);
    1016:	0e 94 69 07 	call	0xed2	; 0xed2 <timer0Read>
    101a:	fd cf       	rjmp	.-6      	; 0x1016 <timer0DelayUs+0x12>
	//while(u32_ovf_counter <= (8*u32_delay_in_us/1000));
	}
	TIFR0 |=(1<<TOV0);/*Clear the flag*/
    101c:	a8 9a       	sbi	0x15, 0	; 21
}/*1*/
    101e:	08 95       	ret

00001020 <timer0SwPWM>:
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    1020:	cf 92       	push	r12
    1022:	df 92       	push	r13
    1024:	ef 92       	push	r14
    1026:	ff 92       	push	r15
    1028:	cf 93       	push	r28
    102a:	c8 2f       	mov	r28, r24
float dutyReal;
pwm_time_on=MAX_HOLD;
    102c:	8f ef       	ldi	r24, 0xFF	; 255
    102e:	80 93 43 01 	sts	0x0143, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
    1032:	60 91 43 01 	lds	r22, 0x0143
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__floatunsisf>
    1040:	6b 01       	movw	r12, r22
    1042:	7c 01       	movw	r14, r24
}/*1*/
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
    1044:	6c 2f       	mov	r22, r28
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__floatunsisf>
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	48 ec       	ldi	r20, 0xC8	; 200
    1056:	52 e4       	ldi	r21, 0x42	; 66
    1058:	0e 94 5f 0a 	call	0x14be	; 0x14be <__divsf3>
    105c:	9b 01       	movw	r18, r22
    105e:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
    1060:	c7 01       	movw	r24, r14
    1062:	b6 01       	movw	r22, r12
    1064:	0e 94 81 0b 	call	0x1702	; 0x1702 <__mulsf3>
    1068:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
    106c:	60 93 43 01 	sts	0x0143, r22
switch(pooling)
    1070:	80 91 47 01 	lds	r24, 0x0147
    1074:	88 23       	and	r24, r24
    1076:	19 f0       	breq	.+6      	; 0x107e <timer0SwPWM+0x5e>
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	09 f5       	brne	.+66     	; 0x10be <timer0SwPWM+0x9e>
    107c:	19 c0       	rjmp	.+50     	; 0x10b0 <timer0SwPWM+0x90>
{
	case 0:
	{
	timer0Start();
    107e:	0e 94 6b 07 	call	0xed6	; 0xed6 <timer0Start>
	timer0Set(pwm_time_on);
    1082:	80 91 43 01 	lds	r24, 0x0143
    1086:	0e 94 67 07 	call	0xece	; 0xece <timer0Set>
	//freq 50KHZ is the Max frequency possible
	while ((TIFR0 &0x01)==0);
    108a:	a8 9b       	sbis	0x15, 0	; 21
    108c:	fe cf       	rjmp	.-4      	; 0x108a <timer0SwPWM+0x6a>
	TIFR0 |=0x01;
    108e:	a8 9a       	sbi	0x15, 0	; 21
	PORTC_DATA |=0xff;
    1090:	88 b1       	in	r24, 0x08	; 8
    1092:	8f ef       	ldi	r24, 0xFF	; 255
    1094:	88 b9       	out	0x08, r24	; 8
	timer0Start();
    1096:	0e 94 6b 07 	call	0xed6	; 0xed6 <timer0Start>
	timer0Set(MAX_HOLD-pwm_time_on);
    109a:	80 91 43 01 	lds	r24, 0x0143
    109e:	80 95       	com	r24
    10a0:	0e 94 67 07 	call	0xece	; 0xece <timer0Set>
	//freq
	while ((TIFR0 & 0x01)==0);
    10a4:	a8 9b       	sbis	0x15, 0	; 21
    10a6:	fe cf       	rjmp	.-4      	; 0x10a4 <timer0SwPWM+0x84>
	TIFR0 |=0x01;
    10a8:	a8 9a       	sbi	0x15, 0	; 21
	PORTC_DATA &=0x00;
    10aa:	88 b1       	in	r24, 0x08	; 8
    10ac:	18 b8       	out	0x08, r1	; 8

break;
    10ae:	07 c0       	rjmp	.+14     	; 0x10be <timer0SwPWM+0x9e>
}
case 1:
{
timer0Start();
    10b0:	0e 94 6b 07 	call	0xed6	; 0xed6 <timer0Start>
OCR0=pwm_time_on;
    10b4:	80 91 43 01 	lds	r24, 0x0143
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	98 bd       	out	0x28, r25	; 40
    10bc:	87 bd       	out	0x27, r24	; 39
break;
}

}

}
    10be:	cf 91       	pop	r28
    10c0:	ff 90       	pop	r15
    10c2:	ef 90       	pop	r14
    10c4:	df 90       	pop	r13
    10c6:	cf 90       	pop	r12
    10c8:	08 95       	ret

000010ca <Timer_interrupt_COMP_routine>:



void Timer_interrupt_COMP_routine(void)
{
	PORTD_DATA ^=0xff;
    10ca:	8b b1       	in	r24, 0x0b	; 11
    10cc:	80 95       	com	r24
    10ce:	8b b9       	out	0x0b, r24	; 11

}
    10d0:	08 95       	ret

000010d2 <timer1Set>:
	}

*/
void timer1Set(uint16_t u16_value)
{
TCNT1=u16_value;
    10d2:	90 93 85 00 	sts	0x0085, r25
    10d6:	80 93 84 00 	sts	0x0084, r24
}
    10da:	08 95       	ret

000010dc <timer1Read>:
 * Description:
 * @return TCNT1
 */
uint16_t timer1Read(void)
{
return TCNT1;
    10dc:	80 91 84 00 	lds	r24, 0x0084
    10e0:	90 91 85 00 	lds	r25, 0x0085
}
    10e4:	08 95       	ret

000010e6 <timer1Start>:
 * Description:
 * @param
 */
void timer1Start(void)
{
TCCR1B |=u8g_T1_Prescaler;
    10e6:	e1 e8       	ldi	r30, 0x81	; 129
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	90 81       	ld	r25, Z
    10ec:	80 91 44 01 	lds	r24, 0x0144
    10f0:	89 2b       	or	r24, r25
    10f2:	80 83       	st	Z, r24
}
    10f4:	08 95       	ret

000010f6 <timer1Stop>:
 * Description:
 * @param
 */
void timer1Stop(void)
{
TCCR1B &=0xfff8;
    10f6:	e1 e8       	ldi	r30, 0x81	; 129
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	88 7f       	andi	r24, 0xF8	; 248
    10fe:	80 83       	st	Z, r24
/*Keep all sittings as it is and put zeros in cs10,cs11,cs12*/
}
    1100:	08 95       	ret

00001102 <timer1DelayMs>:
 */
void timer1DelayMs(uint16_t u16_delay_in_ms)
{


}
    1102:	08 95       	ret

00001104 <timer1DelayUs>:
 */
void timer1DelayUs(uint32_t u32_delay_in_us)
{


}
    1104:	08 95       	ret

00001106 <timer1SwPWM>:
 */
void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{


}
    1106:	08 95       	ret

00001108 <timer2Set>:
* Description:
* @param value
*/
void timer2Set(uint8_t u8_a_value)
{
TCNT2=u8_a_value;
    1108:	80 93 b2 00 	sts	0x00B2, r24
}
    110c:	08 95       	ret

0000110e <timer2Read>:
/**
* Description:
* @return
*/
uint8_t timer2Read(void){
return TCNT2;
    110e:	80 91 b2 00 	lds	r24, 0x00B2
}
    1112:	08 95       	ret

00001114 <timer2Start>:
/**
* Description:
*/
void timer2Start(void)
{
TCCR2B &= 0xf8;
    1114:	e1 eb       	ldi	r30, 0xB1	; 177
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	88 7f       	andi	r24, 0xF8	; 248
    111c:	80 83       	st	Z, r24
TCCR2B |= Prescaler_Value2;
    111e:	90 81       	ld	r25, Z
    1120:	80 91 45 01 	lds	r24, 0x0145
    1124:	89 2b       	or	r24, r25
    1126:	80 83       	st	Z, r24
}
    1128:	08 95       	ret

0000112a <timer2Stop>:
/**
* Description:
*/
void timer2Stop(void)
{
TCCR2B &= 0xf8;
    112a:	e1 eb       	ldi	r30, 0xB1	; 177
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	88 7f       	andi	r24, 0xF8	; 248
    1132:	80 83       	st	Z, r24

}
    1134:	08 95       	ret

00001136 <timer2Init>:


}

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC,En_timer2perscaler_t en_prescal2, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
    1136:	cf 92       	push	r12
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
if(en_prescal2 == T2_NO_CLOCK)
    113c:	44 23       	and	r20, r20
    113e:	19 f4       	brne	.+6      	; 0x1146 <timer2Init+0x10>
{/*
if there is no clock the timer will be disabled
*/
timer2Stop();
    1140:	0e 94 95 08 	call	0x112a	; 0x112a <timer2Stop>
    1144:	5e c0       	rjmp	.+188    	; 0x1202 <timer2Init+0xcc>
}
else
{
TCCR2A |= en_mode;
    1146:	e0 eb       	ldi	r30, 0xB0	; 176
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	90 81       	ld	r25, Z
    114c:	89 2b       	or	r24, r25
    114e:	80 83       	st	Z, r24
TCCR2B |= en_prescal2 ;
    1150:	e1 eb       	ldi	r30, 0xB1	; 177
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	84 2b       	or	r24, r20
    1158:	80 83       	st	Z, r24

Prescaler_Value2=en_prescal2;
    115a:	40 93 45 01 	sts	0x0145, r20
TCNT2 = u8_initialValue;
    115e:	20 93 b2 00 	sts	0x00B2, r18
switch(en_OC){
    1162:	60 34       	cpi	r22, 0x40	; 64
    1164:	81 f0       	breq	.+32     	; 0x1186 <timer2Init+0x50>
    1166:	61 34       	cpi	r22, 0x41	; 65
    1168:	18 f4       	brcc	.+6      	; 0x1170 <timer2Init+0x3a>
    116a:	66 23       	and	r22, r22
    116c:	31 f0       	breq	.+12     	; 0x117a <timer2Init+0x44>
    116e:	1c c0       	rjmp	.+56     	; 0x11a8 <timer2Init+0x72>
    1170:	60 38       	cpi	r22, 0x80	; 128
    1172:	79 f0       	breq	.+30     	; 0x1192 <timer2Init+0x5c>
    1174:	60 3a       	cpi	r22, 0xA0	; 160
    1176:	c1 f4       	brne	.+48     	; 0x11a8 <timer2Init+0x72>
    1178:	12 c0       	rjmp	.+36     	; 0x119e <timer2Init+0x68>
	case  T2_OC2A_DIS:
	{
	TCCR2B &= 0xFC;
    117a:	e1 eb       	ldi	r30, 0xB1	; 177
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	8c 7f       	andi	r24, 0xFC	; 252
    1182:	80 83       	st	Z, r24
		break;
    1184:	11 c0       	rjmp	.+34     	; 0x11a8 <timer2Init+0x72>
	}
	case T2_OC2A_TOGGLE:
	{
		TCCR2A |=T2_OC2A_TOGGLE;
    1186:	e0 eb       	ldi	r30, 0xB0	; 176
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	80 64       	ori	r24, 0x40	; 64
    118e:	80 83       	st	Z, r24
		break;
    1190:	0b c0       	rjmp	.+22     	; 0x11a8 <timer2Init+0x72>
	}
	case  T2_OC2A_CLEAR:
	{
	TCCR2A |= T2_OC2A_CLEAR;
    1192:	e0 eb       	ldi	r30, 0xB0	; 176
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	80 68       	ori	r24, 0x80	; 128
    119a:	80 83       	st	Z, r24

		break;
    119c:	05 c0       	rjmp	.+10     	; 0x11a8 <timer2Init+0x72>
	}
	case T2_OC2A_SET:
	{
		TCCR2A |=T2_OC2A_SET;
    119e:	e0 eb       	ldi	r30, 0xB0	; 176
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	80 6a       	ori	r24, 0xA0	; 160
    11a6:	80 83       	st	Z, r24
		break;
	}

}
OCR2  = u8_outputCompare;
    11a8:	10 e0       	ldi	r17, 0x00	; 0
    11aa:	10 93 b4 00 	sts	0x00B4, r17
    11ae:	00 93 b3 00 	sts	0x00B3, r16
switch(en_interruptMask){
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	c8 16       	cp	r12, r24
    11b6:	69 f0       	breq	.+26     	; 0x11d2 <timer2Init+0x9c>
    11b8:	c8 16       	cp	r12, r24
    11ba:	20 f0       	brcs	.+8      	; 0x11c4 <timer2Init+0x8e>
    11bc:	83 e0       	ldi	r24, 0x03	; 3
    11be:	c8 16       	cp	r12, r24
    11c0:	01 f5       	brne	.+64     	; 0x1202 <timer2Init+0xcc>
    11c2:	12 c0       	rjmp	.+36     	; 0x11e8 <timer2Init+0xb2>
case  T2_POLLING:
pooling_2=0;
    11c4:	10 92 46 01 	sts	0x0146, r1
TIMSK2 &= T2_POLLING;
    11c8:	e0 e7       	ldi	r30, 0x70	; 112
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	10 82       	st	Z, r1
break;
    11d0:	18 c0       	rjmp	.+48     	; 0x1202 <timer2Init+0xcc>
case T2_INTERRUPT_NORMAL :
{
	pooling_2=1;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	80 93 46 01 	sts	0x0146, r24
G_interrupt_Enable();
    11d8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <G_interrupt_Enable>
TIMSK2 |= T2_INTERRUPT_NORMAL;
    11dc:	e0 e7       	ldi	r30, 0x70	; 112
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	81 60       	ori	r24, 0x01	; 1
    11e4:	80 83       	st	Z, r24

break;
    11e6:	0d c0       	rjmp	.+26     	; 0x1202 <timer2Init+0xcc>
}
case T2_INTERRUPT_CMP:
{
	pooling_2=1;
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	80 93 46 01 	sts	0x0146, r24
G_interrupt_Enable();
    11ee:	0e 94 61 02 	call	0x4c2	; 0x4c2 <G_interrupt_Enable>
//SET_BIT(SREG,7);
TIMSK2 |=T2_INTERRUPT_NORMAL;
    11f2:	e0 e7       	ldi	r30, 0x70	; 112
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	81 60       	ori	r24, 0x01	; 1
    11fa:	80 83       	st	Z, r24
TIMSK2 |=T2_INTERRUPT_CMP;
    11fc:	80 81       	ld	r24, Z
    11fe:	83 60       	ori	r24, 0x03	; 3
    1200:	80 83       	st	Z, r24

}



}
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	cf 90       	pop	r12
    1208:	08 95       	ret

0000120a <timer2DelayMs>:
		Prescalercounst=1;
		break;

		}*/
void timer2DelayMs(uint16_t u16_delay_in_ms)
{
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	00 d0       	rcall	.+0      	; 0x1214 <timer2DelayMs+0xa>
    1214:	00 d0       	rcall	.+0      	; 0x1216 <timer2DelayMs+0xc>
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	8c 01       	movw	r16, r24
	volatile uint16_t count=0;
    121c:	1a 82       	std	Y+2, r1	; 0x02
    121e:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t Prescalercounst=0,set_timer2=0;
    1220:	1b 82       	std	Y+3, r1	; 0x03
    1222:	1c 82       	std	Y+4, r1	; 0x04
	switch(Prescaler_Value2)
    1224:	80 91 45 01 	lds	r24, 0x0145
    1228:	84 30       	cpi	r24, 0x04	; 4
    122a:	f9 f0       	breq	.+62     	; 0x126a <timer2DelayMs+0x60>
    122c:	85 30       	cpi	r24, 0x05	; 5
    122e:	38 f4       	brcc	.+14     	; 0x123e <timer2DelayMs+0x34>
    1230:	82 30       	cpi	r24, 0x02	; 2
    1232:	89 f0       	breq	.+34     	; 0x1256 <timer2DelayMs+0x4c>
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	a0 f4       	brcc	.+40     	; 0x1260 <timer2DelayMs+0x56>
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	51 f5       	brne	.+84     	; 0x1290 <timer2DelayMs+0x86>
    123c:	07 c0       	rjmp	.+14     	; 0x124c <timer2DelayMs+0x42>
    123e:	86 30       	cpi	r24, 0x06	; 6
    1240:	f1 f0       	breq	.+60     	; 0x127e <timer2DelayMs+0x74>
    1242:	86 30       	cpi	r24, 0x06	; 6
    1244:	b8 f0       	brcs	.+46     	; 0x1274 <timer2DelayMs+0x6a>
    1246:	87 30       	cpi	r24, 0x07	; 7
    1248:	19 f5       	brne	.+70     	; 0x1290 <timer2DelayMs+0x86>
    124a:	1e c0       	rjmp	.+60     	; 0x1288 <timer2DelayMs+0x7e>
	{
		case T2_PRESCALER_NO:{
		Prescalercounst=58;
    124c:	8a e3       	ldi	r24, 0x3A	; 58
    124e:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=10;
    1250:	8a e0       	ldi	r24, 0x0A	; 10
    1252:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    1254:	1d c0       	rjmp	.+58     	; 0x1290 <timer2DelayMs+0x86>
		case T2_PRESCALER_8:
		{Prescalercounst=8;
    1256:	88 e0       	ldi	r24, 0x08	; 8
    1258:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=12;
    125a:	8c e0       	ldi	r24, 0x0C	; 12
    125c:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    125e:	18 c0       	rjmp	.+48     	; 0x1290 <timer2DelayMs+0x86>
		case T2_PRESCALER_32:
		{Prescalercounst=2;
    1260:	82 e0       	ldi	r24, 0x02	; 2
    1262:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=8;
    1264:	88 e0       	ldi	r24, 0x08	; 8
    1266:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    1268:	13 c0       	rjmp	.+38     	; 0x1290 <timer2DelayMs+0x86>
		case T2_PRESCALER_64:
		{Prescalercounst=1;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=6;
    126e:	86 e0       	ldi	r24, 0x06	; 6
    1270:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    1272:	0e c0       	rjmp	.+28     	; 0x1290 <timer2DelayMs+0x86>
		case T2_PRESCALER_128:
		{Prescalercounst=1;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=131;
    1278:	83 e8       	ldi	r24, 0x83	; 131
    127a:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    127c:	09 c0       	rjmp	.+18     	; 0x1290 <timer2DelayMs+0x86>
		case T2_PRESCALER_256:
		{Prescalercounst=1;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=194;
    1282:	82 ec       	ldi	r24, 0xC2	; 194
    1284:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    1286:	04 c0       	rjmp	.+8      	; 0x1290 <timer2DelayMs+0x86>
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=240;
    128c:	80 ef       	ldi	r24, 0xF0	; 240
    128e:	8c 83       	std	Y+4, r24	; 0x04
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
    1290:	1a 82       	std	Y+2, r1	; 0x02
    1292:	19 82       	std	Y+1, r1	; 0x01
    1294:	2b 81       	ldd	r18, Y+3	; 0x03
    1296:	49 81       	ldd	r20, Y+1	; 0x01
    1298:	5a 81       	ldd	r21, Y+2	; 0x02
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	02 9f       	mul	r16, r18
    129e:	c0 01       	movw	r24, r0
    12a0:	03 9f       	mul	r16, r19
    12a2:	90 0d       	add	r25, r0
    12a4:	12 9f       	mul	r17, r18
    12a6:	90 0d       	add	r25, r0
    12a8:	11 24       	eor	r1, r1
    12aa:	48 17       	cp	r20, r24
    12ac:	59 07       	cpc	r21, r25
    12ae:	c8 f4       	brcc	.+50     	; 0x12e2 <timer2DelayMs+0xd8>
	{
		timer2Set(set_timer2);//10 for no prescaler....12 for 8 prescaler .... 8 for 32 prescaler ....6 for prescaler 64 .....
    12b0:	8c 81       	ldd	r24, Y+4	; 0x04
    12b2:	0e 94 84 08 	call	0x1108	; 0x1108 <timer2Set>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR2 & 0x01)==0);
    12b6:	b8 9b       	sbis	0x17, 0	; 23
    12b8:	fe cf       	rjmp	.-4      	; 0x12b6 <timer2DelayMs+0xac>
		TIFR2 |=0x01;
    12ba:	b8 9a       	sbi	0x17, 0	; 23
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
		set_timer2=240;
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	9a 81       	ldd	r25, Y+2	; 0x02
    12c0:	01 96       	adiw	r24, 0x01	; 1
    12c2:	9a 83       	std	Y+2, r25	; 0x02
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	2b 81       	ldd	r18, Y+3	; 0x03
    12c8:	49 81       	ldd	r20, Y+1	; 0x01
    12ca:	5a 81       	ldd	r21, Y+2	; 0x02
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	02 9f       	mul	r16, r18
    12d0:	c0 01       	movw	r24, r0
    12d2:	03 9f       	mul	r16, r19
    12d4:	90 0d       	add	r25, r0
    12d6:	12 9f       	mul	r17, r18
    12d8:	90 0d       	add	r25, r0
    12da:	11 24       	eor	r1, r1
    12dc:	48 17       	cp	r20, r24
    12de:	59 07       	cpc	r21, r25
    12e0:	38 f3       	brcs	.-50     	; 0x12b0 <timer2DelayMs+0xa6>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR2 & 0x01)==0);
		TIFR2 |=0x01;

	}
}
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	08 95       	ret

000012f4 <timer2DelayUs>:

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
    12f4:	cf 92       	push	r12
    12f6:	df 92       	push	r13
    12f8:	ef 92       	push	r14
    12fa:	ff 92       	push	r15
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	00 d0       	rcall	.+0      	; 0x1302 <timer2DelayUs+0xe>
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	6b 01       	movw	r12, r22
    1308:	7c 01       	movw	r14, r24
	volatile uint16_t count =0;
    130a:	1a 82       	std	Y+2, r1	; 0x02
    130c:	19 82       	std	Y+1, r1	; 0x01
	for (count=0;count<u16_delay_in_us;count++)
    130e:	1a 82       	std	Y+2, r1	; 0x02
    1310:	19 82       	std	Y+1, r1	; 0x01
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	9a 81       	ldd	r25, Y+2	; 0x02
    1316:	a0 e0       	ldi	r26, 0x00	; 0
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	8c 15       	cp	r24, r12
    131c:	9d 05       	cpc	r25, r13
    131e:	ae 05       	cpc	r26, r14
    1320:	bf 05       	cpc	r27, r15
    1322:	a0 f4       	brcc	.+40     	; 0x134c <timer2DelayUs+0x58>
	{
		timer2Set(254);//254 for no prescaler
    1324:	8e ef       	ldi	r24, 0xFE	; 254
    1326:	0e 94 84 08 	call	0x1108	; 0x1108 <timer2Set>
		while ((TIFR2 & 0x01)==0);
    132a:	b8 9b       	sbis	0x17, 0	; 23
    132c:	fe cf       	rjmp	.-4      	; 0x132a <timer2DelayUs+0x36>
		TIFR2 |=0x01;
    132e:	b8 9a       	sbi	0x17, 0	; 23

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
	volatile uint16_t count =0;
	for (count=0;count<u16_delay_in_us;count++)
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	9a 81       	ldd	r25, Y+2	; 0x02
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	9a 83       	std	Y+2, r25	; 0x02
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	9a 81       	ldd	r25, Y+2	; 0x02
    133e:	a0 e0       	ldi	r26, 0x00	; 0
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	8c 15       	cp	r24, r12
    1344:	9d 05       	cpc	r25, r13
    1346:	ae 05       	cpc	r26, r14
    1348:	bf 05       	cpc	r27, r15
    134a:	60 f3       	brcs	.-40     	; 0x1324 <timer2DelayUs+0x30>
		while ((TIFR2 & 0x01)==0);
		TIFR2 |=0x01;

	}

}
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	ff 90       	pop	r15
    1356:	ef 90       	pop	r14
    1358:	df 90       	pop	r13
    135a:	cf 90       	pop	r12
    135c:	08 95       	ret

0000135e <timer2SwPWM>:
/**
* Description:
* @param dutyCycle
*/
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    135e:	cf 92       	push	r12
    1360:	df 92       	push	r13
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	cf 93       	push	r28
    1368:	c8 2f       	mov	r28, r24

float dutyReal;
pwm_time_on=MAX_HOLD;
    136a:	8f ef       	ldi	r24, 0xFF	; 255
    136c:	80 93 43 01 	sts	0x0143, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
    1370:	60 91 43 01 	lds	r22, 0x0143
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__floatunsisf>
    137e:	6b 01       	movw	r12, r22
    1380:	7c 01       	movw	r14, r24
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{

float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
    1382:	6c 2f       	mov	r22, r28
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__floatunsisf>
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	48 ec       	ldi	r20, 0xC8	; 200
    1394:	52 e4       	ldi	r21, 0x42	; 66
    1396:	0e 94 5f 0a 	call	0x14be	; 0x14be <__divsf3>
    139a:	9b 01       	movw	r18, r22
    139c:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
    139e:	c7 01       	movw	r24, r14
    13a0:	b6 01       	movw	r22, r12
    13a2:	0e 94 81 0b 	call	0x1702	; 0x1702 <__mulsf3>
    13a6:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fixunssfsi>
    13aa:	60 93 43 01 	sts	0x0143, r22
switch(pooling_2)
    13ae:	80 91 46 01 	lds	r24, 0x0146
    13b2:	88 23       	and	r24, r24
    13b4:	19 f0       	breq	.+6      	; 0x13bc <timer2SwPWM+0x5e>
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	19 f5       	brne	.+70     	; 0x1400 <timer2SwPWM+0xa2>
    13ba:	19 c0       	rjmp	.+50     	; 0x13ee <timer2SwPWM+0x90>
{
	case 0:
	{
		timer2Start();
    13bc:	0e 94 8a 08 	call	0x1114	; 0x1114 <timer2Start>
		timer2Set(pwm_time_on);
    13c0:	80 91 43 01 	lds	r24, 0x0143
    13c4:	0e 94 84 08 	call	0x1108	; 0x1108 <timer2Set>
		//freq 50KHZ is the Max frequency possible
		while ((TIFR2 & 0x01)==0);
    13c8:	b8 9b       	sbis	0x17, 0	; 23
    13ca:	fe cf       	rjmp	.-4      	; 0x13c8 <timer2SwPWM+0x6a>
		TIFR2 |=0x01;
    13cc:	b8 9a       	sbi	0x17, 0	; 23
		PORTC_DATA |=0xff;
    13ce:	88 b1       	in	r24, 0x08	; 8
    13d0:	8f ef       	ldi	r24, 0xFF	; 255
    13d2:	88 b9       	out	0x08, r24	; 8
		timer2Start();
    13d4:	0e 94 8a 08 	call	0x1114	; 0x1114 <timer2Start>
		timer2Set(MAX_HOLD-pwm_time_on);
    13d8:	80 91 43 01 	lds	r24, 0x0143
    13dc:	80 95       	com	r24
    13de:	0e 94 84 08 	call	0x1108	; 0x1108 <timer2Set>
		//freq
		while ((TIFR2 & 0x01)==0);
    13e2:	b8 9b       	sbis	0x17, 0	; 23
    13e4:	fe cf       	rjmp	.-4      	; 0x13e2 <timer2SwPWM+0x84>
		TIFR2 |=0x01;
    13e6:	b8 9a       	sbi	0x17, 0	; 23
		PORTC_DATA &=0x00;
    13e8:	88 b1       	in	r24, 0x08	; 8
    13ea:	18 b8       	out	0x08, r1	; 8

		break;
    13ec:	09 c0       	rjmp	.+18     	; 0x1400 <timer2SwPWM+0xa2>
	}
	case 1:
	{
		timer2Start();
    13ee:	0e 94 8a 08 	call	0x1114	; 0x1114 <timer2Start>
		OCR2=pwm_time_on;
    13f2:	80 91 43 01 	lds	r24, 0x0143
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	90 93 b4 00 	sts	0x00B4, r25
    13fc:	80 93 b3 00 	sts	0x00B3, r24
	}

}


}
    1400:	cf 91       	pop	r28
    1402:	ff 90       	pop	r15
    1404:	ef 90       	pop	r14
    1406:	df 90       	pop	r13
    1408:	cf 90       	pop	r12
    140a:	08 95       	ret

0000140c <Timer2_interrupt_COMP_routine>:
void Timer2_interrupt_COMP_routine(void)
{



}
    140c:	08 95       	ret

0000140e <Timer2_interrupt_routine>:
void Timer2_interrupt_routine(void)
{
timer2_interrupt_raised=1;
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	80 93 41 01 	sts	0x0141, r24

}
    1414:	08 95       	ret

00001416 <Us_Init>:
 *                                                                                                  *
 *                                                                                                  *
 ***************************************************************************************************/

ERROR_STATUS Us_Init(void)
{uint8_t Ret;
    1416:	cf 92       	push	r12
    1418:	ef 92       	push	r14
    141a:	0f 93       	push	r16
    141c:	cf 93       	push	r28
Ret=DIO_init(&US_Configuration);
    141e:	84 e2       	ldi	r24, 0x24	; 36
    1420:	91 e0       	ldi	r25, 0x01	; 1
    1422:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_init>
Ret=Icu_Init(&ICU_Configuration);
    1426:	8f e0       	ldi	r24, 0x0F	; 15
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Icu_Init>
    142e:	c8 2f       	mov	r28, r24
timer2Init(T2_NORMAL_MODE,T2_OC2B_CLEAR,T2_PRESCALER_1024,0,0,0,T2_INTERRUPT_NORMAL);
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	60 e2       	ldi	r22, 0x20	; 32
    1434:	47 e0       	ldi	r20, 0x07	; 7
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	00 e0       	ldi	r16, 0x00	; 0
    143a:	ee 24       	eor	r14, r14
    143c:	cc 24       	eor	r12, r12
    143e:	c3 94       	inc	r12
    1440:	0e 94 9b 08 	call	0x1136	; 0x1136 <timer2Init>
return Ret;
}
    1444:	8c 2f       	mov	r24, r28
    1446:	cf 91       	pop	r28
    1448:	0f 91       	pop	r16
    144a:	ef 90       	pop	r14
    144c:	cf 90       	pop	r12
    144e:	08 95       	ret

00001450 <Us_Trigger>:
ERROR_STATUS Us_Trigger(void)
{uint8_t Ret=0;
if(timer2_interrupt_raised){
    1450:	80 91 41 01 	lds	r24, 0x0141
    1454:	88 23       	and	r24, r24
    1456:	99 f0       	breq	.+38     	; 0x147e <Us_Trigger+0x2e>
timer2_interrupt_raised=0;
    1458:	10 92 41 01 	sts	0x0141, r1
Ret=DIO_Toggle(GPIOC,BIT4);
    145c:	82 e0       	ldi	r24, 0x02	; 2
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	60 e1       	ldi	r22, 0x10	; 16
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    1468:	82 e3       	ldi	r24, 0x32	; 50
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	01 97       	sbiw	r24, 0x01	; 1
for (int i=0;i<50;i++)
    146e:	f1 f7       	brne	.-4      	; 0x146c <Us_Trigger+0x1c>
{;/*a pulse for 10 Micro seconds*/
}
Ret=DIO_Toggle(GPIOC,BIT4);
    1470:	82 e0       	ldi	r24, 0x02	; 2
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	60 e1       	ldi	r22, 0x10	; 16
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    147c:	08 95       	ret
Ret=Icu_Init(&ICU_Configuration);
timer2Init(T2_NORMAL_MODE,T2_OC2B_CLEAR,T2_PRESCALER_1024,0,0,0,T2_INTERRUPT_NORMAL);
return Ret;
}
ERROR_STATUS Us_Trigger(void)
{uint8_t Ret=0;
    147e:	80 e0       	ldi	r24, 0x00	; 0
{;/*a pulse for 10 Micro seconds*/
}
Ret=DIO_Toggle(GPIOC,BIT4);
}
return Ret;	
}
    1480:	08 95       	ret

00001482 <Us_GetDistance>:


ERROR_STATUS Us_GetDistance(uint16_t *Distance)
{uint8_t Ret=0;
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	00 d0       	rcall	.+0      	; 0x148c <Us_GetDistance+0xa>
    148c:	00 d0       	rcall	.+0      	; 0x148e <Us_GetDistance+0xc>
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	8c 01       	movw	r16, r24
	uint32_t u32l_Time;
	Ret=Icu_ReadTime(ICU_CH2,ICU_RISE_TO_FALL,&u32l_Time);
    1494:	82 e0       	ldi	r24, 0x02	; 2
    1496:	61 e0       	ldi	r22, 0x01	; 1
    1498:	ae 01       	movw	r20, r28
    149a:	4f 5f       	subi	r20, 0xFF	; 255
    149c:	5f 4f       	sbci	r21, 0xFF	; 255
    149e:	0e 94 91 01 	call	0x322	; 0x322 <Icu_ReadTime>
	*Distance=u32l_Time;
    14a2:	29 81       	ldd	r18, Y+1	; 0x01
    14a4:	3a 81       	ldd	r19, Y+2	; 0x02
    14a6:	f8 01       	movw	r30, r16
    14a8:	31 83       	std	Z+1, r19	; 0x01
    14aa:	20 83       	st	Z, r18
	return Ret;
}
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	08 95       	ret

000014be <__divsf3>:
    14be:	0c d0       	rcall	.+24     	; 0x14d8 <__divsf3x>
    14c0:	e6 c0       	rjmp	.+460    	; 0x168e <__fp_round>
    14c2:	de d0       	rcall	.+444    	; 0x1680 <__fp_pscB>
    14c4:	40 f0       	brcs	.+16     	; 0x14d6 <__divsf3+0x18>
    14c6:	d5 d0       	rcall	.+426    	; 0x1672 <__fp_pscA>
    14c8:	30 f0       	brcs	.+12     	; 0x14d6 <__divsf3+0x18>
    14ca:	21 f4       	brne	.+8      	; 0x14d4 <__divsf3+0x16>
    14cc:	5f 3f       	cpi	r21, 0xFF	; 255
    14ce:	19 f0       	breq	.+6      	; 0x14d6 <__divsf3+0x18>
    14d0:	c7 c0       	rjmp	.+398    	; 0x1660 <__fp_inf>
    14d2:	51 11       	cpse	r21, r1
    14d4:	10 c1       	rjmp	.+544    	; 0x16f6 <__fp_szero>
    14d6:	ca c0       	rjmp	.+404    	; 0x166c <__fp_nan>

000014d8 <__divsf3x>:
    14d8:	eb d0       	rcall	.+470    	; 0x16b0 <__fp_split3>
    14da:	98 f3       	brcs	.-26     	; 0x14c2 <__divsf3+0x4>

000014dc <__divsf3_pse>:
    14dc:	99 23       	and	r25, r25
    14de:	c9 f3       	breq	.-14     	; 0x14d2 <__divsf3+0x14>
    14e0:	55 23       	and	r21, r21
    14e2:	b1 f3       	breq	.-20     	; 0x14d0 <__divsf3+0x12>
    14e4:	95 1b       	sub	r25, r21
    14e6:	55 0b       	sbc	r21, r21
    14e8:	bb 27       	eor	r27, r27
    14ea:	aa 27       	eor	r26, r26
    14ec:	62 17       	cp	r22, r18
    14ee:	73 07       	cpc	r23, r19
    14f0:	84 07       	cpc	r24, r20
    14f2:	38 f0       	brcs	.+14     	; 0x1502 <__divsf3_pse+0x26>
    14f4:	9f 5f       	subi	r25, 0xFF	; 255
    14f6:	5f 4f       	sbci	r21, 0xFF	; 255
    14f8:	22 0f       	add	r18, r18
    14fa:	33 1f       	adc	r19, r19
    14fc:	44 1f       	adc	r20, r20
    14fe:	aa 1f       	adc	r26, r26
    1500:	a9 f3       	breq	.-22     	; 0x14ec <__divsf3_pse+0x10>
    1502:	33 d0       	rcall	.+102    	; 0x156a <__divsf3_pse+0x8e>
    1504:	0e 2e       	mov	r0, r30
    1506:	3a f0       	brmi	.+14     	; 0x1516 <__divsf3_pse+0x3a>
    1508:	e0 e8       	ldi	r30, 0x80	; 128
    150a:	30 d0       	rcall	.+96     	; 0x156c <__divsf3_pse+0x90>
    150c:	91 50       	subi	r25, 0x01	; 1
    150e:	50 40       	sbci	r21, 0x00	; 0
    1510:	e6 95       	lsr	r30
    1512:	00 1c       	adc	r0, r0
    1514:	ca f7       	brpl	.-14     	; 0x1508 <__divsf3_pse+0x2c>
    1516:	29 d0       	rcall	.+82     	; 0x156a <__divsf3_pse+0x8e>
    1518:	fe 2f       	mov	r31, r30
    151a:	27 d0       	rcall	.+78     	; 0x156a <__divsf3_pse+0x8e>
    151c:	66 0f       	add	r22, r22
    151e:	77 1f       	adc	r23, r23
    1520:	88 1f       	adc	r24, r24
    1522:	bb 1f       	adc	r27, r27
    1524:	26 17       	cp	r18, r22
    1526:	37 07       	cpc	r19, r23
    1528:	48 07       	cpc	r20, r24
    152a:	ab 07       	cpc	r26, r27
    152c:	b0 e8       	ldi	r27, 0x80	; 128
    152e:	09 f0       	breq	.+2      	; 0x1532 <__divsf3_pse+0x56>
    1530:	bb 0b       	sbc	r27, r27
    1532:	80 2d       	mov	r24, r0
    1534:	bf 01       	movw	r22, r30
    1536:	ff 27       	eor	r31, r31
    1538:	93 58       	subi	r25, 0x83	; 131
    153a:	5f 4f       	sbci	r21, 0xFF	; 255
    153c:	2a f0       	brmi	.+10     	; 0x1548 <__divsf3_pse+0x6c>
    153e:	9e 3f       	cpi	r25, 0xFE	; 254
    1540:	51 05       	cpc	r21, r1
    1542:	68 f0       	brcs	.+26     	; 0x155e <__divsf3_pse+0x82>
    1544:	8d c0       	rjmp	.+282    	; 0x1660 <__fp_inf>
    1546:	d7 c0       	rjmp	.+430    	; 0x16f6 <__fp_szero>
    1548:	5f 3f       	cpi	r21, 0xFF	; 255
    154a:	ec f3       	brlt	.-6      	; 0x1546 <__divsf3_pse+0x6a>
    154c:	98 3e       	cpi	r25, 0xE8	; 232
    154e:	dc f3       	brlt	.-10     	; 0x1546 <__divsf3_pse+0x6a>
    1550:	86 95       	lsr	r24
    1552:	77 95       	ror	r23
    1554:	67 95       	ror	r22
    1556:	b7 95       	ror	r27
    1558:	f7 95       	ror	r31
    155a:	9f 5f       	subi	r25, 0xFF	; 255
    155c:	c9 f7       	brne	.-14     	; 0x1550 <__divsf3_pse+0x74>
    155e:	88 0f       	add	r24, r24
    1560:	91 1d       	adc	r25, r1
    1562:	96 95       	lsr	r25
    1564:	87 95       	ror	r24
    1566:	97 f9       	bld	r25, 7
    1568:	08 95       	ret
    156a:	e1 e0       	ldi	r30, 0x01	; 1
    156c:	66 0f       	add	r22, r22
    156e:	77 1f       	adc	r23, r23
    1570:	88 1f       	adc	r24, r24
    1572:	bb 1f       	adc	r27, r27
    1574:	62 17       	cp	r22, r18
    1576:	73 07       	cpc	r23, r19
    1578:	84 07       	cpc	r24, r20
    157a:	ba 07       	cpc	r27, r26
    157c:	20 f0       	brcs	.+8      	; 0x1586 <__divsf3_pse+0xaa>
    157e:	62 1b       	sub	r22, r18
    1580:	73 0b       	sbc	r23, r19
    1582:	84 0b       	sbc	r24, r20
    1584:	ba 0b       	sbc	r27, r26
    1586:	ee 1f       	adc	r30, r30
    1588:	88 f7       	brcc	.-30     	; 0x156c <__divsf3_pse+0x90>
    158a:	e0 95       	com	r30
    158c:	08 95       	ret

0000158e <__fixunssfsi>:
    158e:	98 d0       	rcall	.+304    	; 0x16c0 <__fp_splitA>
    1590:	88 f0       	brcs	.+34     	; 0x15b4 <__fixunssfsi+0x26>
    1592:	9f 57       	subi	r25, 0x7F	; 127
    1594:	90 f0       	brcs	.+36     	; 0x15ba <__fixunssfsi+0x2c>
    1596:	b9 2f       	mov	r27, r25
    1598:	99 27       	eor	r25, r25
    159a:	b7 51       	subi	r27, 0x17	; 23
    159c:	a0 f0       	brcs	.+40     	; 0x15c6 <__fixunssfsi+0x38>
    159e:	d1 f0       	breq	.+52     	; 0x15d4 <__fixunssfsi+0x46>
    15a0:	66 0f       	add	r22, r22
    15a2:	77 1f       	adc	r23, r23
    15a4:	88 1f       	adc	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	1a f0       	brmi	.+6      	; 0x15b0 <__fixunssfsi+0x22>
    15aa:	ba 95       	dec	r27
    15ac:	c9 f7       	brne	.-14     	; 0x15a0 <__fixunssfsi+0x12>
    15ae:	12 c0       	rjmp	.+36     	; 0x15d4 <__fixunssfsi+0x46>
    15b0:	b1 30       	cpi	r27, 0x01	; 1
    15b2:	81 f0       	breq	.+32     	; 0x15d4 <__fixunssfsi+0x46>
    15b4:	9f d0       	rcall	.+318    	; 0x16f4 <__fp_zero>
    15b6:	b1 e0       	ldi	r27, 0x01	; 1
    15b8:	08 95       	ret
    15ba:	9c c0       	rjmp	.+312    	; 0x16f4 <__fp_zero>
    15bc:	67 2f       	mov	r22, r23
    15be:	78 2f       	mov	r23, r24
    15c0:	88 27       	eor	r24, r24
    15c2:	b8 5f       	subi	r27, 0xF8	; 248
    15c4:	39 f0       	breq	.+14     	; 0x15d4 <__fixunssfsi+0x46>
    15c6:	b9 3f       	cpi	r27, 0xF9	; 249
    15c8:	cc f3       	brlt	.-14     	; 0x15bc <__fixunssfsi+0x2e>
    15ca:	86 95       	lsr	r24
    15cc:	77 95       	ror	r23
    15ce:	67 95       	ror	r22
    15d0:	b3 95       	inc	r27
    15d2:	d9 f7       	brne	.-10     	; 0x15ca <__fixunssfsi+0x3c>
    15d4:	3e f4       	brtc	.+14     	; 0x15e4 <__fixunssfsi+0x56>
    15d6:	90 95       	com	r25
    15d8:	80 95       	com	r24
    15da:	70 95       	com	r23
    15dc:	61 95       	neg	r22
    15de:	7f 4f       	sbci	r23, 0xFF	; 255
    15e0:	8f 4f       	sbci	r24, 0xFF	; 255
    15e2:	9f 4f       	sbci	r25, 0xFF	; 255
    15e4:	08 95       	ret

000015e6 <__floatunsisf>:
    15e6:	e8 94       	clt
    15e8:	09 c0       	rjmp	.+18     	; 0x15fc <__floatsisf+0x12>

000015ea <__floatsisf>:
    15ea:	97 fb       	bst	r25, 7
    15ec:	3e f4       	brtc	.+14     	; 0x15fc <__floatsisf+0x12>
    15ee:	90 95       	com	r25
    15f0:	80 95       	com	r24
    15f2:	70 95       	com	r23
    15f4:	61 95       	neg	r22
    15f6:	7f 4f       	sbci	r23, 0xFF	; 255
    15f8:	8f 4f       	sbci	r24, 0xFF	; 255
    15fa:	9f 4f       	sbci	r25, 0xFF	; 255
    15fc:	99 23       	and	r25, r25
    15fe:	a9 f0       	breq	.+42     	; 0x162a <__floatsisf+0x40>
    1600:	f9 2f       	mov	r31, r25
    1602:	96 e9       	ldi	r25, 0x96	; 150
    1604:	bb 27       	eor	r27, r27
    1606:	93 95       	inc	r25
    1608:	f6 95       	lsr	r31
    160a:	87 95       	ror	r24
    160c:	77 95       	ror	r23
    160e:	67 95       	ror	r22
    1610:	b7 95       	ror	r27
    1612:	f1 11       	cpse	r31, r1
    1614:	f8 cf       	rjmp	.-16     	; 0x1606 <__floatsisf+0x1c>
    1616:	fa f4       	brpl	.+62     	; 0x1656 <__floatsisf+0x6c>
    1618:	bb 0f       	add	r27, r27
    161a:	11 f4       	brne	.+4      	; 0x1620 <__floatsisf+0x36>
    161c:	60 ff       	sbrs	r22, 0
    161e:	1b c0       	rjmp	.+54     	; 0x1656 <__floatsisf+0x6c>
    1620:	6f 5f       	subi	r22, 0xFF	; 255
    1622:	7f 4f       	sbci	r23, 0xFF	; 255
    1624:	8f 4f       	sbci	r24, 0xFF	; 255
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	16 c0       	rjmp	.+44     	; 0x1656 <__floatsisf+0x6c>
    162a:	88 23       	and	r24, r24
    162c:	11 f0       	breq	.+4      	; 0x1632 <__floatsisf+0x48>
    162e:	96 e9       	ldi	r25, 0x96	; 150
    1630:	11 c0       	rjmp	.+34     	; 0x1654 <__floatsisf+0x6a>
    1632:	77 23       	and	r23, r23
    1634:	21 f0       	breq	.+8      	; 0x163e <__floatsisf+0x54>
    1636:	9e e8       	ldi	r25, 0x8E	; 142
    1638:	87 2f       	mov	r24, r23
    163a:	76 2f       	mov	r23, r22
    163c:	05 c0       	rjmp	.+10     	; 0x1648 <__floatsisf+0x5e>
    163e:	66 23       	and	r22, r22
    1640:	71 f0       	breq	.+28     	; 0x165e <__floatsisf+0x74>
    1642:	96 e8       	ldi	r25, 0x86	; 134
    1644:	86 2f       	mov	r24, r22
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	2a f0       	brmi	.+10     	; 0x1656 <__floatsisf+0x6c>
    164c:	9a 95       	dec	r25
    164e:	66 0f       	add	r22, r22
    1650:	77 1f       	adc	r23, r23
    1652:	88 1f       	adc	r24, r24
    1654:	da f7       	brpl	.-10     	; 0x164c <__floatsisf+0x62>
    1656:	88 0f       	add	r24, r24
    1658:	96 95       	lsr	r25
    165a:	87 95       	ror	r24
    165c:	97 f9       	bld	r25, 7
    165e:	08 95       	ret

00001660 <__fp_inf>:
    1660:	97 f9       	bld	r25, 7
    1662:	9f 67       	ori	r25, 0x7F	; 127
    1664:	80 e8       	ldi	r24, 0x80	; 128
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	08 95       	ret

0000166c <__fp_nan>:
    166c:	9f ef       	ldi	r25, 0xFF	; 255
    166e:	80 ec       	ldi	r24, 0xC0	; 192
    1670:	08 95       	ret

00001672 <__fp_pscA>:
    1672:	00 24       	eor	r0, r0
    1674:	0a 94       	dec	r0
    1676:	16 16       	cp	r1, r22
    1678:	17 06       	cpc	r1, r23
    167a:	18 06       	cpc	r1, r24
    167c:	09 06       	cpc	r0, r25
    167e:	08 95       	ret

00001680 <__fp_pscB>:
    1680:	00 24       	eor	r0, r0
    1682:	0a 94       	dec	r0
    1684:	12 16       	cp	r1, r18
    1686:	13 06       	cpc	r1, r19
    1688:	14 06       	cpc	r1, r20
    168a:	05 06       	cpc	r0, r21
    168c:	08 95       	ret

0000168e <__fp_round>:
    168e:	09 2e       	mov	r0, r25
    1690:	03 94       	inc	r0
    1692:	00 0c       	add	r0, r0
    1694:	11 f4       	brne	.+4      	; 0x169a <__fp_round+0xc>
    1696:	88 23       	and	r24, r24
    1698:	52 f0       	brmi	.+20     	; 0x16ae <__fp_round+0x20>
    169a:	bb 0f       	add	r27, r27
    169c:	40 f4       	brcc	.+16     	; 0x16ae <__fp_round+0x20>
    169e:	bf 2b       	or	r27, r31
    16a0:	11 f4       	brne	.+4      	; 0x16a6 <__fp_round+0x18>
    16a2:	60 ff       	sbrs	r22, 0
    16a4:	04 c0       	rjmp	.+8      	; 0x16ae <__fp_round+0x20>
    16a6:	6f 5f       	subi	r22, 0xFF	; 255
    16a8:	7f 4f       	sbci	r23, 0xFF	; 255
    16aa:	8f 4f       	sbci	r24, 0xFF	; 255
    16ac:	9f 4f       	sbci	r25, 0xFF	; 255
    16ae:	08 95       	ret

000016b0 <__fp_split3>:
    16b0:	57 fd       	sbrc	r21, 7
    16b2:	90 58       	subi	r25, 0x80	; 128
    16b4:	44 0f       	add	r20, r20
    16b6:	55 1f       	adc	r21, r21
    16b8:	59 f0       	breq	.+22     	; 0x16d0 <__fp_splitA+0x10>
    16ba:	5f 3f       	cpi	r21, 0xFF	; 255
    16bc:	71 f0       	breq	.+28     	; 0x16da <__fp_splitA+0x1a>
    16be:	47 95       	ror	r20

000016c0 <__fp_splitA>:
    16c0:	88 0f       	add	r24, r24
    16c2:	97 fb       	bst	r25, 7
    16c4:	99 1f       	adc	r25, r25
    16c6:	61 f0       	breq	.+24     	; 0x16e0 <__fp_splitA+0x20>
    16c8:	9f 3f       	cpi	r25, 0xFF	; 255
    16ca:	79 f0       	breq	.+30     	; 0x16ea <__fp_splitA+0x2a>
    16cc:	87 95       	ror	r24
    16ce:	08 95       	ret
    16d0:	12 16       	cp	r1, r18
    16d2:	13 06       	cpc	r1, r19
    16d4:	14 06       	cpc	r1, r20
    16d6:	55 1f       	adc	r21, r21
    16d8:	f2 cf       	rjmp	.-28     	; 0x16be <__fp_split3+0xe>
    16da:	46 95       	lsr	r20
    16dc:	f1 df       	rcall	.-30     	; 0x16c0 <__fp_splitA>
    16de:	08 c0       	rjmp	.+16     	; 0x16f0 <__fp_splitA+0x30>
    16e0:	16 16       	cp	r1, r22
    16e2:	17 06       	cpc	r1, r23
    16e4:	18 06       	cpc	r1, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	f1 cf       	rjmp	.-30     	; 0x16cc <__fp_splitA+0xc>
    16ea:	86 95       	lsr	r24
    16ec:	71 05       	cpc	r23, r1
    16ee:	61 05       	cpc	r22, r1
    16f0:	08 94       	sec
    16f2:	08 95       	ret

000016f4 <__fp_zero>:
    16f4:	e8 94       	clt

000016f6 <__fp_szero>:
    16f6:	bb 27       	eor	r27, r27
    16f8:	66 27       	eor	r22, r22
    16fa:	77 27       	eor	r23, r23
    16fc:	cb 01       	movw	r24, r22
    16fe:	97 f9       	bld	r25, 7
    1700:	08 95       	ret

00001702 <__mulsf3>:
    1702:	0b d0       	rcall	.+22     	; 0x171a <__mulsf3x>
    1704:	c4 cf       	rjmp	.-120    	; 0x168e <__fp_round>
    1706:	b5 df       	rcall	.-150    	; 0x1672 <__fp_pscA>
    1708:	28 f0       	brcs	.+10     	; 0x1714 <__mulsf3+0x12>
    170a:	ba df       	rcall	.-140    	; 0x1680 <__fp_pscB>
    170c:	18 f0       	brcs	.+6      	; 0x1714 <__mulsf3+0x12>
    170e:	95 23       	and	r25, r21
    1710:	09 f0       	breq	.+2      	; 0x1714 <__mulsf3+0x12>
    1712:	a6 cf       	rjmp	.-180    	; 0x1660 <__fp_inf>
    1714:	ab cf       	rjmp	.-170    	; 0x166c <__fp_nan>
    1716:	11 24       	eor	r1, r1
    1718:	ee cf       	rjmp	.-36     	; 0x16f6 <__fp_szero>

0000171a <__mulsf3x>:
    171a:	ca df       	rcall	.-108    	; 0x16b0 <__fp_split3>
    171c:	a0 f3       	brcs	.-24     	; 0x1706 <__mulsf3+0x4>

0000171e <__mulsf3_pse>:
    171e:	95 9f       	mul	r25, r21
    1720:	d1 f3       	breq	.-12     	; 0x1716 <__mulsf3+0x14>
    1722:	95 0f       	add	r25, r21
    1724:	50 e0       	ldi	r21, 0x00	; 0
    1726:	55 1f       	adc	r21, r21
    1728:	62 9f       	mul	r22, r18
    172a:	f0 01       	movw	r30, r0
    172c:	72 9f       	mul	r23, r18
    172e:	bb 27       	eor	r27, r27
    1730:	f0 0d       	add	r31, r0
    1732:	b1 1d       	adc	r27, r1
    1734:	63 9f       	mul	r22, r19
    1736:	aa 27       	eor	r26, r26
    1738:	f0 0d       	add	r31, r0
    173a:	b1 1d       	adc	r27, r1
    173c:	aa 1f       	adc	r26, r26
    173e:	64 9f       	mul	r22, r20
    1740:	66 27       	eor	r22, r22
    1742:	b0 0d       	add	r27, r0
    1744:	a1 1d       	adc	r26, r1
    1746:	66 1f       	adc	r22, r22
    1748:	82 9f       	mul	r24, r18
    174a:	22 27       	eor	r18, r18
    174c:	b0 0d       	add	r27, r0
    174e:	a1 1d       	adc	r26, r1
    1750:	62 1f       	adc	r22, r18
    1752:	73 9f       	mul	r23, r19
    1754:	b0 0d       	add	r27, r0
    1756:	a1 1d       	adc	r26, r1
    1758:	62 1f       	adc	r22, r18
    175a:	83 9f       	mul	r24, r19
    175c:	a0 0d       	add	r26, r0
    175e:	61 1d       	adc	r22, r1
    1760:	22 1f       	adc	r18, r18
    1762:	74 9f       	mul	r23, r20
    1764:	33 27       	eor	r19, r19
    1766:	a0 0d       	add	r26, r0
    1768:	61 1d       	adc	r22, r1
    176a:	23 1f       	adc	r18, r19
    176c:	84 9f       	mul	r24, r20
    176e:	60 0d       	add	r22, r0
    1770:	21 1d       	adc	r18, r1
    1772:	82 2f       	mov	r24, r18
    1774:	76 2f       	mov	r23, r22
    1776:	6a 2f       	mov	r22, r26
    1778:	11 24       	eor	r1, r1
    177a:	9f 57       	subi	r25, 0x7F	; 127
    177c:	50 40       	sbci	r21, 0x00	; 0
    177e:	8a f0       	brmi	.+34     	; 0x17a2 <__mulsf3_pse+0x84>
    1780:	e1 f0       	breq	.+56     	; 0x17ba <__mulsf3_pse+0x9c>
    1782:	88 23       	and	r24, r24
    1784:	4a f0       	brmi	.+18     	; 0x1798 <__mulsf3_pse+0x7a>
    1786:	ee 0f       	add	r30, r30
    1788:	ff 1f       	adc	r31, r31
    178a:	bb 1f       	adc	r27, r27
    178c:	66 1f       	adc	r22, r22
    178e:	77 1f       	adc	r23, r23
    1790:	88 1f       	adc	r24, r24
    1792:	91 50       	subi	r25, 0x01	; 1
    1794:	50 40       	sbci	r21, 0x00	; 0
    1796:	a9 f7       	brne	.-22     	; 0x1782 <__mulsf3_pse+0x64>
    1798:	9e 3f       	cpi	r25, 0xFE	; 254
    179a:	51 05       	cpc	r21, r1
    179c:	70 f0       	brcs	.+28     	; 0x17ba <__mulsf3_pse+0x9c>
    179e:	60 cf       	rjmp	.-320    	; 0x1660 <__fp_inf>
    17a0:	aa cf       	rjmp	.-172    	; 0x16f6 <__fp_szero>
    17a2:	5f 3f       	cpi	r21, 0xFF	; 255
    17a4:	ec f3       	brlt	.-6      	; 0x17a0 <__mulsf3_pse+0x82>
    17a6:	98 3e       	cpi	r25, 0xE8	; 232
    17a8:	dc f3       	brlt	.-10     	; 0x17a0 <__mulsf3_pse+0x82>
    17aa:	86 95       	lsr	r24
    17ac:	77 95       	ror	r23
    17ae:	67 95       	ror	r22
    17b0:	b7 95       	ror	r27
    17b2:	f7 95       	ror	r31
    17b4:	e7 95       	ror	r30
    17b6:	9f 5f       	subi	r25, 0xFF	; 255
    17b8:	c1 f7       	brne	.-16     	; 0x17aa <__mulsf3_pse+0x8c>
    17ba:	fe 2b       	or	r31, r30
    17bc:	88 0f       	add	r24, r24
    17be:	91 1d       	adc	r25, r1
    17c0:	96 95       	lsr	r25
    17c2:	87 95       	ror	r24
    17c4:	97 f9       	bld	r25, 7
    17c6:	08 95       	ret

000017c8 <_exit>:
    17c8:	f8 94       	cli

000017ca <__stop_program>:
    17ca:	ff cf       	rjmp	.-2      	; 0x17ca <__stop_program>
