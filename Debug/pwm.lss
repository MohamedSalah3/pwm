
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  000019e4  00001a78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  00800128  00800128  00001aa0  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00001aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  0000366c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00003bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002338  00000000  00000000  00003d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4f  00000000  00000000  000060c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f0  00000000  00000000  00006c17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dbc  00000000  00000000  00007608  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d4d  00000000  00000000  000083c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000227b  00000000  00000000  00009111  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 82 02 	jmp	0x504	; 0x504 <__vector_1>
       8:	0c 94 a9 02 	jmp	0x552	; 0x552 <__vector_2>
       c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__vector_3>
      10:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_4>
      14:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__vector_5>
      18:	0c 94 45 03 	jmp	0x68a	; 0x68a <__vector_6>
      1c:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__vector_7>
      20:	0c 94 93 03 	jmp	0x726	; 0x726 <__vector_8>
      24:	0c 94 ba 03 	jmp	0x774	; 0x774 <__vector_9>
      28:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__vector_10>
      2c:	0c 94 08 04 	jmp	0x810	; 0x810 <__vector_11>
      30:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__vector_12>
      34:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__vector_13>
      38:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__vector_14>
      3c:	0c 94 a4 04 	jmp	0x948	; 0x948 <__vector_15>
      40:	0c 94 cb 04 	jmp	0x996	; 0x996 <__vector_16>
      44:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <__vector_17>
      48:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__vector_18>
      4c:	0c 94 40 05 	jmp	0xa80	; 0xa80 <__vector_19>
      50:	0c 94 67 05 	jmp	0xace	; 0xace <__vector_20>
      54:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__vector_21>
      58:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__vector_22>
      5c:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__vector_23>
      60:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__vector_24>
      64:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <__vector_25>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 ee       	ldi	r30, 0xE4	; 228
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 32       	cpi	r26, 0x28	; 40
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a8 e2       	ldi	r26, 0x28	; 40
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 37       	cpi	r26, 0x77	; 119
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 51 06 	call	0xca2	; 0xca2 <main>
      9e:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DIO_init>:
*/


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
      a6:	fc 01       	movw	r30, r24
  uint8_t RET=0;
  static uint8_t Multiple_init=0;
  if (DIO_info == NULL)
      a8:	00 97       	sbiw	r24, 0x00	; 0
      aa:	09 f4       	brne	.+2      	; 0xae <DIO_init+0x8>
      ac:	5e c0       	rjmp	.+188    	; 0x16a <DIO_init+0xc4>
  {
    RET=NULL_PTR+DIO_MODULE;

  }else{
    u8_is_init=1;
      ae:	81 e0       	ldi	r24, 0x01	; 1
      b0:	80 93 28 01 	sts	0x0128, r24
    switch(DIO_info->dir)
      b4:	82 81       	ldd	r24, Z+2	; 0x02
      b6:	88 23       	and	r24, r24
      b8:	21 f0       	breq	.+8      	; 0xc2 <DIO_init+0x1c>
      ba:	8f 3f       	cpi	r24, 0xFF	; 255
      bc:	09 f0       	breq	.+2      	; 0xc0 <DIO_init+0x1a>
      be:	57 c0       	rjmp	.+174    	; 0x16e <DIO_init+0xc8>
      c0:	2c c0       	rjmp	.+88     	; 0x11a <DIO_init+0x74>
    {
    case INPUT:
      switch(DIO_info ->GPIO)
      c2:	80 81       	ld	r24, Z
      c4:	82 30       	cpi	r24, 0x02	; 2
      c6:	89 f0       	breq	.+34     	; 0xea <DIO_init+0x44>
      c8:	83 30       	cpi	r24, 0x03	; 3
      ca:	d9 f0       	breq	.+54     	; 0x102 <DIO_init+0x5c>
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	09 f0       	breq	.+2      	; 0xd2 <DIO_init+0x2c>
      d0:	50 c0       	rjmp	.+160    	; 0x172 <DIO_init+0xcc>
      {
      case GPIOB:
        PORTB_DIR &=(~(DIO_info->pins)) ;
      d2:	94 b1       	in	r25, 0x04	; 4
      d4:	81 81       	ldd	r24, Z+1	; 0x01
      d6:	80 95       	com	r24
      d8:	89 23       	and	r24, r25
      da:	84 b9       	out	0x04, r24	; 4
        Multiple_init+=2;
      dc:	80 91 29 01 	lds	r24, 0x0129
      e0:	8e 5f       	subi	r24, 0xFE	; 254
      e2:	80 93 29 01 	sts	0x0129, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
      e6:	80 e0       	ldi	r24, 0x00	; 0
      switch(DIO_info ->GPIO)
      {
      case GPIOB:
        PORTB_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=2;
        break;
      e8:	08 95       	ret
      case GPIOC:
        PORTC_DIR &=(~(DIO_info->pins)) ;
      ea:	97 b1       	in	r25, 0x07	; 7
      ec:	81 81       	ldd	r24, Z+1	; 0x01
      ee:	80 95       	com	r24
      f0:	89 23       	and	r24, r25
      f2:	87 b9       	out	0x07, r24	; 7
        Multiple_init+=3;
      f4:	80 91 29 01 	lds	r24, 0x0129
      f8:	8d 5f       	subi	r24, 0xFD	; 253
      fa:	80 93 29 01 	sts	0x0129, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
      fe:	80 e0       	ldi	r24, 0x00	; 0
        Multiple_init+=2;
        break;
      case GPIOC:
        PORTC_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=3;
        break;
     100:	08 95       	ret
      case GPIOD:
        PORTD_DIR &=(~(DIO_info->pins)) ;
     102:	9a b1       	in	r25, 0x0a	; 10
     104:	81 81       	ldd	r24, Z+1	; 0x01
     106:	80 95       	com	r24
     108:	89 23       	and	r24, r25
     10a:	8a b9       	out	0x0a, r24	; 10
        Multiple_init+=4;
     10c:	80 91 29 01 	lds	r24, 0x0129
     110:	8c 5f       	subi	r24, 0xFC	; 252
     112:	80 93 29 01 	sts	0x0129, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     116:	80 e0       	ldi	r24, 0x00	; 0
        Multiple_init+=3;
        break;
      case GPIOD:
        PORTD_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=4;
        break;
     118:	08 95       	ret
        break;
      }
      break;

      case OUTPUT:
        switch(DIO_info ->GPIO)
     11a:	80 81       	ld	r24, Z
     11c:	82 30       	cpi	r24, 0x02	; 2
     11e:	79 f0       	breq	.+30     	; 0x13e <DIO_init+0x98>
     120:	83 30       	cpi	r24, 0x03	; 3
     122:	c1 f0       	breq	.+48     	; 0x154 <DIO_init+0xae>
     124:	81 30       	cpi	r24, 0x01	; 1
     126:	39 f5       	brne	.+78     	; 0x176 <DIO_init+0xd0>
        {
        case GPIOB:
          PORTB_DIR |=(DIO_info->pins)  ;
     128:	94 b1       	in	r25, 0x04	; 4
     12a:	81 81       	ldd	r24, Z+1	; 0x01
     12c:	89 2b       	or	r24, r25
     12e:	84 b9       	out	0x04, r24	; 4
          Multiple_init+=2;
     130:	80 91 29 01 	lds	r24, 0x0129
     134:	8e 5f       	subi	r24, 0xFE	; 254
     136:	80 93 29 01 	sts	0x0129, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     13a:	80 e0       	ldi	r24, 0x00	; 0
        switch(DIO_info ->GPIO)
        {
        case GPIOB:
          PORTB_DIR |=(DIO_info->pins)  ;
          Multiple_init+=2;
          break;
     13c:	08 95       	ret
        case GPIOC:
          PORTC_DIR |=(DIO_info->pins)  ;
     13e:	97 b1       	in	r25, 0x07	; 7
     140:	81 81       	ldd	r24, Z+1	; 0x01
     142:	89 2b       	or	r24, r25
     144:	87 b9       	out	0x07, r24	; 7
          Multiple_init+=3;
     146:	80 91 29 01 	lds	r24, 0x0129
     14a:	8d 5f       	subi	r24, 0xFD	; 253
     14c:	80 93 29 01 	sts	0x0129, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     150:	80 e0       	ldi	r24, 0x00	; 0
          Multiple_init+=2;
          break;
        case GPIOC:
          PORTC_DIR |=(DIO_info->pins)  ;
          Multiple_init+=3;
          break;
     152:	08 95       	ret
        case GPIOD:
          PORTD_DIR |=(DIO_info->pins)  ;
     154:	9a b1       	in	r25, 0x0a	; 10
     156:	81 81       	ldd	r24, Z+1	; 0x01
     158:	89 2b       	or	r24, r25
     15a:	8a b9       	out	0x0a, r24	; 10
          Multiple_init+=4;
     15c:	80 91 29 01 	lds	r24, 0x0129
     160:	8c 5f       	subi	r24, 0xFC	; 252
     162:	80 93 29 01 	sts	0x0129, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     166:	80 e0       	ldi	r24, 0x00	; 0
          Multiple_init+=3;
          break;
        case GPIOD:
          PORTD_DIR |=(DIO_info->pins)  ;
          Multiple_init+=4;
          break;
     168:	08 95       	ret
{
  uint8_t RET=0;
  static uint8_t Multiple_init=0;
  if (DIO_info == NULL)
  {
    RET=NULL_PTR+DIO_MODULE;
     16a:	86 e1       	ldi	r24, 0x16	; 22
     16c:	08 95       	ret
          break;
        }

        break;
        default:
          RET=E_NOK+DIO_MODULE+INVALID_DIRECTION;
     16e:	83 e2       	ldi	r24, 0x23	; 35
     170:	08 95       	ret
      case GPIOD:
        PORTD_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=4;
        break;
      default:
        RET=E_NOK+DIO_MODULE+INVALID_PORT;
     172:	85 e2       	ldi	r24, 0x25	; 37
     174:	08 95       	ret
        case GPIOD:
          PORTD_DIR |=(DIO_info->pins)  ;
          Multiple_init+=4;
          break;
        default:
          RET=E_NOK+DIO_MODULE+INVALID_PORT;
     176:	85 e2       	ldi	r24, 0x25	; 37
    }


  }
  return RET;
}
     178:	08 95       	ret

0000017a <DIO_deinit>:

void DIO_deinit(void){
  u8_is_init=0;
     17a:	10 92 28 01 	sts	0x0128, r1
}
     17e:	08 95       	ret

00000180 <DIO_is_init>:

void DIO_is_init(void){
  u8_is_init=1;
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	80 93 28 01 	sts	0x0128, r24
}
     186:	08 95       	ret

00000188 <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;

if(u8_is_init==1){
     188:	90 91 28 01 	lds	r25, 0x0128
     18c:	91 30       	cpi	r25, 0x01	; 1
     18e:	91 f5       	brne	.+100    	; 0x1f4 <DIO_Write+0x6c>
switch(value){
     190:	44 23       	and	r20, r20
     192:	19 f0       	breq	.+6      	; 0x19a <DIO_Write+0x12>
     194:	4f 3f       	cpi	r20, 0xFF	; 255
     196:	81 f5       	brne	.+96     	; 0x1f8 <DIO_Write+0x70>
     198:	18 c0       	rjmp	.+48     	; 0x1ca <DIO_Write+0x42>
case LOW:
{
  switch (GPIO)
     19a:	82 30       	cpi	r24, 0x02	; 2
     19c:	51 f0       	breq	.+20     	; 0x1b2 <DIO_Write+0x2a>
     19e:	83 30       	cpi	r24, 0x03	; 3
     1a0:	71 f0       	breq	.+28     	; 0x1be <DIO_Write+0x36>
     1a2:	81 30       	cpi	r24, 0x01	; 1
     1a4:	59 f5       	brne	.+86     	; 0x1fc <DIO_Write+0x74>
  {
  case GPIOB:
    PORTB_DATA &= ~(pins);
     1a6:	85 b1       	in	r24, 0x05	; 5
     1a8:	60 95       	com	r22
     1aa:	68 23       	and	r22, r24
     1ac:	65 b9       	out	0x05, r22	; 5
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1ae:	84 e1       	ldi	r24, 0x14	; 20
{
  switch (GPIO)
  {
  case GPIOB:
    PORTB_DATA &= ~(pins);
    break;
     1b0:	08 95       	ret
  case GPIOC:
    PORTC_DATA &= ~(pins);
     1b2:	88 b1       	in	r24, 0x08	; 8
     1b4:	60 95       	com	r22
     1b6:	68 23       	and	r22, r24
     1b8:	68 b9       	out	0x08, r22	; 8
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1ba:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    PORTB_DATA &= ~(pins);
    break;
  case GPIOC:
    PORTC_DATA &= ~(pins);
    break;
     1bc:	08 95       	ret
  case GPIOD:
    PORTD_DATA &= ~(pins);
     1be:	8b b1       	in	r24, 0x0b	; 11
     1c0:	60 95       	com	r22
     1c2:	68 23       	and	r22, r24
     1c4:	6b b9       	out	0x0b, r22	; 11
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1c6:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    PORTC_DATA &= ~(pins);
    break;
  case GPIOD:
    PORTD_DATA &= ~(pins);
    break;
     1c8:	08 95       	ret
    break;
  }
  break;
}
case HIGH:{
  switch (GPIO)
     1ca:	82 30       	cpi	r24, 0x02	; 2
     1cc:	49 f0       	breq	.+18     	; 0x1e0 <DIO_Write+0x58>
     1ce:	83 30       	cpi	r24, 0x03	; 3
     1d0:	61 f0       	breq	.+24     	; 0x1ea <DIO_Write+0x62>
     1d2:	81 30       	cpi	r24, 0x01	; 1
     1d4:	a9 f4       	brne	.+42     	; 0x200 <DIO_Write+0x78>
  { 
  case GPIOB:
    PORTB_DATA |=(pins);
     1d6:	85 b1       	in	r24, 0x05	; 5
     1d8:	68 2b       	or	r22, r24
     1da:	65 b9       	out	0x05, r22	; 5
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1dc:	84 e1       	ldi	r24, 0x14	; 20
case HIGH:{
  switch (GPIO)
  { 
  case GPIOB:
    PORTB_DATA |=(pins);
    break;
     1de:	08 95       	ret
  case GPIOC:
    PORTC_DATA |=(pins);
     1e0:	88 b1       	in	r24, 0x08	; 8
     1e2:	68 2b       	or	r22, r24
     1e4:	68 b9       	out	0x08, r22	; 8
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1e6:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    PORTB_DATA |=(pins);
    break;
  case GPIOC:
    PORTC_DATA |=(pins);
    break;
     1e8:	08 95       	ret
  case GPIOD:
    PORTD_DATA |=(pins);
     1ea:	8b b1       	in	r24, 0x0b	; 11
     1ec:	68 2b       	or	r22, r24
     1ee:	6b b9       	out	0x0b, r22	; 11
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1f0:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    PORTC_DATA |=(pins);
    break;
  case GPIOD:
    PORTD_DATA |=(pins);
    break;
     1f2:	08 95       	ret
default:
  Ret+=INVALID_VALUE;
  break;
}

}else{Ret+=NOT_INIT;}
     1f4:	88 e1       	ldi	r24, 0x18	; 24
     1f6:	08 95       	ret
    break;
  }
  break;
}
default:
  Ret+=INVALID_VALUE;
     1f8:	86 e2       	ldi	r24, 0x26	; 38
     1fa:	08 95       	ret
    break;
  case GPIOD:
    PORTD_DATA &= ~(pins);
    break;
  default:
    Ret+=INVALID_PORT;
     1fc:	84 e2       	ldi	r24, 0x24	; 36
     1fe:	08 95       	ret
    break;
  case GPIOD:
    PORTD_DATA |=(pins);
    break;
  default:
    Ret+=INVALID_PORT;
     200:	84 e2       	ldi	r24, 0x24	; 36
  break;
}

}else{Ret+=NOT_INIT;}
return Ret;
}
     202:	08 95       	ret

00000204 <DIO_Read>:


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
if(u8_is_init==1){
     204:	90 91 28 01 	lds	r25, 0x0128
     208:	91 30       	cpi	r25, 0x01	; 1
     20a:	01 f5       	brne	.+64     	; 0x24c <DIO_Read+0x48>
  switch (GPIO)
     20c:	82 30       	cpi	r24, 0x02	; 2
     20e:	51 f0       	breq	.+20     	; 0x224 <DIO_Read+0x20>
     210:	83 30       	cpi	r24, 0x03	; 3
     212:	71 f0       	breq	.+28     	; 0x230 <DIO_Read+0x2c>
     214:	81 30       	cpi	r24, 0x01	; 1
     216:	91 f4       	brne	.+36     	; 0x23c <DIO_Read+0x38>
  { 
  case GPIOB:
    *data=(PORTB_PIN & pins);
     218:	83 b1       	in	r24, 0x03	; 3
     21a:	68 23       	and	r22, r24
     21c:	fa 01       	movw	r30, r20
     21e:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
     220:	84 e1       	ldi	r24, 0x14	; 20
if(u8_is_init==1){
  switch (GPIO)
  { 
  case GPIOB:
    *data=(PORTB_PIN & pins);
    break;
     222:	0d c0       	rjmp	.+26     	; 0x23e <DIO_Read+0x3a>
  case GPIOC:
    *data=(PORTC_PIN & pins);
     224:	86 b1       	in	r24, 0x06	; 6
     226:	68 23       	and	r22, r24
     228:	fa 01       	movw	r30, r20
     22a:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
     22c:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    *data=(PORTB_PIN & pins);
    break;
  case GPIOC:
    *data=(PORTC_PIN & pins);
    break;
     22e:	07 c0       	rjmp	.+14     	; 0x23e <DIO_Read+0x3a>
  case GPIOD:
    *data=(PORTD_PIN & pins);
     230:	89 b1       	in	r24, 0x09	; 9
     232:	68 23       	and	r22, r24
     234:	fa 01       	movw	r30, r20
     236:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
     238:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    *data=(PORTC_PIN & pins);
    break;
  case GPIOD:
    *data=(PORTD_PIN & pins);
    break;
     23a:	01 c0       	rjmp	.+2      	; 0x23e <DIO_Read+0x3a>
    default:
    ret+=INVALID_PORT;
     23c:	84 e2       	ldi	r24, 0x24	; 36
    break;
  }
  if(*data > 0)
     23e:	fa 01       	movw	r30, r20
     240:	90 81       	ld	r25, Z
     242:	99 23       	and	r25, r25
     244:	21 f0       	breq	.+8      	; 0x24e <DIO_Read+0x4a>
  {
    *data = 1;
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	90 83       	st	Z, r25
     24a:	08 95       	ret
  }
}else{ret+=NOT_INIT;}
     24c:	88 e1       	ldi	r24, 0x18	; 24
return ret;
}
     24e:	08 95       	ret

00000250 <DIO_Toggle>:
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
if(u8_is_init==1){
     250:	90 91 28 01 	lds	r25, 0x0128
     254:	91 30       	cpi	r25, 0x01	; 1
     256:	a9 f4       	brne	.+42     	; 0x282 <DIO_Toggle+0x32>
  switch (GPIO)
     258:	82 30       	cpi	r24, 0x02	; 2
     25a:	49 f0       	breq	.+18     	; 0x26e <DIO_Toggle+0x1e>
     25c:	83 30       	cpi	r24, 0x03	; 3
     25e:	61 f0       	breq	.+24     	; 0x278 <DIO_Toggle+0x28>
     260:	81 30       	cpi	r24, 0x01	; 1
     262:	89 f4       	brne	.+34     	; 0x286 <DIO_Toggle+0x36>
  {
  case GPIOB:
    PORTB_DATA ^=(pins);
     264:	85 b1       	in	r24, 0x05	; 5
     266:	68 27       	eor	r22, r24
     268:	65 b9       	out	0x05, r22	; 5
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
     26a:	84 e1       	ldi	r24, 0x14	; 20
if(u8_is_init==1){
  switch (GPIO)
  {
  case GPIOB:
    PORTB_DATA ^=(pins);
    break;
     26c:	08 95       	ret
  case GPIOC:
    PORTC_DATA ^=(pins);
     26e:	88 b1       	in	r24, 0x08	; 8
     270:	68 27       	eor	r22, r24
     272:	68 b9       	out	0x08, r22	; 8
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
     274:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    PORTB_DATA ^=(pins);
    break;
  case GPIOC:
    PORTC_DATA ^=(pins);
    break;
     276:	08 95       	ret
  case GPIOD:
    PORTD_DATA ^=(pins);
     278:	8b b1       	in	r24, 0x0b	; 11
     27a:	68 27       	eor	r22, r24
     27c:	6b b9       	out	0x0b, r22	; 11
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
     27e:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    PORTC_DATA ^=(pins);
    break;
  case GPIOD:
    PORTD_DATA ^=(pins);
    break;
     280:	08 95       	ret
  default:
    ret+=INVALID_PORT;
    break;
  }
}else{ret+=NOT_INIT;}
     282:	88 e1       	ldi	r24, 0x18	; 24
     284:	08 95       	ret
    break;
  case GPIOD:
    PORTD_DATA ^=(pins);
    break;
  default:
    ret+=INVALID_PORT;
     286:	84 e2       	ldi	r24, 0x24	; 36
    break;
  }
}else{ret+=NOT_INIT;}
  return ret;
}
     288:	08 95       	ret

0000028a <system_init>:


void system_init(void)
{

Us_Init();
     28a:	0e 94 17 0b 	call	0x162e	; 0x162e <Us_Init>
motor_init();
     28e:	0e 94 56 06 	call	0xcac	; 0xcac <motor_init>
speaker_init();
     292:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <speaker_init>


}
     296:	08 95       	ret

00000298 <system_update>:


void system_update(void)
{
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	00 d0       	rcall	.+0      	; 0x29e <system_update+0x6>
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
uint16_t Distance = 0;
     2a2:	1a 82       	std	Y+2, r1	; 0x02
     2a4:	19 82       	std	Y+1, r1	; 0x01
uint8_t state_machine=0;
Us_Trigger();
     2a6:	0e 94 34 0b 	call	0x1668	; 0x1668 <Us_Trigger>
Us_GetDistance(&Distance);
     2aa:	ce 01       	movw	r24, r28
     2ac:	01 96       	adiw	r24, 0x01	; 1
     2ae:	0e 94 4d 0b 	call	0x169a	; 0x169a <Us_GetDistance>
state_machine = 6;
motor_start_sm(state_machine);
     2b2:	86 e0       	ldi	r24, 0x06	; 6
     2b4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <motor_start_sm>
speaker_start_sm(state_machine);
     2b8:	86 e0       	ldi	r24, 0x06	; 6
     2ba:	0e 94 dd 07 	call	0xfba	; 0xfba <speaker_start_sm>


}
     2be:	0f 90       	pop	r0
     2c0:	0f 90       	pop	r0
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <Icu_Init>:
static volatile uint32_t u32_Time_rising_edge=0;
static volatile uint32_t u32_Time_faling_edge=0;
static volatile uint32_t Timer_High=0;
static volatile uint32_t Timer_Low=0;
ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	ec 01       	movw	r28, r24
  uint8_t Ret=0;
//Enable Global int
G_interrupt_Enable();
     2ce:	0e 94 63 02 	call	0x4c6	; 0x4c6 <G_interrupt_Enable>
//Enable EXTI
switch(Icu_Cfg->ICU_Ch_No)
     2d2:	88 81       	ld	r24, Y
     2d4:	88 23       	and	r24, r24
     2d6:	19 f0       	breq	.+6      	; 0x2de <Icu_Init+0x16>
     2d8:	81 30       	cpi	r24, 0x01	; 1
     2da:	91 f4       	brne	.+36     	; 0x300 <Icu_Init+0x38>
     2dc:	09 c0       	rjmp	.+18     	; 0x2f0 <Icu_Init+0x28>
{
case ICU_CH0:
EX_interrupt0_enable0();
     2de:	0e 94 73 02 	call	0x4e6	; 0x4e6 <EX_interrupt0_enable0>
INT0_external_interrupt = (Icu_Cfg->external_int);
     2e2:	8a 81       	ldd	r24, Y+2	; 0x02
     2e4:	9b 81       	ldd	r25, Y+3	; 0x03
     2e6:	90 93 1a 01 	sts	0x011A, r25
     2ea:	80 93 19 01 	sts	0x0119, r24

break;
     2ee:	08 c0       	rjmp	.+16     	; 0x300 <Icu_Init+0x38>
case ICU_CH1:
EX_interrupt1_enable1();
     2f0:	0e 94 67 02 	call	0x4ce	; 0x4ce <EX_interrupt1_enable1>
INT1_external_interrupt = (Icu_Cfg->external_int);
     2f4:	8a 81       	ldd	r24, Y+2	; 0x02
     2f6:	9b 81       	ldd	r25, Y+3	; 0x03
     2f8:	90 93 72 01 	sts	0x0172, r25
     2fc:	80 93 71 01 	sts	0x0171, r24

break;
}

switch(Icu_Cfg->ICU_Ch_Timer)
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	81 30       	cpi	r24, 0x01	; 1
     304:	61 f4       	brne	.+24     	; 0x31e <Icu_Init+0x56>
    TCCR0=0x05;
    TIMSK0=0x01;
    break;
    */
   case ICU_TIMER_CH1:
   TCCR1B=0x05;
     306:	85 e0       	ldi	r24, 0x05	; 5
     308:	80 93 81 00 	sts	0x0081, r24
	TIMSK1=0x01;
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	80 93 6f 00 	sts	0x006F, r24
	TIMER1OVF=(Icu_Cfg->timer_int);
     312:	8c 81       	ldd	r24, Y+4	; 0x04
     314:	9d 81       	ldd	r25, Y+5	; 0x05
     316:	90 93 16 01 	sts	0x0116, r25
     31a:	80 93 15 01 	sts	0x0115, r24
 */
}


return Ret;
}
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <Icu_ReadTime>:
 *          - E_NOK : not successful                   *
 * Description  : calculates the time between 2 edges              *
 ***************************************************************************/

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time)
{
     326:	0f 93       	push	r16
     328:	1f 93       	push	r17
uint8_t Ret=0;
switch(Icu_Channel)
     32a:	81 30       	cpi	r24, 0x01	; 1
     32c:	29 f4       	brne	.+10     	; 0x338 <Icu_ReadTime+0x12>
 /* case ICU_TIMER_CH0:
  TCCR0|=0x03;
  Ret=E_OK;
  break;
 */ case ICU_TIMER_CH1:
  TCCR1B|=0x05;
     32e:	e1 e8       	ldi	r30, 0x81	; 129
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	80 81       	ld	r24, Z
     334:	85 60       	ori	r24, 0x05	; 5
     336:	80 83       	st	Z, r24
  default:
  Ret=E_NOK;
  break;
}

switch(Icu_EdgeToEdge)
     338:	61 30       	cpi	r22, 0x01	; 1
     33a:	01 f1       	breq	.+64     	; 0x37c <Icu_ReadTime+0x56>
     33c:	61 30       	cpi	r22, 0x01	; 1
     33e:	18 f0       	brcs	.+6      	; 0x346 <Icu_ReadTime+0x20>
     340:	62 30       	cpi	r22, 0x02	; 2
     342:	d1 f5       	brne	.+116    	; 0x3b8 <Icu_ReadTime+0x92>
     344:	2a c0       	rjmp	.+84     	; 0x39a <Icu_ReadTime+0x74>
{
  case ICU_RISE_TO_RISE:
  *Icu_Time=Timer_High+Timer_Low;
     346:	80 91 2e 01 	lds	r24, 0x012E
     34a:	90 91 2f 01 	lds	r25, 0x012F
     34e:	a0 91 30 01 	lds	r26, 0x0130
     352:	b0 91 31 01 	lds	r27, 0x0131
     356:	00 91 2a 01 	lds	r16, 0x012A
     35a:	10 91 2b 01 	lds	r17, 0x012B
     35e:	20 91 2c 01 	lds	r18, 0x012C
     362:	30 91 2d 01 	lds	r19, 0x012D
     366:	80 0f       	add	r24, r16
     368:	91 1f       	adc	r25, r17
     36a:	a2 1f       	adc	r26, r18
     36c:	b3 1f       	adc	r27, r19
     36e:	fa 01       	movw	r30, r20
     370:	80 83       	st	Z, r24
     372:	91 83       	std	Z+1, r25	; 0x01
     374:	a2 83       	std	Z+2, r26	; 0x02
     376:	b3 83       	std	Z+3, r27	; 0x03
  Ret=E_OK;
     378:	80 e0       	ldi	r24, 0x00	; 0
  break;
     37a:	1f c0       	rjmp	.+62     	; 0x3ba <Icu_ReadTime+0x94>
  case ICU_RISE_TO_FALL:
  *Icu_Time=Timer_High;
     37c:	80 91 2e 01 	lds	r24, 0x012E
     380:	90 91 2f 01 	lds	r25, 0x012F
     384:	a0 91 30 01 	lds	r26, 0x0130
     388:	b0 91 31 01 	lds	r27, 0x0131
     38c:	fa 01       	movw	r30, r20
     38e:	80 83       	st	Z, r24
     390:	91 83       	std	Z+1, r25	; 0x01
     392:	a2 83       	std	Z+2, r26	; 0x02
     394:	b3 83       	std	Z+3, r27	; 0x03
  Ret=E_OK;
     396:	80 e0       	ldi	r24, 0x00	; 0
  break;
     398:	10 c0       	rjmp	.+32     	; 0x3ba <Icu_ReadTime+0x94>
  case ICU_FALE_TO_RISE:
  *Icu_Time=Timer_Low;
     39a:	80 91 2a 01 	lds	r24, 0x012A
     39e:	90 91 2b 01 	lds	r25, 0x012B
     3a2:	a0 91 2c 01 	lds	r26, 0x012C
     3a6:	b0 91 2d 01 	lds	r27, 0x012D
     3aa:	fa 01       	movw	r30, r20
     3ac:	80 83       	st	Z, r24
     3ae:	91 83       	std	Z+1, r25	; 0x01
     3b0:	a2 83       	std	Z+2, r26	; 0x02
     3b2:	b3 83       	std	Z+3, r27	; 0x03
  Ret=E_OK;
     3b4:	80 e0       	ldi	r24, 0x00	; 0
  break;
     3b6:	01 c0       	rjmp	.+2      	; 0x3ba <Icu_ReadTime+0x94>

  default:
  Ret=E_NOK;
     3b8:	81 e0       	ldi	r24, 0x01	; 1
  break;
}

return Ret;
}
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	08 95       	ret

000003c0 <EXTI0>:

void EXTI0(void)
{
  //u32_sgv_TimerVal=(uint32_t)TCNT1;
  u32_sgv_TimerVal=TCNT1;
     3c0:	80 91 84 00 	lds	r24, 0x0084
     3c4:	90 91 85 00 	lds	r25, 0x0085
     3c8:	a0 e0       	ldi	r26, 0x00	; 0
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	80 93 3b 01 	sts	0x013B, r24
     3d0:	90 93 3c 01 	sts	0x013C, r25
     3d4:	a0 93 3d 01 	sts	0x013D, r26
     3d8:	b0 93 3e 01 	sts	0x013E, r27
  u8_ovf_happend=0;
     3dc:	10 92 3a 01 	sts	0x013A, r1
//  if(READBIT(EXTERNAL_INTERRUPT_CONTROL,6))
    if(READBIT(EXTERNAL_INTERRUPT_CONTROL,ISC00) && READBIT(EXTERNAL_INTERRUPT_CONTROL,ISC01))
     3e0:	80 91 69 00 	lds	r24, 0x0069
     3e4:	80 ff       	sbrs	r24, 0
     3e6:	37 c0       	rjmp	.+110    	; 0x456 <EXTI0+0x96>
     3e8:	80 91 69 00 	lds	r24, 0x0069
     3ec:	86 95       	lsr	r24
     3ee:	80 ff       	sbrs	r24, 0
     3f0:	32 c0       	rjmp	.+100    	; 0x456 <EXTI0+0x96>
    {
		
    u32_Time_rising_edge=u32_sgv_TimerVal;
     3f2:	80 91 3b 01 	lds	r24, 0x013B
     3f6:	90 91 3c 01 	lds	r25, 0x013C
     3fa:	a0 91 3d 01 	lds	r26, 0x013D
     3fe:	b0 91 3e 01 	lds	r27, 0x013E
     402:	80 93 36 01 	sts	0x0136, r24
     406:	90 93 37 01 	sts	0x0137, r25
     40a:	a0 93 38 01 	sts	0x0138, r26
     40e:	b0 93 39 01 	sts	0x0139, r27
    Timer_Low = u32_Time_rising_edge - u32_Time_faling_edge;
     412:	80 91 36 01 	lds	r24, 0x0136
     416:	90 91 37 01 	lds	r25, 0x0137
     41a:	a0 91 38 01 	lds	r26, 0x0138
     41e:	b0 91 39 01 	lds	r27, 0x0139
     422:	40 91 32 01 	lds	r20, 0x0132
     426:	50 91 33 01 	lds	r21, 0x0133
     42a:	60 91 34 01 	lds	r22, 0x0134
     42e:	70 91 35 01 	lds	r23, 0x0135
     432:	84 1b       	sub	r24, r20
     434:	95 0b       	sbc	r25, r21
     436:	a6 0b       	sbc	r26, r22
     438:	b7 0b       	sbc	r27, r23
     43a:	80 93 2a 01 	sts	0x012A, r24
     43e:	90 93 2b 01 	sts	0x012B, r25
     442:	a0 93 2c 01 	sts	0x012C, r26
     446:	b0 93 2d 01 	sts	0x012D, r27
    /*****************************************/
    CLEAR_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC00);  /*Make it falling*/
     44a:	e9 e6       	ldi	r30, 0x69	; 105
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	80 81       	ld	r24, Z
     450:	8e 7f       	andi	r24, 0xFE	; 254
     452:	80 83       	st	Z, r24
     454:	08 95       	ret
    /***************************************/
   }else{
      u32_Time_faling_edge=u32_sgv_TimerVal;
     456:	80 91 3b 01 	lds	r24, 0x013B
     45a:	90 91 3c 01 	lds	r25, 0x013C
     45e:	a0 91 3d 01 	lds	r26, 0x013D
     462:	b0 91 3e 01 	lds	r27, 0x013E
     466:	80 93 32 01 	sts	0x0132, r24
     46a:	90 93 33 01 	sts	0x0133, r25
     46e:	a0 93 34 01 	sts	0x0134, r26
     472:	b0 93 35 01 	sts	0x0135, r27
      Timer_High =u32_Time_faling_edge - u32_Time_rising_edge;
     476:	80 91 32 01 	lds	r24, 0x0132
     47a:	90 91 33 01 	lds	r25, 0x0133
     47e:	a0 91 34 01 	lds	r26, 0x0134
     482:	b0 91 35 01 	lds	r27, 0x0135
     486:	40 91 36 01 	lds	r20, 0x0136
     48a:	50 91 37 01 	lds	r21, 0x0137
     48e:	60 91 38 01 	lds	r22, 0x0138
     492:	70 91 39 01 	lds	r23, 0x0139
     496:	84 1b       	sub	r24, r20
     498:	95 0b       	sbc	r25, r21
     49a:	a6 0b       	sbc	r26, r22
     49c:	b7 0b       	sbc	r27, r23
     49e:	80 93 2e 01 	sts	0x012E, r24
     4a2:	90 93 2f 01 	sts	0x012F, r25
     4a6:	a0 93 30 01 	sts	0x0130, r26
     4aa:	b0 93 31 01 	sts	0x0131, r27
   /*********************************/
      SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC00);    /*Make it Rising*/
     4ae:	e9 e6       	ldi	r30, 0x69	; 105
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	80 81       	ld	r24, Z
     4b4:	81 60       	ori	r24, 0x01	; 1
     4b6:	80 83       	st	Z, r24
     4b8:	08 95       	ret

000004ba <timer_interrupt1>:
 }

}
void timer_interrupt1(void)
{
  u8_ovf_happend=1;
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	80 93 3a 01 	sts	0x013A, r24
Us_Trigger();
     4c0:	0e 94 34 0b 	call	0x1668	; 0x1668 <Us_Trigger>
}
     4c4:	08 95       	ret

000004c6 <G_interrupt_Enable>:
ptr_to_Fun ANA_COMP;
ptr_to_Fun TWI_I2C;
ptr_to_Fun SPM_RDY;
void G_interrupt_Enable(void)
{
 SREG |=(0x80);
     4c6:	8f b7       	in	r24, 0x3f	; 63
     4c8:	80 68       	ori	r24, 0x80	; 128
     4ca:	8f bf       	out	0x3f, r24	; 63
}
     4cc:	08 95       	ret

000004ce <EX_interrupt1_enable1>:

void EX_interrupt1_enable1(void)
{
CLEAR_BIT(PORTD_DIR,3);/*Input*/
     4ce:	53 98       	cbi	0x0a, 3	; 10
SET_BIT(PORTD_DATA,3);/*Pullup*/
     4d0:	5b 9a       	sbi	0x0b, 3	; 11
SET_BIT(EXTERNAL_INTERRUPT_MASK_REG,INT1);/*EXT1*/
     4d2:	e9 9a       	sbi	0x1d, 1	; 29
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC10);/*Rising*/
     4d4:	e9 e6       	ldi	r30, 0x69	; 105
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	80 81       	ld	r24, Z
     4da:	84 60       	ori	r24, 0x04	; 4
     4dc:	80 83       	st	Z, r24
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC11);/*Rising*/
     4de:	80 81       	ld	r24, Z
     4e0:	88 60       	ori	r24, 0x08	; 8
     4e2:	80 83       	st	Z, r24
}
     4e4:	08 95       	ret

000004e6 <EX_interrupt0_enable0>:
void EX_interrupt0_enable0(void)
{
CLEAR_BIT(PORTD_DIR,2);/*Input*/
     4e6:	52 98       	cbi	0x0a, 2	; 10
//SET_BIT(PORTD_DATA,2);/*Pullup*/
SET_BIT(EXTERNAL_INTERRUPT_MASK_REG,INT0);/*EXT0*/
     4e8:	e8 9a       	sbi	0x1d, 0	; 29
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC00);/*Rising*/
     4ea:	e9 e6       	ldi	r30, 0x69	; 105
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	80 81       	ld	r24, Z
     4f0:	81 60       	ori	r24, 0x01	; 1
     4f2:	80 83       	st	Z, r24
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC01);/*Rising*/
     4f4:	80 81       	ld	r24, Z
     4f6:	82 60       	ori	r24, 0x02	; 2
     4f8:	80 83       	st	Z, r24
}
     4fa:	08 95       	ret

000004fc <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
     4fc:	8f b7       	in	r24, 0x3f	; 63
     4fe:	8f 77       	andi	r24, 0x7F	; 127
     500:	8f bf       	out	0x3f, r24	; 63
}
     502:	08 95       	ret

00000504 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     504:	1f 92       	push	r1
     506:	0f 92       	push	r0
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	0f 92       	push	r0
     50c:	11 24       	eor	r1, r1
     50e:	2f 93       	push	r18
     510:	3f 93       	push	r19
     512:	4f 93       	push	r20
     514:	5f 93       	push	r21
     516:	6f 93       	push	r22
     518:	7f 93       	push	r23
     51a:	8f 93       	push	r24
     51c:	9f 93       	push	r25
     51e:	af 93       	push	r26
     520:	bf 93       	push	r27
     522:	ef 93       	push	r30
     524:	ff 93       	push	r31
  INT0_external_interrupt();
     526:	e0 91 19 01 	lds	r30, 0x0119
     52a:	f0 91 1a 01 	lds	r31, 0x011A
     52e:	09 95       	icall
}
     530:	ff 91       	pop	r31
     532:	ef 91       	pop	r30
     534:	bf 91       	pop	r27
     536:	af 91       	pop	r26
     538:	9f 91       	pop	r25
     53a:	8f 91       	pop	r24
     53c:	7f 91       	pop	r23
     53e:	6f 91       	pop	r22
     540:	5f 91       	pop	r21
     542:	4f 91       	pop	r20
     544:	3f 91       	pop	r19
     546:	2f 91       	pop	r18
     548:	0f 90       	pop	r0
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	0f 90       	pop	r0
     54e:	1f 90       	pop	r1
     550:	18 95       	reti

00000552 <__vector_2>:


void __vector_2(void) __attribute__((signal));
void
 __vector_2(void)
{
     552:	1f 92       	push	r1
     554:	0f 92       	push	r0
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	0f 92       	push	r0
     55a:	11 24       	eor	r1, r1
     55c:	2f 93       	push	r18
     55e:	3f 93       	push	r19
     560:	4f 93       	push	r20
     562:	5f 93       	push	r21
     564:	6f 93       	push	r22
     566:	7f 93       	push	r23
     568:	8f 93       	push	r24
     56a:	9f 93       	push	r25
     56c:	af 93       	push	r26
     56e:	bf 93       	push	r27
     570:	ef 93       	push	r30
     572:	ff 93       	push	r31
  INT1_external_interrupt();
     574:	e0 91 71 01 	lds	r30, 0x0171
     578:	f0 91 72 01 	lds	r31, 0x0172
     57c:	09 95       	icall
}
     57e:	ff 91       	pop	r31
     580:	ef 91       	pop	r30
     582:	bf 91       	pop	r27
     584:	af 91       	pop	r26
     586:	9f 91       	pop	r25
     588:	8f 91       	pop	r24
     58a:	7f 91       	pop	r23
     58c:	6f 91       	pop	r22
     58e:	5f 91       	pop	r21
     590:	4f 91       	pop	r20
     592:	3f 91       	pop	r19
     594:	2f 91       	pop	r18
     596:	0f 90       	pop	r0
     598:	0f be       	out	0x3f, r0	; 63
     59a:	0f 90       	pop	r0
     59c:	1f 90       	pop	r1
     59e:	18 95       	reti

000005a0 <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     5a0:	1f 92       	push	r1
     5a2:	0f 92       	push	r0
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	0f 92       	push	r0
     5a8:	11 24       	eor	r1, r1
     5aa:	2f 93       	push	r18
     5ac:	3f 93       	push	r19
     5ae:	4f 93       	push	r20
     5b0:	5f 93       	push	r21
     5b2:	6f 93       	push	r22
     5b4:	7f 93       	push	r23
     5b6:	8f 93       	push	r24
     5b8:	9f 93       	push	r25
     5ba:	af 93       	push	r26
     5bc:	bf 93       	push	r27
     5be:	ef 93       	push	r30
     5c0:	ff 93       	push	r31
  Pin_Change_Interrupt_Request_0();
     5c2:	e0 91 57 01 	lds	r30, 0x0157
     5c6:	f0 91 58 01 	lds	r31, 0x0158
     5ca:	09 95       	icall
}
     5cc:	ff 91       	pop	r31
     5ce:	ef 91       	pop	r30
     5d0:	bf 91       	pop	r27
     5d2:	af 91       	pop	r26
     5d4:	9f 91       	pop	r25
     5d6:	8f 91       	pop	r24
     5d8:	7f 91       	pop	r23
     5da:	6f 91       	pop	r22
     5dc:	5f 91       	pop	r21
     5de:	4f 91       	pop	r20
     5e0:	3f 91       	pop	r19
     5e2:	2f 91       	pop	r18
     5e4:	0f 90       	pop	r0
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	0f 90       	pop	r0
     5ea:	1f 90       	pop	r1
     5ec:	18 95       	reti

000005ee <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     5ee:	1f 92       	push	r1
     5f0:	0f 92       	push	r0
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	0f 92       	push	r0
     5f6:	11 24       	eor	r1, r1
     5f8:	2f 93       	push	r18
     5fa:	3f 93       	push	r19
     5fc:	4f 93       	push	r20
     5fe:	5f 93       	push	r21
     600:	6f 93       	push	r22
     602:	7f 93       	push	r23
     604:	8f 93       	push	r24
     606:	9f 93       	push	r25
     608:	af 93       	push	r26
     60a:	bf 93       	push	r27
     60c:	ef 93       	push	r30
     60e:	ff 93       	push	r31
Pin_Change_Interrupt_Request_1();
     610:	e0 91 6b 01 	lds	r30, 0x016B
     614:	f0 91 6c 01 	lds	r31, 0x016C
     618:	09 95       	icall
}
     61a:	ff 91       	pop	r31
     61c:	ef 91       	pop	r30
     61e:	bf 91       	pop	r27
     620:	af 91       	pop	r26
     622:	9f 91       	pop	r25
     624:	8f 91       	pop	r24
     626:	7f 91       	pop	r23
     628:	6f 91       	pop	r22
     62a:	5f 91       	pop	r21
     62c:	4f 91       	pop	r20
     62e:	3f 91       	pop	r19
     630:	2f 91       	pop	r18
     632:	0f 90       	pop	r0
     634:	0f be       	out	0x3f, r0	; 63
     636:	0f 90       	pop	r0
     638:	1f 90       	pop	r1
     63a:	18 95       	reti

0000063c <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     63c:	1f 92       	push	r1
     63e:	0f 92       	push	r0
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	0f 92       	push	r0
     644:	11 24       	eor	r1, r1
     646:	2f 93       	push	r18
     648:	3f 93       	push	r19
     64a:	4f 93       	push	r20
     64c:	5f 93       	push	r21
     64e:	6f 93       	push	r22
     650:	7f 93       	push	r23
     652:	8f 93       	push	r24
     654:	9f 93       	push	r25
     656:	af 93       	push	r26
     658:	bf 93       	push	r27
     65a:	ef 93       	push	r30
     65c:	ff 93       	push	r31
  Pin_Change_Interrupt_Request_2();
     65e:	e0 91 5d 01 	lds	r30, 0x015D
     662:	f0 91 5e 01 	lds	r31, 0x015E
     666:	09 95       	icall
}
     668:	ff 91       	pop	r31
     66a:	ef 91       	pop	r30
     66c:	bf 91       	pop	r27
     66e:	af 91       	pop	r26
     670:	9f 91       	pop	r25
     672:	8f 91       	pop	r24
     674:	7f 91       	pop	r23
     676:	6f 91       	pop	r22
     678:	5f 91       	pop	r21
     67a:	4f 91       	pop	r20
     67c:	3f 91       	pop	r19
     67e:	2f 91       	pop	r18
     680:	0f 90       	pop	r0
     682:	0f be       	out	0x3f, r0	; 63
     684:	0f 90       	pop	r0
     686:	1f 90       	pop	r1
     688:	18 95       	reti

0000068a <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     68a:	1f 92       	push	r1
     68c:	0f 92       	push	r0
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	0f 92       	push	r0
     692:	11 24       	eor	r1, r1
     694:	2f 93       	push	r18
     696:	3f 93       	push	r19
     698:	4f 93       	push	r20
     69a:	5f 93       	push	r21
     69c:	6f 93       	push	r22
     69e:	7f 93       	push	r23
     6a0:	8f 93       	push	r24
     6a2:	9f 93       	push	r25
     6a4:	af 93       	push	r26
     6a6:	bf 93       	push	r27
     6a8:	ef 93       	push	r30
     6aa:	ff 93       	push	r31
  watch_dog_interrupt();
     6ac:	e0 91 4f 01 	lds	r30, 0x014F
     6b0:	f0 91 50 01 	lds	r31, 0x0150
     6b4:	09 95       	icall
}
     6b6:	ff 91       	pop	r31
     6b8:	ef 91       	pop	r30
     6ba:	bf 91       	pop	r27
     6bc:	af 91       	pop	r26
     6be:	9f 91       	pop	r25
     6c0:	8f 91       	pop	r24
     6c2:	7f 91       	pop	r23
     6c4:	6f 91       	pop	r22
     6c6:	5f 91       	pop	r21
     6c8:	4f 91       	pop	r20
     6ca:	3f 91       	pop	r19
     6cc:	2f 91       	pop	r18
     6ce:	0f 90       	pop	r0
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	0f 90       	pop	r0
     6d4:	1f 90       	pop	r1
     6d6:	18 95       	reti

000006d8 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
     6d8:	1f 92       	push	r1
     6da:	0f 92       	push	r0
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	0f 92       	push	r0
     6e0:	11 24       	eor	r1, r1
     6e2:	2f 93       	push	r18
     6e4:	3f 93       	push	r19
     6e6:	4f 93       	push	r20
     6e8:	5f 93       	push	r21
     6ea:	6f 93       	push	r22
     6ec:	7f 93       	push	r23
     6ee:	8f 93       	push	r24
     6f0:	9f 93       	push	r25
     6f2:	af 93       	push	r26
     6f4:	bf 93       	push	r27
     6f6:	ef 93       	push	r30
     6f8:	ff 93       	push	r31
TIMER2COMPA();
     6fa:	e0 91 69 01 	lds	r30, 0x0169
     6fe:	f0 91 6a 01 	lds	r31, 0x016A
     702:	09 95       	icall
}
     704:	ff 91       	pop	r31
     706:	ef 91       	pop	r30
     708:	bf 91       	pop	r27
     70a:	af 91       	pop	r26
     70c:	9f 91       	pop	r25
     70e:	8f 91       	pop	r24
     710:	7f 91       	pop	r23
     712:	6f 91       	pop	r22
     714:	5f 91       	pop	r21
     716:	4f 91       	pop	r20
     718:	3f 91       	pop	r19
     71a:	2f 91       	pop	r18
     71c:	0f 90       	pop	r0
     71e:	0f be       	out	0x3f, r0	; 63
     720:	0f 90       	pop	r0
     722:	1f 90       	pop	r1
     724:	18 95       	reti

00000726 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
     726:	1f 92       	push	r1
     728:	0f 92       	push	r0
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	0f 92       	push	r0
     72e:	11 24       	eor	r1, r1
     730:	2f 93       	push	r18
     732:	3f 93       	push	r19
     734:	4f 93       	push	r20
     736:	5f 93       	push	r21
     738:	6f 93       	push	r22
     73a:	7f 93       	push	r23
     73c:	8f 93       	push	r24
     73e:	9f 93       	push	r25
     740:	af 93       	push	r26
     742:	bf 93       	push	r27
     744:	ef 93       	push	r30
     746:	ff 93       	push	r31
  TIMER2COMPB();
     748:	e0 91 59 01 	lds	r30, 0x0159
     74c:	f0 91 5a 01 	lds	r31, 0x015A
     750:	09 95       	icall
}
     752:	ff 91       	pop	r31
     754:	ef 91       	pop	r30
     756:	bf 91       	pop	r27
     758:	af 91       	pop	r26
     75a:	9f 91       	pop	r25
     75c:	8f 91       	pop	r24
     75e:	7f 91       	pop	r23
     760:	6f 91       	pop	r22
     762:	5f 91       	pop	r21
     764:	4f 91       	pop	r20
     766:	3f 91       	pop	r19
     768:	2f 91       	pop	r18
     76a:	0f 90       	pop	r0
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	0f 90       	pop	r0
     770:	1f 90       	pop	r1
     772:	18 95       	reti

00000774 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
     774:	1f 92       	push	r1
     776:	0f 92       	push	r0
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	0f 92       	push	r0
     77c:	11 24       	eor	r1, r1
     77e:	2f 93       	push	r18
     780:	3f 93       	push	r19
     782:	4f 93       	push	r20
     784:	5f 93       	push	r21
     786:	6f 93       	push	r22
     788:	7f 93       	push	r23
     78a:	8f 93       	push	r24
     78c:	9f 93       	push	r25
     78e:	af 93       	push	r26
     790:	bf 93       	push	r27
     792:	ef 93       	push	r30
     794:	ff 93       	push	r31
  TIMER2OVF();
     796:	e0 91 17 01 	lds	r30, 0x0117
     79a:	f0 91 18 01 	lds	r31, 0x0118
     79e:	09 95       	icall
}
     7a0:	ff 91       	pop	r31
     7a2:	ef 91       	pop	r30
     7a4:	bf 91       	pop	r27
     7a6:	af 91       	pop	r26
     7a8:	9f 91       	pop	r25
     7aa:	8f 91       	pop	r24
     7ac:	7f 91       	pop	r23
     7ae:	6f 91       	pop	r22
     7b0:	5f 91       	pop	r21
     7b2:	4f 91       	pop	r20
     7b4:	3f 91       	pop	r19
     7b6:	2f 91       	pop	r18
     7b8:	0f 90       	pop	r0
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	0f 90       	pop	r0
     7be:	1f 90       	pop	r1
     7c0:	18 95       	reti

000007c2 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     7c2:	1f 92       	push	r1
     7c4:	0f 92       	push	r0
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	0f 92       	push	r0
     7ca:	11 24       	eor	r1, r1
     7cc:	2f 93       	push	r18
     7ce:	3f 93       	push	r19
     7d0:	4f 93       	push	r20
     7d2:	5f 93       	push	r21
     7d4:	6f 93       	push	r22
     7d6:	7f 93       	push	r23
     7d8:	8f 93       	push	r24
     7da:	9f 93       	push	r25
     7dc:	af 93       	push	r26
     7de:	bf 93       	push	r27
     7e0:	ef 93       	push	r30
     7e2:	ff 93       	push	r31

  TIMER1CAPT();
     7e4:	e0 91 75 01 	lds	r30, 0x0175
     7e8:	f0 91 76 01 	lds	r31, 0x0176
     7ec:	09 95       	icall
}
     7ee:	ff 91       	pop	r31
     7f0:	ef 91       	pop	r30
     7f2:	bf 91       	pop	r27
     7f4:	af 91       	pop	r26
     7f6:	9f 91       	pop	r25
     7f8:	8f 91       	pop	r24
     7fa:	7f 91       	pop	r23
     7fc:	6f 91       	pop	r22
     7fe:	5f 91       	pop	r21
     800:	4f 91       	pop	r20
     802:	3f 91       	pop	r19
     804:	2f 91       	pop	r18
     806:	0f 90       	pop	r0
     808:	0f be       	out	0x3f, r0	; 63
     80a:	0f 90       	pop	r0
     80c:	1f 90       	pop	r1
     80e:	18 95       	reti

00000810 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     810:	1f 92       	push	r1
     812:	0f 92       	push	r0
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	0f 92       	push	r0
     818:	11 24       	eor	r1, r1
     81a:	2f 93       	push	r18
     81c:	3f 93       	push	r19
     81e:	4f 93       	push	r20
     820:	5f 93       	push	r21
     822:	6f 93       	push	r22
     824:	7f 93       	push	r23
     826:	8f 93       	push	r24
     828:	9f 93       	push	r25
     82a:	af 93       	push	r26
     82c:	bf 93       	push	r27
     82e:	ef 93       	push	r30
     830:	ff 93       	push	r31

  TIMER1COMPA();
     832:	e0 91 55 01 	lds	r30, 0x0155
     836:	f0 91 56 01 	lds	r31, 0x0156
     83a:	09 95       	icall
}
     83c:	ff 91       	pop	r31
     83e:	ef 91       	pop	r30
     840:	bf 91       	pop	r27
     842:	af 91       	pop	r26
     844:	9f 91       	pop	r25
     846:	8f 91       	pop	r24
     848:	7f 91       	pop	r23
     84a:	6f 91       	pop	r22
     84c:	5f 91       	pop	r21
     84e:	4f 91       	pop	r20
     850:	3f 91       	pop	r19
     852:	2f 91       	pop	r18
     854:	0f 90       	pop	r0
     856:	0f be       	out	0x3f, r0	; 63
     858:	0f 90       	pop	r0
     85a:	1f 90       	pop	r1
     85c:	18 95       	reti

0000085e <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
     85e:	1f 92       	push	r1
     860:	0f 92       	push	r0
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	0f 92       	push	r0
     866:	11 24       	eor	r1, r1
     868:	2f 93       	push	r18
     86a:	3f 93       	push	r19
     86c:	4f 93       	push	r20
     86e:	5f 93       	push	r21
     870:	6f 93       	push	r22
     872:	7f 93       	push	r23
     874:	8f 93       	push	r24
     876:	9f 93       	push	r25
     878:	af 93       	push	r26
     87a:	bf 93       	push	r27
     87c:	ef 93       	push	r30
     87e:	ff 93       	push	r31
  TIMER1COMPB();
     880:	e0 91 53 01 	lds	r30, 0x0153
     884:	f0 91 54 01 	lds	r31, 0x0154
     888:	09 95       	icall
}
     88a:	ff 91       	pop	r31
     88c:	ef 91       	pop	r30
     88e:	bf 91       	pop	r27
     890:	af 91       	pop	r26
     892:	9f 91       	pop	r25
     894:	8f 91       	pop	r24
     896:	7f 91       	pop	r23
     898:	6f 91       	pop	r22
     89a:	5f 91       	pop	r21
     89c:	4f 91       	pop	r20
     89e:	3f 91       	pop	r19
     8a0:	2f 91       	pop	r18
     8a2:	0f 90       	pop	r0
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	0f 90       	pop	r0
     8a8:	1f 90       	pop	r1
     8aa:	18 95       	reti

000008ac <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     8ac:	1f 92       	push	r1
     8ae:	0f 92       	push	r0
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	0f 92       	push	r0
     8b4:	11 24       	eor	r1, r1
     8b6:	2f 93       	push	r18
     8b8:	3f 93       	push	r19
     8ba:	4f 93       	push	r20
     8bc:	5f 93       	push	r21
     8be:	6f 93       	push	r22
     8c0:	7f 93       	push	r23
     8c2:	8f 93       	push	r24
     8c4:	9f 93       	push	r25
     8c6:	af 93       	push	r26
     8c8:	bf 93       	push	r27
     8ca:	ef 93       	push	r30
     8cc:	ff 93       	push	r31
  TIMER1OVF();
     8ce:	e0 91 15 01 	lds	r30, 0x0115
     8d2:	f0 91 16 01 	lds	r31, 0x0116
     8d6:	09 95       	icall
}
     8d8:	ff 91       	pop	r31
     8da:	ef 91       	pop	r30
     8dc:	bf 91       	pop	r27
     8de:	af 91       	pop	r26
     8e0:	9f 91       	pop	r25
     8e2:	8f 91       	pop	r24
     8e4:	7f 91       	pop	r23
     8e6:	6f 91       	pop	r22
     8e8:	5f 91       	pop	r21
     8ea:	4f 91       	pop	r20
     8ec:	3f 91       	pop	r19
     8ee:	2f 91       	pop	r18
     8f0:	0f 90       	pop	r0
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	0f 90       	pop	r0
     8f6:	1f 90       	pop	r1
     8f8:	18 95       	reti

000008fa <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
     8fa:	1f 92       	push	r1
     8fc:	0f 92       	push	r0
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	0f 92       	push	r0
     902:	11 24       	eor	r1, r1
     904:	2f 93       	push	r18
     906:	3f 93       	push	r19
     908:	4f 93       	push	r20
     90a:	5f 93       	push	r21
     90c:	6f 93       	push	r22
     90e:	7f 93       	push	r23
     910:	8f 93       	push	r24
     912:	9f 93       	push	r25
     914:	af 93       	push	r26
     916:	bf 93       	push	r27
     918:	ef 93       	push	r30
     91a:	ff 93       	push	r31
  TIMER0COMPA();
     91c:	e0 91 73 01 	lds	r30, 0x0173
     920:	f0 91 74 01 	lds	r31, 0x0174
     924:	09 95       	icall
}
     926:	ff 91       	pop	r31
     928:	ef 91       	pop	r30
     92a:	bf 91       	pop	r27
     92c:	af 91       	pop	r26
     92e:	9f 91       	pop	r25
     930:	8f 91       	pop	r24
     932:	7f 91       	pop	r23
     934:	6f 91       	pop	r22
     936:	5f 91       	pop	r21
     938:	4f 91       	pop	r20
     93a:	3f 91       	pop	r19
     93c:	2f 91       	pop	r18
     93e:	0f 90       	pop	r0
     940:	0f be       	out	0x3f, r0	; 63
     942:	0f 90       	pop	r0
     944:	1f 90       	pop	r1
     946:	18 95       	reti

00000948 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
     948:	1f 92       	push	r1
     94a:	0f 92       	push	r0
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	0f 92       	push	r0
     950:	11 24       	eor	r1, r1
     952:	2f 93       	push	r18
     954:	3f 93       	push	r19
     956:	4f 93       	push	r20
     958:	5f 93       	push	r21
     95a:	6f 93       	push	r22
     95c:	7f 93       	push	r23
     95e:	8f 93       	push	r24
     960:	9f 93       	push	r25
     962:	af 93       	push	r26
     964:	bf 93       	push	r27
     966:	ef 93       	push	r30
     968:	ff 93       	push	r31
  TIMER0COMPB();
     96a:	e0 91 63 01 	lds	r30, 0x0163
     96e:	f0 91 64 01 	lds	r31, 0x0164
     972:	09 95       	icall
}
     974:	ff 91       	pop	r31
     976:	ef 91       	pop	r30
     978:	bf 91       	pop	r27
     97a:	af 91       	pop	r26
     97c:	9f 91       	pop	r25
     97e:	8f 91       	pop	r24
     980:	7f 91       	pop	r23
     982:	6f 91       	pop	r22
     984:	5f 91       	pop	r21
     986:	4f 91       	pop	r20
     988:	3f 91       	pop	r19
     98a:	2f 91       	pop	r18
     98c:	0f 90       	pop	r0
     98e:	0f be       	out	0x3f, r0	; 63
     990:	0f 90       	pop	r0
     992:	1f 90       	pop	r1
     994:	18 95       	reti

00000996 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     996:	1f 92       	push	r1
     998:	0f 92       	push	r0
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	0f 92       	push	r0
     99e:	11 24       	eor	r1, r1
     9a0:	2f 93       	push	r18
     9a2:	3f 93       	push	r19
     9a4:	4f 93       	push	r20
     9a6:	5f 93       	push	r21
     9a8:	6f 93       	push	r22
     9aa:	7f 93       	push	r23
     9ac:	8f 93       	push	r24
     9ae:	9f 93       	push	r25
     9b0:	af 93       	push	r26
     9b2:	bf 93       	push	r27
     9b4:	ef 93       	push	r30
     9b6:	ff 93       	push	r31
  TIMER0OVF_INT();
     9b8:	e0 91 5f 01 	lds	r30, 0x015F
     9bc:	f0 91 60 01 	lds	r31, 0x0160
     9c0:	09 95       	icall
}
     9c2:	ff 91       	pop	r31
     9c4:	ef 91       	pop	r30
     9c6:	bf 91       	pop	r27
     9c8:	af 91       	pop	r26
     9ca:	9f 91       	pop	r25
     9cc:	8f 91       	pop	r24
     9ce:	7f 91       	pop	r23
     9d0:	6f 91       	pop	r22
     9d2:	5f 91       	pop	r21
     9d4:	4f 91       	pop	r20
     9d6:	3f 91       	pop	r19
     9d8:	2f 91       	pop	r18
     9da:	0f 90       	pop	r0
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	0f 90       	pop	r0
     9e0:	1f 90       	pop	r1
     9e2:	18 95       	reti

000009e4 <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
     9e4:	1f 92       	push	r1
     9e6:	0f 92       	push	r0
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	0f 92       	push	r0
     9ec:	11 24       	eor	r1, r1
     9ee:	2f 93       	push	r18
     9f0:	3f 93       	push	r19
     9f2:	4f 93       	push	r20
     9f4:	5f 93       	push	r21
     9f6:	6f 93       	push	r22
     9f8:	7f 93       	push	r23
     9fa:	8f 93       	push	r24
     9fc:	9f 93       	push	r25
     9fe:	af 93       	push	r26
     a00:	bf 93       	push	r27
     a02:	ef 93       	push	r30
     a04:	ff 93       	push	r31
  SPI_STC();
     a06:	e0 91 5b 01 	lds	r30, 0x015B
     a0a:	f0 91 5c 01 	lds	r31, 0x015C
     a0e:	09 95       	icall
}
     a10:	ff 91       	pop	r31
     a12:	ef 91       	pop	r30
     a14:	bf 91       	pop	r27
     a16:	af 91       	pop	r26
     a18:	9f 91       	pop	r25
     a1a:	8f 91       	pop	r24
     a1c:	7f 91       	pop	r23
     a1e:	6f 91       	pop	r22
     a20:	5f 91       	pop	r21
     a22:	4f 91       	pop	r20
     a24:	3f 91       	pop	r19
     a26:	2f 91       	pop	r18
     a28:	0f 90       	pop	r0
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	0f 90       	pop	r0
     a2e:	1f 90       	pop	r1
     a30:	18 95       	reti

00000a32 <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
     a32:	1f 92       	push	r1
     a34:	0f 92       	push	r0
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	0f 92       	push	r0
     a3a:	11 24       	eor	r1, r1
     a3c:	2f 93       	push	r18
     a3e:	3f 93       	push	r19
     a40:	4f 93       	push	r20
     a42:	5f 93       	push	r21
     a44:	6f 93       	push	r22
     a46:	7f 93       	push	r23
     a48:	8f 93       	push	r24
     a4a:	9f 93       	push	r25
     a4c:	af 93       	push	r26
     a4e:	bf 93       	push	r27
     a50:	ef 93       	push	r30
     a52:	ff 93       	push	r31
  USART_RXC();
     a54:	e0 91 4d 01 	lds	r30, 0x014D
     a58:	f0 91 4e 01 	lds	r31, 0x014E
     a5c:	09 95       	icall
}
     a5e:	ff 91       	pop	r31
     a60:	ef 91       	pop	r30
     a62:	bf 91       	pop	r27
     a64:	af 91       	pop	r26
     a66:	9f 91       	pop	r25
     a68:	8f 91       	pop	r24
     a6a:	7f 91       	pop	r23
     a6c:	6f 91       	pop	r22
     a6e:	5f 91       	pop	r21
     a70:	4f 91       	pop	r20
     a72:	3f 91       	pop	r19
     a74:	2f 91       	pop	r18
     a76:	0f 90       	pop	r0
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	0f 90       	pop	r0
     a7c:	1f 90       	pop	r1
     a7e:	18 95       	reti

00000a80 <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
     a80:	1f 92       	push	r1
     a82:	0f 92       	push	r0
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	0f 92       	push	r0
     a88:	11 24       	eor	r1, r1
     a8a:	2f 93       	push	r18
     a8c:	3f 93       	push	r19
     a8e:	4f 93       	push	r20
     a90:	5f 93       	push	r21
     a92:	6f 93       	push	r22
     a94:	7f 93       	push	r23
     a96:	8f 93       	push	r24
     a98:	9f 93       	push	r25
     a9a:	af 93       	push	r26
     a9c:	bf 93       	push	r27
     a9e:	ef 93       	push	r30
     aa0:	ff 93       	push	r31
  USART_UDRE();
     aa2:	e0 91 6f 01 	lds	r30, 0x016F
     aa6:	f0 91 70 01 	lds	r31, 0x0170
     aaa:	09 95       	icall
}
     aac:	ff 91       	pop	r31
     aae:	ef 91       	pop	r30
     ab0:	bf 91       	pop	r27
     ab2:	af 91       	pop	r26
     ab4:	9f 91       	pop	r25
     ab6:	8f 91       	pop	r24
     ab8:	7f 91       	pop	r23
     aba:	6f 91       	pop	r22
     abc:	5f 91       	pop	r21
     abe:	4f 91       	pop	r20
     ac0:	3f 91       	pop	r19
     ac2:	2f 91       	pop	r18
     ac4:	0f 90       	pop	r0
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	0f 90       	pop	r0
     aca:	1f 90       	pop	r1
     acc:	18 95       	reti

00000ace <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
     ace:	1f 92       	push	r1
     ad0:	0f 92       	push	r0
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	0f 92       	push	r0
     ad6:	11 24       	eor	r1, r1
     ad8:	2f 93       	push	r18
     ada:	3f 93       	push	r19
     adc:	4f 93       	push	r20
     ade:	5f 93       	push	r21
     ae0:	6f 93       	push	r22
     ae2:	7f 93       	push	r23
     ae4:	8f 93       	push	r24
     ae6:	9f 93       	push	r25
     ae8:	af 93       	push	r26
     aea:	bf 93       	push	r27
     aec:	ef 93       	push	r30
     aee:	ff 93       	push	r31
  USART_TXC();
     af0:	e0 91 6d 01 	lds	r30, 0x016D
     af4:	f0 91 6e 01 	lds	r31, 0x016E
     af8:	09 95       	icall
}
     afa:	ff 91       	pop	r31
     afc:	ef 91       	pop	r30
     afe:	bf 91       	pop	r27
     b00:	af 91       	pop	r26
     b02:	9f 91       	pop	r25
     b04:	8f 91       	pop	r24
     b06:	7f 91       	pop	r23
     b08:	6f 91       	pop	r22
     b0a:	5f 91       	pop	r21
     b0c:	4f 91       	pop	r20
     b0e:	3f 91       	pop	r19
     b10:	2f 91       	pop	r18
     b12:	0f 90       	pop	r0
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	0f 90       	pop	r0
     b18:	1f 90       	pop	r1
     b1a:	18 95       	reti

00000b1c <__vector_21>:

void __vector_21(void) __attribute__((signal));
void __vector_21(void)
{
     b1c:	1f 92       	push	r1
     b1e:	0f 92       	push	r0
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	0f 92       	push	r0
     b24:	11 24       	eor	r1, r1
     b26:	2f 93       	push	r18
     b28:	3f 93       	push	r19
     b2a:	4f 93       	push	r20
     b2c:	5f 93       	push	r21
     b2e:	6f 93       	push	r22
     b30:	7f 93       	push	r23
     b32:	8f 93       	push	r24
     b34:	9f 93       	push	r25
     b36:	af 93       	push	r26
     b38:	bf 93       	push	r27
     b3a:	ef 93       	push	r30
     b3c:	ff 93       	push	r31
  ADC_INT();
     b3e:	e0 91 65 01 	lds	r30, 0x0165
     b42:	f0 91 66 01 	lds	r31, 0x0166
     b46:	09 95       	icall
}
     b48:	ff 91       	pop	r31
     b4a:	ef 91       	pop	r30
     b4c:	bf 91       	pop	r27
     b4e:	af 91       	pop	r26
     b50:	9f 91       	pop	r25
     b52:	8f 91       	pop	r24
     b54:	7f 91       	pop	r23
     b56:	6f 91       	pop	r22
     b58:	5f 91       	pop	r21
     b5a:	4f 91       	pop	r20
     b5c:	3f 91       	pop	r19
     b5e:	2f 91       	pop	r18
     b60:	0f 90       	pop	r0
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	0f 90       	pop	r0
     b66:	1f 90       	pop	r1
     b68:	18 95       	reti

00000b6a <__vector_22>:

void __vector_22(void) __attribute__((signal));
void __vector_22(void)
{
     b6a:	1f 92       	push	r1
     b6c:	0f 92       	push	r0
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	0f 92       	push	r0
     b72:	11 24       	eor	r1, r1
     b74:	2f 93       	push	r18
     b76:	3f 93       	push	r19
     b78:	4f 93       	push	r20
     b7a:	5f 93       	push	r21
     b7c:	6f 93       	push	r22
     b7e:	7f 93       	push	r23
     b80:	8f 93       	push	r24
     b82:	9f 93       	push	r25
     b84:	af 93       	push	r26
     b86:	bf 93       	push	r27
     b88:	ef 93       	push	r30
     b8a:	ff 93       	push	r31
  EE_RDY();
     b8c:	e0 91 67 01 	lds	r30, 0x0167
     b90:	f0 91 68 01 	lds	r31, 0x0168
     b94:	09 95       	icall
}
     b96:	ff 91       	pop	r31
     b98:	ef 91       	pop	r30
     b9a:	bf 91       	pop	r27
     b9c:	af 91       	pop	r26
     b9e:	9f 91       	pop	r25
     ba0:	8f 91       	pop	r24
     ba2:	7f 91       	pop	r23
     ba4:	6f 91       	pop	r22
     ba6:	5f 91       	pop	r21
     ba8:	4f 91       	pop	r20
     baa:	3f 91       	pop	r19
     bac:	2f 91       	pop	r18
     bae:	0f 90       	pop	r0
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	0f 90       	pop	r0
     bb4:	1f 90       	pop	r1
     bb6:	18 95       	reti

00000bb8 <__vector_23>:

void __vector_23(void) __attribute__((signal));
void __vector_23(void)
{
     bb8:	1f 92       	push	r1
     bba:	0f 92       	push	r0
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	0f 92       	push	r0
     bc0:	11 24       	eor	r1, r1
     bc2:	2f 93       	push	r18
     bc4:	3f 93       	push	r19
     bc6:	4f 93       	push	r20
     bc8:	5f 93       	push	r21
     bca:	6f 93       	push	r22
     bcc:	7f 93       	push	r23
     bce:	8f 93       	push	r24
     bd0:	9f 93       	push	r25
     bd2:	af 93       	push	r26
     bd4:	bf 93       	push	r27
     bd6:	ef 93       	push	r30
     bd8:	ff 93       	push	r31
  ANA_COMP();
     bda:	e0 91 61 01 	lds	r30, 0x0161
     bde:	f0 91 62 01 	lds	r31, 0x0162
     be2:	09 95       	icall
}
     be4:	ff 91       	pop	r31
     be6:	ef 91       	pop	r30
     be8:	bf 91       	pop	r27
     bea:	af 91       	pop	r26
     bec:	9f 91       	pop	r25
     bee:	8f 91       	pop	r24
     bf0:	7f 91       	pop	r23
     bf2:	6f 91       	pop	r22
     bf4:	5f 91       	pop	r21
     bf6:	4f 91       	pop	r20
     bf8:	3f 91       	pop	r19
     bfa:	2f 91       	pop	r18
     bfc:	0f 90       	pop	r0
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	0f 90       	pop	r0
     c02:	1f 90       	pop	r1
     c04:	18 95       	reti

00000c06 <__vector_24>:

void __vector_24(void) __attribute__((signal));
void __vector_24(void)
{
     c06:	1f 92       	push	r1
     c08:	0f 92       	push	r0
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	0f 92       	push	r0
     c0e:	11 24       	eor	r1, r1
     c10:	2f 93       	push	r18
     c12:	3f 93       	push	r19
     c14:	4f 93       	push	r20
     c16:	5f 93       	push	r21
     c18:	6f 93       	push	r22
     c1a:	7f 93       	push	r23
     c1c:	8f 93       	push	r24
     c1e:	9f 93       	push	r25
     c20:	af 93       	push	r26
     c22:	bf 93       	push	r27
     c24:	ef 93       	push	r30
     c26:	ff 93       	push	r31
  TWI_I2C();
     c28:	e0 91 4b 01 	lds	r30, 0x014B
     c2c:	f0 91 4c 01 	lds	r31, 0x014C
     c30:	09 95       	icall
}
     c32:	ff 91       	pop	r31
     c34:	ef 91       	pop	r30
     c36:	bf 91       	pop	r27
     c38:	af 91       	pop	r26
     c3a:	9f 91       	pop	r25
     c3c:	8f 91       	pop	r24
     c3e:	7f 91       	pop	r23
     c40:	6f 91       	pop	r22
     c42:	5f 91       	pop	r21
     c44:	4f 91       	pop	r20
     c46:	3f 91       	pop	r19
     c48:	2f 91       	pop	r18
     c4a:	0f 90       	pop	r0
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	0f 90       	pop	r0
     c50:	1f 90       	pop	r1
     c52:	18 95       	reti

00000c54 <__vector_25>:

void __vector_25(void) __attribute__((signal));
void __vector_25(void)
{
     c54:	1f 92       	push	r1
     c56:	0f 92       	push	r0
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	0f 92       	push	r0
     c5c:	11 24       	eor	r1, r1
     c5e:	2f 93       	push	r18
     c60:	3f 93       	push	r19
     c62:	4f 93       	push	r20
     c64:	5f 93       	push	r21
     c66:	6f 93       	push	r22
     c68:	7f 93       	push	r23
     c6a:	8f 93       	push	r24
     c6c:	9f 93       	push	r25
     c6e:	af 93       	push	r26
     c70:	bf 93       	push	r27
     c72:	ef 93       	push	r30
     c74:	ff 93       	push	r31
  SPM_RDY();
     c76:	e0 91 51 01 	lds	r30, 0x0151
     c7a:	f0 91 52 01 	lds	r31, 0x0152
     c7e:	09 95       	icall
}
     c80:	ff 91       	pop	r31
     c82:	ef 91       	pop	r30
     c84:	bf 91       	pop	r27
     c86:	af 91       	pop	r26
     c88:	9f 91       	pop	r25
     c8a:	8f 91       	pop	r24
     c8c:	7f 91       	pop	r23
     c8e:	6f 91       	pop	r22
     c90:	5f 91       	pop	r21
     c92:	4f 91       	pop	r20
     c94:	3f 91       	pop	r19
     c96:	2f 91       	pop	r18
     c98:	0f 90       	pop	r0
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	0f 90       	pop	r0
     c9e:	1f 90       	pop	r1
     ca0:	18 95       	reti

00000ca2 <main>:
/*	DIO_init(&Dio_configurationD);
	motor_init();
	DIO_Write(GPIOD,PIN6,HIGH);
    Us_Init();
	*/
system_init();
     ca2:	0e 94 45 01 	call	0x28a	; 0x28a <system_init>
		/*
	Pwm_Start(PWM_CH0,60,10);
	Us_Trigger();
	Us_GetDistance(&timespend);
*/
		system_update();
     ca6:	0e 94 4c 01 	call	0x298	; 0x298 <system_update>
     caa:	fd cf       	rjmp	.-6      	; 0xca6 <main+0x4>

00000cac <motor_init>:


ERROR_STATUS motor_init(void)
{
uint8_t ret =E_OK;
ret=DIO_init(&motor_Configuration_0);
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_init>
ret=Pwm_Init(&PWM_Configuration_0);
     cb4:	8d e1       	ldi	r24, 0x1D	; 29
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	0e 94 d7 06 	call	0xdae	; 0xdae <Pwm_Init>
return ret;
}
     cbc:	08 95       	ret

00000cbe <motor_start_sm>:


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
switch (state) {
     cbe:	83 30       	cpi	r24, 0x03	; 3
     cc0:	c1 f1       	breq	.+112    	; 0xd32 <motor_start_sm+0x74>
     cc2:	84 30       	cpi	r24, 0x04	; 4
     cc4:	28 f4       	brcc	.+10     	; 0xcd0 <motor_start_sm+0x12>
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	b1 f0       	breq	.+44     	; 0xcf6 <motor_start_sm+0x38>
     cca:	82 30       	cpi	r24, 0x02	; 2
     ccc:	18 f5       	brcc	.+70     	; 0xd14 <motor_start_sm+0x56>
     cce:	09 c0       	rjmp	.+18     	; 0xce2 <motor_start_sm+0x24>
     cd0:	85 30       	cpi	r24, 0x05	; 5
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <motor_start_sm+0x18>
     cd4:	4c c0       	rjmp	.+152    	; 0xd6e <motor_start_sm+0xb0>
     cd6:	85 30       	cpi	r24, 0x05	; 5
     cd8:	d8 f1       	brcs	.+118    	; 0xd50 <motor_start_sm+0x92>
     cda:	86 30       	cpi	r24, 0x06	; 6
     cdc:	09 f0       	breq	.+2      	; 0xce0 <motor_start_sm+0x22>
     cde:	65 c0       	rjmp	.+202    	; 0xdaa <motor_start_sm+0xec>
     ce0:	55 c0       	rjmp	.+170    	; 0xd8c <motor_start_sm+0xce>
  case MOTOR_STOP:
Pwm_Stop(PWM_CH0);
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	0e 94 b5 07 	call	0xf6a	; 0xf6a <Pwm_Stop>
DIO_Write(GPIOD,BIT7,LOW);
     ce8:	83 e0       	ldi	r24, 0x03	; 3
     cea:	60 e8       	ldi	r22, 0x80	; 128
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     cf2:	80 e0       	ldi	r24, 0x00	; 0
switch (state) {
  case MOTOR_STOP:
Pwm_Stop(PWM_CH0);
DIO_Write(GPIOD,BIT7,LOW);
  break;
     cf4:	08 95       	ret
  case MOTOR_TWO_M:
  DIO_Write(GPIOD,BIT7,HIGH);
     cf6:	83 e0       	ldi	r24, 0x03	; 3
     cf8:	60 e8       	ldi	r22, 0x80	; 128
     cfa:	4f ef       	ldi	r20, 0xFF	; 255
     cfc:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
Pwm_Start(PWM_CH0,10,10);
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	6a e0       	ldi	r22, 0x0A	; 10
     d04:	2a e0       	ldi	r18, 0x0A	; 10
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	0e 94 e5 06 	call	0xdca	; 0xdca <Pwm_Start>
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     d10:	80 e0       	ldi	r24, 0x00	; 0
DIO_Write(GPIOD,BIT7,LOW);
  break;
  case MOTOR_TWO_M:
  DIO_Write(GPIOD,BIT7,HIGH);
Pwm_Start(PWM_CH0,10,10);
  break;
     d12:	08 95       	ret
  case MOTOR_ONE_HALF_M:
  DIO_Write(GPIOD,BIT7,HIGH);
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	60 e8       	ldi	r22, 0x80	; 128
     d18:	4f ef       	ldi	r20, 0xFF	; 255
     d1a:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
Pwm_Start(PWM_CH0,20,10);
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	64 e1       	ldi	r22, 0x14	; 20
     d22:	2a e0       	ldi	r18, 0x0A	; 10
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	0e 94 e5 06 	call	0xdca	; 0xdca <Pwm_Start>
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     d2e:	80 e0       	ldi	r24, 0x00	; 0
Pwm_Start(PWM_CH0,10,10);
  break;
  case MOTOR_ONE_HALF_M:
  DIO_Write(GPIOD,BIT7,HIGH);
Pwm_Start(PWM_CH0,20,10);
  break;
     d30:	08 95       	ret
  case MOTOR_ONE_M:
  DIO_Write(GPIOD,BIT7,HIGH);
     d32:	83 e0       	ldi	r24, 0x03	; 3
     d34:	60 e8       	ldi	r22, 0x80	; 128
     d36:	4f ef       	ldi	r20, 0xFF	; 255
     d38:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
  Pwm_Start(PWM_CH0,30,10);
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	6e e1       	ldi	r22, 0x1E	; 30
     d40:	2a e0       	ldi	r18, 0x0A	; 10
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	40 e0       	ldi	r20, 0x00	; 0
     d46:	50 e0       	ldi	r21, 0x00	; 0
     d48:	0e 94 e5 06 	call	0xdca	; 0xdca <Pwm_Start>
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     d4c:	80 e0       	ldi	r24, 0x00	; 0
Pwm_Start(PWM_CH0,20,10);
  break;
  case MOTOR_ONE_M:
  DIO_Write(GPIOD,BIT7,HIGH);
  Pwm_Start(PWM_CH0,30,10);
  break;
     d4e:	08 95       	ret
  case MOTOR_HALF_M:
  DIO_Write(GPIOD,BIT7,HIGH);
     d50:	83 e0       	ldi	r24, 0x03	; 3
     d52:	60 e8       	ldi	r22, 0x80	; 128
     d54:	4f ef       	ldi	r20, 0xFF	; 255
     d56:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
  Pwm_Start(PWM_CH0,50,10);
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	62 e3       	ldi	r22, 0x32	; 50
     d5e:	2a e0       	ldi	r18, 0x0A	; 10
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	0e 94 e5 06 	call	0xdca	; 0xdca <Pwm_Start>
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     d6a:	80 e0       	ldi	r24, 0x00	; 0
  Pwm_Start(PWM_CH0,30,10);
  break;
  case MOTOR_HALF_M:
  DIO_Write(GPIOD,BIT7,HIGH);
  Pwm_Start(PWM_CH0,50,10);
  break;
     d6c:	08 95       	ret
  case MOTOR_30_CM:
  DIO_Write(GPIOD,BIT7,HIGH);
     d6e:	83 e0       	ldi	r24, 0x03	; 3
     d70:	60 e8       	ldi	r22, 0x80	; 128
     d72:	4f ef       	ldi	r20, 0xFF	; 255
     d74:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
  Pwm_Start(PWM_CH0,70,10);
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	66 e4       	ldi	r22, 0x46	; 70
     d7c:	2a e0       	ldi	r18, 0x0A	; 10
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e0       	ldi	r20, 0x00	; 0
     d82:	50 e0       	ldi	r21, 0x00	; 0
     d84:	0e 94 e5 06 	call	0xdca	; 0xdca <Pwm_Start>
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     d88:	80 e0       	ldi	r24, 0x00	; 0
  Pwm_Start(PWM_CH0,50,10);
  break;
  case MOTOR_30_CM:
  DIO_Write(GPIOD,BIT7,HIGH);
  Pwm_Start(PWM_CH0,70,10);
  break;
     d8a:	08 95       	ret
  case MOTOR_20_CM:
  DIO_Write(GPIOD,BIT7,HIGH);
     d8c:	83 e0       	ldi	r24, 0x03	; 3
     d8e:	60 e8       	ldi	r22, 0x80	; 128
     d90:	4f ef       	ldi	r20, 0xFF	; 255
     d92:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
  Pwm_Start(PWM_CH0,90,10);
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	6a e5       	ldi	r22, 0x5A	; 90
     d9a:	2a e0       	ldi	r18, 0x0A	; 10
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	0e 94 e5 06 	call	0xdca	; 0xdca <Pwm_Start>
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     da6:	80 e0       	ldi	r24, 0x00	; 0
  Pwm_Start(PWM_CH0,70,10);
  break;
  case MOTOR_20_CM:
  DIO_Write(GPIOD,BIT7,HIGH);
  Pwm_Start(PWM_CH0,90,10);
  break;
     da8:	08 95       	ret
  default:
ret=E_NOK;
     daa:	81 e0       	ldi	r24, 0x01	; 1
  break;
}


  return ret;
}
     dac:	08 95       	ret

00000dae <Pwm_Init>:
/* Return type : void                                                            */
/*                                                                               */
/* Description: initialize the PWM configuration                                 */
/*********************************************************************************/
ERROR_STATUS Pwm_Init(Pwm_Cfg_s *Pwm_Cfg)
{
     dae:	fc 01       	movw	r30, r24
  uint8_t Ret=0;
  switch(Pwm_Cfg->Channel)
     db0:	80 81       	ld	r24, Z
     db2:	88 23       	and	r24, r24
     db4:	29 f4       	brne	.+10     	; 0xdc0 <Pwm_Init+0x12>
    {
      case PWM_CH0:
      TCCR0|=T0_PWM_FAST |T0_NON_INVERTING;
     db6:	84 b5       	in	r24, 0x24	; 36
     db8:	95 b5       	in	r25, 0x25	; 37
     dba:	83 68       	ori	r24, 0x83	; 131
     dbc:	95 bd       	out	0x25, r25	; 37
     dbe:	84 bd       	out	0x24, r24	; 36
      break;
      default:
      Ret=E_NOK;
      break;*/
    }
  sgl_Prescaler=Pwm_Cfg->Prescaler;
     dc0:	81 81       	ldd	r24, Z+1	; 0x01
     dc2:	80 93 3f 01 	sts	0x013F, r24
  u32g_T1_Prescaler=en_prescal;
  OCR1A =u16_outputCompareA;
  OCR1B =u16_outputCompareB;
  TCNT1=u16_initialValue;
  */
}
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	08 95       	ret

00000dca <Pwm_Start>:
/*-------------------------------------------------------                        */
/*((all this calculations are for phase correct mode))                           */
/*all this calculation for F_CPU 16MHz                                           */
/*********************************************************************************/
ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{uint8_t Ret=0;
     dca:	0f 93       	push	r16
     dcc:	1f 93       	push	r17
     dce:	96 2f       	mov	r25, r22
     dd0:	ba 01       	movw	r22, r20
     dd2:	a9 01       	movw	r20, r18
  float dutyReal;
uint32_t pwm_time_on = MAX_HOLD;

if(Frequncy <= 31372 && Frequncy > 3921 )
     dd4:	8a 01       	movw	r16, r20
     dd6:	9b 01       	movw	r18, r22
     dd8:	02 55       	subi	r16, 0x52	; 82
     dda:	1f 40       	sbci	r17, 0x0F	; 15
     ddc:	20 40       	sbci	r18, 0x00	; 0
     dde:	30 40       	sbci	r19, 0x00	; 0
     de0:	0b 33       	cpi	r16, 0x3B	; 59
     de2:	eb e6       	ldi	r30, 0x6B	; 107
     de4:	1e 07       	cpc	r17, r30
     de6:	e0 e0       	ldi	r30, 0x00	; 0
     de8:	2e 07       	cpc	r18, r30
     dea:	e0 e0       	ldi	r30, 0x00	; 0
     dec:	3e 07       	cpc	r19, r30
     dee:	18 f4       	brcc	.+6      	; 0xdf6 <Pwm_Start+0x2c>
  sgl_Prescaler=PWM_PRESCALER_NO;
     df0:	10 92 3f 01 	sts	0x013F, r1
     df4:	64 c0       	rjmp	.+200    	; 0xebe <Pwm_Start+0xf4>
else if(Frequncy <= 3921 && Frequncy > 980)
     df6:	8a 01       	movw	r16, r20
     df8:	9b 01       	movw	r18, r22
     dfa:	05 5d       	subi	r16, 0xD5	; 213
     dfc:	13 40       	sbci	r17, 0x03	; 3
     dfe:	20 40       	sbci	r18, 0x00	; 0
     e00:	30 40       	sbci	r19, 0x00	; 0
     e02:	0d 37       	cpi	r16, 0x7D	; 125
     e04:	eb e0       	ldi	r30, 0x0B	; 11
     e06:	1e 07       	cpc	r17, r30
     e08:	e0 e0       	ldi	r30, 0x00	; 0
     e0a:	2e 07       	cpc	r18, r30
     e0c:	e0 e0       	ldi	r30, 0x00	; 0
     e0e:	3e 07       	cpc	r19, r30
     e10:	20 f4       	brcc	.+8      	; 0xe1a <Pwm_Start+0x50>
  sgl_Prescaler=PWM_PRESCALER_8;
     e12:	21 e0       	ldi	r18, 0x01	; 1
     e14:	20 93 3f 01 	sts	0x013F, r18
     e18:	58 c0       	rjmp	.+176    	; 0xeca <Pwm_Start+0x100>
else if(Frequncy <= 980 && Frequncy > 490)
     e1a:	8a 01       	movw	r16, r20
     e1c:	9b 01       	movw	r18, r22
     e1e:	0b 5e       	subi	r16, 0xEB	; 235
     e20:	11 40       	sbci	r17, 0x01	; 1
     e22:	20 40       	sbci	r18, 0x00	; 0
     e24:	30 40       	sbci	r19, 0x00	; 0
     e26:	0a 3e       	cpi	r16, 0xEA	; 234
     e28:	e1 e0       	ldi	r30, 0x01	; 1
     e2a:	1e 07       	cpc	r17, r30
     e2c:	e0 e0       	ldi	r30, 0x00	; 0
     e2e:	2e 07       	cpc	r18, r30
     e30:	e0 e0       	ldi	r30, 0x00	; 0
     e32:	3e 07       	cpc	r19, r30
     e34:	20 f4       	brcc	.+8      	; 0xe3e <Pwm_Start+0x74>
  sgl_Prescaler=PWM_PRESCALER_32;
     e36:	22 e0       	ldi	r18, 0x02	; 2
     e38:	20 93 3f 01 	sts	0x013F, r18
     e3c:	4c c0       	rjmp	.+152    	; 0xed6 <Pwm_Start+0x10c>
else if(Frequncy <= 490 && Frequncy > 122)
     e3e:	8a 01       	movw	r16, r20
     e40:	9b 01       	movw	r18, r22
     e42:	0b 57       	subi	r16, 0x7B	; 123
     e44:	10 40       	sbci	r17, 0x00	; 0
     e46:	20 40       	sbci	r18, 0x00	; 0
     e48:	30 40       	sbci	r19, 0x00	; 0
     e4a:	00 37       	cpi	r16, 0x70	; 112
     e4c:	e1 e0       	ldi	r30, 0x01	; 1
     e4e:	1e 07       	cpc	r17, r30
     e50:	e0 e0       	ldi	r30, 0x00	; 0
     e52:	2e 07       	cpc	r18, r30
     e54:	e0 e0       	ldi	r30, 0x00	; 0
     e56:	3e 07       	cpc	r19, r30
     e58:	20 f4       	brcc	.+8      	; 0xe62 <Pwm_Start+0x98>
  sgl_Prescaler=PWM_PRESCALER_64;
     e5a:	23 e0       	ldi	r18, 0x03	; 3
     e5c:	20 93 3f 01 	sts	0x013F, r18
     e60:	45 c0       	rjmp	.+138    	; 0xeec <Pwm_Start+0x122>
else if(Frequncy <= 122 && Frequncy > 31)
     e62:	8a 01       	movw	r16, r20
     e64:	9b 01       	movw	r18, r22
     e66:	00 52       	subi	r16, 0x20	; 32
     e68:	10 40       	sbci	r17, 0x00	; 0
     e6a:	20 40       	sbci	r18, 0x00	; 0
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	0b 35       	cpi	r16, 0x5B	; 91
     e70:	11 05       	cpc	r17, r1
     e72:	21 05       	cpc	r18, r1
     e74:	31 05       	cpc	r19, r1
     e76:	20 f4       	brcc	.+8      	; 0xe80 <Pwm_Start+0xb6>
  sgl_Prescaler=PWM_PRESCALER_256;
     e78:	24 e0       	ldi	r18, 0x04	; 4
     e7a:	20 93 3f 01 	sts	0x013F, r18
     e7e:	3c c0       	rjmp	.+120    	; 0xef8 <Pwm_Start+0x12e>
else if(Frequncy <= 31 && Frequncy > 0)
     e80:	41 50       	subi	r20, 0x01	; 1
     e82:	50 40       	sbci	r21, 0x00	; 0
     e84:	60 40       	sbci	r22, 0x00	; 0
     e86:	70 40       	sbci	r23, 0x00	; 0
     e88:	4f 31       	cpi	r20, 0x1F	; 31
     e8a:	51 05       	cpc	r21, r1
     e8c:	61 05       	cpc	r22, r1
     e8e:	71 05       	cpc	r23, r1
     e90:	20 f4       	brcc	.+8      	; 0xe9a <Pwm_Start+0xd0>
  sgl_Prescaler=PWM_PRESCALER_1024;
     e92:	25 e0       	ldi	r18, 0x05	; 5
     e94:	20 93 3f 01 	sts	0x013F, r18
     e98:	35 c0       	rjmp	.+106    	; 0xf04 <Pwm_Start+0x13a>
else{Ret=E_NOK;}
switch(sgl_Prescaler)
     e9a:	20 91 3f 01 	lds	r18, 0x013F
     e9e:	22 30       	cpi	r18, 0x02	; 2
     ea0:	d1 f0       	breq	.+52     	; 0xed6 <Pwm_Start+0x10c>
     ea2:	23 30       	cpi	r18, 0x03	; 3
     ea4:	28 f4       	brcc	.+10     	; 0xeb0 <Pwm_Start+0xe6>
     ea6:	22 23       	and	r18, r18
     ea8:	51 f0       	breq	.+20     	; 0xebe <Pwm_Start+0xf4>
     eaa:	21 30       	cpi	r18, 0x01	; 1
     eac:	89 f5       	brne	.+98     	; 0xf10 <Pwm_Start+0x146>
     eae:	0d c0       	rjmp	.+26     	; 0xeca <Pwm_Start+0x100>
     eb0:	24 30       	cpi	r18, 0x04	; 4
     eb2:	11 f1       	breq	.+68     	; 0xef8 <Pwm_Start+0x12e>
     eb4:	24 30       	cpi	r18, 0x04	; 4
     eb6:	d0 f0       	brcs	.+52     	; 0xeec <Pwm_Start+0x122>
     eb8:	25 30       	cpi	r18, 0x05	; 5
     eba:	51 f5       	brne	.+84     	; 0xf10 <Pwm_Start+0x146>
     ebc:	23 c0       	rjmp	.+70     	; 0xf04 <Pwm_Start+0x13a>
{
  case PWM_PRESCALER_NO:
  {
    switch(Channel)
     ebe:	88 23       	and	r24, r24
     ec0:	39 f5       	brne	.+78     	; 0xf10 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B |= PWM_PRESCALER_NO_CONFIG;
     ec2:	85 b5       	in	r24, 0x25	; 37
     ec4:	81 60       	ori	r24, 0x01	; 1
     ec6:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     ec8:	25 c0       	rjmp	.+74     	; 0xf14 <Pwm_Start+0x14a>
  }


  case PWM_PRESCALER_8:
  {
    switch(Channel)
     eca:	88 23       	and	r24, r24
     ecc:	09 f5       	brne	.+66     	; 0xf10 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_8_CONFIG;
     ece:	85 b5       	in	r24, 0x25	; 37
     ed0:	82 60       	ori	r24, 0x02	; 2
     ed2:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     ed4:	1f c0       	rjmp	.+62     	; 0xf14 <Pwm_Start+0x14a>
    break;
  }

  case PWM_PRESCALER_32:
  {
    switch(Channel)
     ed6:	83 30       	cpi	r24, 0x03	; 3
     ed8:	d9 f4       	brne	.+54     	; 0xf10 <Pwm_Start+0x146>
    {
      case PWM_CH2:
      {TCCR2|=PWM_PRESCALER_32_CONFIG_T2;
     eda:	e0 eb       	ldi	r30, 0xB0	; 176
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	91 81       	ldd	r25, Z+1	; 0x01
     ee2:	83 60       	ori	r24, 0x03	; 3
     ee4:	91 83       	std	Z+1, r25	; 0x01
     ee6:	80 83       	st	Z, r24
      Ret=E_OK;
      }
      break;
  */
      default:
      Ret=E_NOK;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	2f c0       	rjmp	.+94     	; 0xf4a <Pwm_Start+0x180>
    break;
  }

  case PWM_PRESCALER_64:
  {
    switch(Channel)
     eec:	88 23       	and	r24, r24
     eee:	81 f4       	brne	.+32     	; 0xf10 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_64_CONFIG;
     ef0:	85 b5       	in	r24, 0x25	; 37
     ef2:	83 60       	ori	r24, 0x03	; 3
     ef4:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     ef6:	0e c0       	rjmp	.+28     	; 0xf14 <Pwm_Start+0x14a>
    break;
  }

  case PWM_PRESCALER_256:
  {
    switch(Channel)
     ef8:	88 23       	and	r24, r24
     efa:	51 f4       	brne	.+20     	; 0xf10 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_64_CONFIG;
     efc:	85 b5       	in	r24, 0x25	; 37
     efe:	83 60       	ori	r24, 0x03	; 3
     f00:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     f02:	08 c0       	rjmp	.+16     	; 0xf14 <Pwm_Start+0x14a>
  }

 
  case PWM_PRESCALER_1024:
  {
    switch(Channel)
     f04:	88 23       	and	r24, r24
     f06:	21 f4       	brne	.+8      	; 0xf10 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_1024_CONFIG;
     f08:	85 b5       	in	r24, 0x25	; 37
     f0a:	85 60       	ori	r24, 0x05	; 5
     f0c:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <Pwm_Start+0x14a>



}

switch(Channel)
     f10:	88 23       	and	r24, r24
     f12:	d1 f4       	brne	.+52     	; 0xf48 <Pwm_Start+0x17e>
    {
      case PWM_CH0:{
      pwm_time_on=MAX_HOLD;
      dutyReal=((float)Duty/(float)FULL_SPEED);
     f14:	69 2f       	mov	r22, r25
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__floatunsisf>
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	48 ec       	ldi	r20, 0xC8	; 200
     f26:	52 e4       	ldi	r21, 0x42	; 66
     f28:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__divsf3>
      pwm_time_on=(float)pwm_time_on*dutyReal;
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	4f e7       	ldi	r20, 0x7F	; 127
     f32:	53 e4       	ldi	r21, 0x43	; 67
     f34:	0e 94 8d 0c 	call	0x191a	; 0x191a <__mulsf3>
     f38:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__fixunssfsi>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
      OCR0=pwm_time_on;
     f40:	98 bd       	out	0x28, r25	; 40
     f42:	87 bd       	out	0x27, r24	; 39
      Ret=E_OK;
     f44:	80 e0       	ldi	r24, 0x00	; 0
      break;
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <Pwm_Start+0x180>
      Ret=E_OK;
      }
      break;
  */
      default:
      Ret=E_NOK;
     f48:	81 e0       	ldi	r24, 0x01	; 1
      break;
    }
sgl_is_started=1;
     f4a:	91 e0       	ldi	r25, 0x01	; 1
     f4c:	90 93 40 01 	sts	0x0140, r25
return Ret;
}
     f50:	1f 91       	pop	r17
     f52:	0f 91       	pop	r16
     f54:	08 95       	ret

00000f56 <Pwm_Update>:


ERROR_STATUS Pwm_Update(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
uint8_t Ret=0;
if (sgl_is_started == 1)
     f56:	90 91 40 01 	lds	r25, 0x0140
     f5a:	91 30       	cpi	r25, 0x01	; 1
     f5c:	21 f4       	brne	.+8      	; 0xf66 <Pwm_Update+0x10>
{
  Pwm_Start( Channel,Duty,Frequncy);
     f5e:	0e 94 e5 06 	call	0xdca	; 0xdca <Pwm_Start>
Ret=E_OK;
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	08 95       	ret
}else{Ret=E_NOK;}
     f66:	81 e0       	ldi	r24, 0x01	; 1


return Ret;
}
     f68:	08 95       	ret

00000f6a <Pwm_Stop>:
/*********************************************************************************/

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
uint8_t Ret=0;
switch(Channel)
     f6a:	83 30       	cpi	r24, 0x03	; 3
     f6c:	18 f4       	brcc	.+6      	; 0xf74 <Pwm_Stop+0xa>
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	60 f4       	brcc	.+24     	; 0xf8a <Pwm_Stop+0x20>
     f72:	03 c0       	rjmp	.+6      	; 0xf7a <Pwm_Stop+0x10>
     f74:	83 30       	cpi	r24, 0x03	; 3
     f76:	d1 f4       	brne	.+52     	; 0xfac <Pwm_Stop+0x42>
     f78:	0f c0       	rjmp	.+30     	; 0xf98 <Pwm_Stop+0x2e>
{
  case PWM_CH0:
  TCCR0 &=TIMER_STOPT02;
     f7a:	84 b5       	in	r24, 0x24	; 36
     f7c:	95 b5       	in	r25, 0x25	; 37
     f7e:	88 7f       	andi	r24, 0xF8	; 248
     f80:	90 70       	andi	r25, 0x00	; 0
     f82:	95 bd       	out	0x25, r25	; 37
     f84:	84 bd       	out	0x24, r24	; 36
  Ret=E_OK;
     f86:	80 e0       	ldi	r24, 0x00	; 0
  break;
     f88:	08 95       	ret

  case PWM_CH1A:
  case PWM_CH1B:
  TCCR0 &=TIMER_STOPT1;
     f8a:	84 b5       	in	r24, 0x24	; 36
     f8c:	95 b5       	in	r25, 0x25	; 37
     f8e:	98 7f       	andi	r25, 0xF8	; 248
     f90:	95 bd       	out	0x25, r25	; 37
     f92:	84 bd       	out	0x24, r24	; 36
  Ret=E_OK;
     f94:	80 e0       	ldi	r24, 0x00	; 0
  break;
     f96:	08 95       	ret


  case PWM_CH2:
  TCCR2 &=TIMER_STOPT02;
     f98:	e0 eb       	ldi	r30, 0xB0	; 176
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
     fa0:	88 7f       	andi	r24, 0xF8	; 248
     fa2:	90 70       	andi	r25, 0x00	; 0
     fa4:	91 83       	std	Z+1, r25	; 0x01
     fa6:	80 83       	st	Z, r24
  Ret=E_OK;
     fa8:	80 e0       	ldi	r24, 0x00	; 0
  break;
     faa:	08 95       	ret
  default:
  Ret=E_NOK;
     fac:	81 e0       	ldi	r24, 0x01	; 1
  break;
}

return Ret;
}
     fae:	08 95       	ret

00000fb0 <speaker_init>:


ERROR_STATUS speaker_init(void)
{
  uint8_t ret =E_OK;
  	ret=DIO_init(&speaker_Configuration_0);
     fb0:	83 e0       	ldi	r24, 0x03	; 3
     fb2:	91 e0       	ldi	r25, 0x01	; 1
     fb4:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_init>
  return ret;
}
     fb8:	08 95       	ret

00000fba <speaker_start_sm>:

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
switch (state) {
     fba:	83 30       	cpi	r24, 0x03	; 3
     fbc:	e1 f1       	breq	.+120    	; 0x1036 <speaker_start_sm+0x7c>
     fbe:	84 30       	cpi	r24, 0x04	; 4
     fc0:	28 f4       	brcc	.+10     	; 0xfcc <speaker_start_sm+0x12>
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	a1 f0       	breq	.+40     	; 0xfee <speaker_start_sm+0x34>
     fc6:	82 30       	cpi	r24, 0x02	; 2
     fc8:	20 f5       	brcc	.+72     	; 0x1012 <speaker_start_sm+0x58>
     fca:	0a c0       	rjmp	.+20     	; 0xfe0 <speaker_start_sm+0x26>
     fcc:	85 30       	cpi	r24, 0x05	; 5
     fce:	09 f4       	brne	.+2      	; 0xfd2 <speaker_start_sm+0x18>
     fd0:	53 c0       	rjmp	.+166    	; 0x1078 <speaker_start_sm+0xbe>
     fd2:	85 30       	cpi	r24, 0x05	; 5
     fd4:	08 f4       	brcc	.+2      	; 0xfd8 <speaker_start_sm+0x1e>
     fd6:	40 c0       	rjmp	.+128    	; 0x1058 <speaker_start_sm+0x9e>
     fd8:	86 30       	cpi	r24, 0x06	; 6
     fda:	09 f0       	breq	.+2      	; 0xfde <speaker_start_sm+0x24>
     fdc:	6d c0       	rjmp	.+218    	; 0x10b8 <speaker_start_sm+0xfe>
     fde:	5c c0       	rjmp	.+184    	; 0x1098 <speaker_start_sm+0xde>
  case SPEAKER_STOP:
  DIO_Write(GPIOC,BIT3,LOW);
     fe0:	82 e0       	ldi	r24, 0x02	; 2
     fe2:	68 e0       	ldi	r22, 0x08	; 8
     fe4:	40 e0       	ldi	r20, 0x00	; 0
     fe6:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     fea:	80 e0       	ldi	r24, 0x00	; 0
switch (state) {
  case SPEAKER_STOP:
  DIO_Write(GPIOC,BIT3,LOW);
  break;
     fec:	08 95       	ret
  case SPEAKER_TWO_M:
  if(timer2_interrupt_counter==1000){
     fee:	80 91 41 01 	lds	r24, 0x0141
     ff2:	90 91 42 01 	lds	r25, 0x0142
     ff6:	23 e0       	ldi	r18, 0x03	; 3
     ff8:	88 3e       	cpi	r24, 0xE8	; 232
     ffa:	92 07       	cpc	r25, r18
     ffc:	09 f0       	breq	.+2      	; 0x1000 <speaker_start_sm+0x46>
     ffe:	5e c0       	rjmp	.+188    	; 0x10bc <speaker_start_sm+0x102>
  timer2_interrupt_counter=0;
    1000:	10 92 42 01 	sts	0x0142, r1
    1004:	10 92 41 01 	sts	0x0141, r1
  ret=DIO_Toggle(GPIOD,BIT1);
    1008:	83 e0       	ldi	r24, 0x03	; 3
    100a:	62 e0       	ldi	r22, 0x02	; 2
    100c:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    1010:	08 95       	ret
}
  break;
  case SPEAKER_ONE_HALF_M:
  if(timer2_interrupt_counter==500){
    1012:	80 91 41 01 	lds	r24, 0x0141
    1016:	90 91 42 01 	lds	r25, 0x0142
    101a:	21 e0       	ldi	r18, 0x01	; 1
    101c:	84 3f       	cpi	r24, 0xF4	; 244
    101e:	92 07       	cpc	r25, r18
    1020:	09 f0       	breq	.+2      	; 0x1024 <speaker_start_sm+0x6a>
    1022:	4e c0       	rjmp	.+156    	; 0x10c0 <speaker_start_sm+0x106>
  timer2_interrupt_counter=0;
    1024:	10 92 42 01 	sts	0x0142, r1
    1028:	10 92 41 01 	sts	0x0141, r1
  ret=DIO_Toggle(GPIOD,BIT1);
    102c:	83 e0       	ldi	r24, 0x03	; 3
    102e:	62 e0       	ldi	r22, 0x02	; 2
    1030:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    1034:	08 95       	ret
}
  break;
  case SPEAKER_ONE_M:
  if(timer2_interrupt_counter==250){
    1036:	80 91 41 01 	lds	r24, 0x0141
    103a:	90 91 42 01 	lds	r25, 0x0142
    103e:	8a 3f       	cpi	r24, 0xFA	; 250
    1040:	91 05       	cpc	r25, r1
    1042:	09 f0       	breq	.+2      	; 0x1046 <speaker_start_sm+0x8c>
    1044:	3f c0       	rjmp	.+126    	; 0x10c4 <speaker_start_sm+0x10a>
  timer2_interrupt_counter=0;
    1046:	10 92 42 01 	sts	0x0142, r1
    104a:	10 92 41 01 	sts	0x0141, r1
  ret=DIO_Toggle(GPIOD,BIT1);
    104e:	83 e0       	ldi	r24, 0x03	; 3
    1050:	62 e0       	ldi	r22, 0x02	; 2
    1052:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    1056:	08 95       	ret
}
  break;
  case SPEAKER_HALF_M:
  if(timer2_interrupt_counter==125){
    1058:	80 91 41 01 	lds	r24, 0x0141
    105c:	90 91 42 01 	lds	r25, 0x0142
    1060:	8d 37       	cpi	r24, 0x7D	; 125
    1062:	91 05       	cpc	r25, r1
    1064:	89 f5       	brne	.+98     	; 0x10c8 <speaker_start_sm+0x10e>
  timer2_interrupt_counter=0;
    1066:	10 92 42 01 	sts	0x0142, r1
    106a:	10 92 41 01 	sts	0x0141, r1
  ret=DIO_Toggle(GPIOD,BIT1);
    106e:	83 e0       	ldi	r24, 0x03	; 3
    1070:	62 e0       	ldi	r22, 0x02	; 2
    1072:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    1076:	08 95       	ret
}
  break;
  case SPEAKER_30_CM:
  if(timer2_interrupt_counter==75){
    1078:	80 91 41 01 	lds	r24, 0x0141
    107c:	90 91 42 01 	lds	r25, 0x0142
    1080:	8b 34       	cpi	r24, 0x4B	; 75
    1082:	91 05       	cpc	r25, r1
    1084:	19 f5       	brne	.+70     	; 0x10cc <speaker_start_sm+0x112>
  timer2_interrupt_counter=0;
    1086:	10 92 42 01 	sts	0x0142, r1
    108a:	10 92 41 01 	sts	0x0141, r1
  ret=DIO_Toggle(GPIOD,BIT1);
    108e:	83 e0       	ldi	r24, 0x03	; 3
    1090:	62 e0       	ldi	r22, 0x02	; 2
    1092:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    1096:	08 95       	ret
}
break;
  case SPEAKER_20_CM:
  if(timer2_interrupt_counter==25){
    1098:	80 91 41 01 	lds	r24, 0x0141
    109c:	90 91 42 01 	lds	r25, 0x0142
    10a0:	89 31       	cpi	r24, 0x19	; 25
    10a2:	91 05       	cpc	r25, r1
    10a4:	a9 f4       	brne	.+42     	; 0x10d0 <speaker_start_sm+0x116>
  timer2_interrupt_counter=0;
    10a6:	10 92 42 01 	sts	0x0142, r1
    10aa:	10 92 41 01 	sts	0x0141, r1
  ret=DIO_Toggle(GPIOD,BIT1);
    10ae:	83 e0       	ldi	r24, 0x03	; 3
    10b0:	62 e0       	ldi	r22, 0x02	; 2
    10b2:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    10b6:	08 95       	ret
}
break;
  default:
ret=E_NOK;
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	08 95       	ret
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	08 95       	ret
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	08 95       	ret
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	08 95       	ret
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	08 95       	ret
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	08 95       	ret
    10d0:	80 e0       	ldi	r24, 0x00	; 0
ret=E_NOK;
  break;
}

return ret;
}
    10d2:	08 95       	ret

000010d4 <timer0Set>:
}

}
void timer0Set(uint8_t u8_value)
{
TCNT0 =	u8_value;
    10d4:	86 bd       	out	0x26, r24	; 38
}
    10d6:	08 95       	ret

000010d8 <timer0Read>:

uint8_t timer0Read(void)
{
	 return TCNT0;
    10d8:	86 b5       	in	r24, 0x26	; 38
}
    10da:	08 95       	ret

000010dc <timer0Start>:
Depending on prescaler	x     X    X

*/
void timer0Start(void)
{
	 TCCR0 &= (0xF8);
    10dc:	84 b5       	in	r24, 0x24	; 36
    10de:	95 b5       	in	r25, 0x25	; 37
    10e0:	88 7f       	andi	r24, 0xF8	; 248
    10e2:	90 70       	andi	r25, 0x00	; 0
    10e4:	95 bd       	out	0x25, r25	; 37
    10e6:	84 bd       	out	0x24, r24	; 36
	 TCCR0 |= Prescaler_Value;
    10e8:	24 b5       	in	r18, 0x24	; 36
    10ea:	35 b5       	in	r19, 0x25	; 37
    10ec:	80 91 4a 01 	lds	r24, 0x014A
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	82 2b       	or	r24, r18
    10f4:	93 2b       	or	r25, r19
    10f6:	95 bd       	out	0x25, r25	; 37
    10f8:	84 bd       	out	0x24, r24	; 36
}
    10fa:	08 95       	ret

000010fc <timer0Stop>:
						      0     0    0
*/
void timer0Stop(void)
 {

TCCR0 &= (0xF8);
    10fc:	84 b5       	in	r24, 0x24	; 36
    10fe:	95 b5       	in	r25, 0x25	; 37
    1100:	88 7f       	andi	r24, 0xF8	; 248
    1102:	90 70       	andi	r25, 0x00	; 0
    1104:	95 bd       	out	0x25, r25	; 37
    1106:	84 bd       	out	0x24, r24	; 36

 }
    1108:	08 95       	ret

0000110a <timer0Init>:
uint8_t u8g_T1_Prescaler=0;
volatile uint8_t pwm_time_on=0,flag=0;
volatile uint8_t timer2_interrupt_raised = 0;
volatile uint16_t timer2_interrupt_counter =0;
void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal,uint8_t u8_initialValue, uint8_t u8_outputCompare,En_timer0Interrupt_t en_interruptMask)
{
    110a:	ef 92       	push	r14
    110c:	0f 93       	push	r16
    110e:	1f 93       	push	r17
if(en_prescal == T0_NO_CLOCK)
    1110:	44 23       	and	r20, r20
    1112:	19 f4       	brne	.+6      	; 0x111a <timer0Init+0x10>
{/*
if there is no clock the timer will be disabled
*/
timer0Stop();
    1114:	0e 94 7e 08 	call	0x10fc	; 0x10fc <timer0Stop>
    1118:	5d c0       	rjmp	.+186    	; 0x11d4 <timer0Init+0xca>
}
else
{
TCCR0 |= en_mode|en_prescal;
    111a:	e4 b5       	in	r30, 0x24	; 36
    111c:	f5 b5       	in	r31, 0x25	; 37
    111e:	84 2b       	or	r24, r20
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	8e 2b       	or	r24, r30
    1124:	9f 2b       	or	r25, r31
    1126:	95 bd       	out	0x25, r25	; 37
    1128:	84 bd       	out	0x24, r24	; 36
Prescaler_Value=en_prescal;
    112a:	40 93 4a 01 	sts	0x014A, r20
TCNT0 = u8_initialValue;
    112e:	26 bd       	out	0x26, r18	; 38
switch(en_OC0){
    1130:	60 31       	cpi	r22, 0x10	; 16
    1132:	89 f0       	breq	.+34     	; 0x1156 <timer0Init+0x4c>
    1134:	61 31       	cpi	r22, 0x11	; 17
    1136:	18 f4       	brcc	.+6      	; 0x113e <timer0Init+0x34>
    1138:	66 23       	and	r22, r22
    113a:	31 f0       	breq	.+12     	; 0x1148 <timer0Init+0x3e>
    113c:	1d c0       	rjmp	.+58     	; 0x1178 <timer0Init+0x6e>
    113e:	60 32       	cpi	r22, 0x20	; 32
    1140:	81 f0       	breq	.+32     	; 0x1162 <timer0Init+0x58>
    1142:	60 33       	cpi	r22, 0x30	; 48
    1144:	c9 f4       	brne	.+50     	; 0x1178 <timer0Init+0x6e>
    1146:	13 c0       	rjmp	.+38     	; 0x116e <timer0Init+0x64>
	case  T0_OC0_DIS:
	{
	TCCR0 &= 0xCF;
    1148:	84 b5       	in	r24, 0x24	; 36
    114a:	95 b5       	in	r25, 0x25	; 37
    114c:	8f 7c       	andi	r24, 0xCF	; 207
    114e:	90 70       	andi	r25, 0x00	; 0
    1150:	95 bd       	out	0x25, r25	; 37
    1152:	84 bd       	out	0x24, r24	; 36
		break;
    1154:	11 c0       	rjmp	.+34     	; 0x1178 <timer0Init+0x6e>
	}
	case T0_OC0_TOGGLE:
	{
		TCCR0|=T0_OC0_TOGGLE;
    1156:	84 b5       	in	r24, 0x24	; 36
    1158:	95 b5       	in	r25, 0x25	; 37
    115a:	80 61       	ori	r24, 0x10	; 16
    115c:	95 bd       	out	0x25, r25	; 37
    115e:	84 bd       	out	0x24, r24	; 36
		break;
    1160:	0b c0       	rjmp	.+22     	; 0x1178 <timer0Init+0x6e>
	}
	case  T0_OC0_CLEAR:
	{
	TCCR0 |= T0_OC0_CLEAR;
    1162:	84 b5       	in	r24, 0x24	; 36
    1164:	95 b5       	in	r25, 0x25	; 37
    1166:	80 62       	ori	r24, 0x20	; 32
    1168:	95 bd       	out	0x25, r25	; 37
    116a:	84 bd       	out	0x24, r24	; 36

		break;
    116c:	05 c0       	rjmp	.+10     	; 0x1178 <timer0Init+0x6e>
	}
	case T0_OC0_SET:
	{
		TCCR0 |=T0_OC0_SET;
    116e:	84 b5       	in	r24, 0x24	; 36
    1170:	95 b5       	in	r25, 0x25	; 37
    1172:	80 63       	ori	r24, 0x30	; 48
    1174:	95 bd       	out	0x25, r25	; 37
    1176:	84 bd       	out	0x24, r24	; 36
		break;
	}

}
OCR0  =u8_outputCompare;
    1178:	10 e0       	ldi	r17, 0x00	; 0
    117a:	18 bd       	out	0x28, r17	; 40
    117c:	07 bd       	out	0x27, r16	; 39
switch(en_interruptMask){
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	e8 16       	cp	r14, r24
    1182:	79 f0       	breq	.+30     	; 0x11a2 <timer0Init+0x98>
    1184:	e8 16       	cp	r14, r24
    1186:	20 f0       	brcs	.+8      	; 0x1190 <timer0Init+0x86>
    1188:	82 e0       	ldi	r24, 0x02	; 2
    118a:	e8 16       	cp	r14, r24
    118c:	19 f5       	brne	.+70     	; 0x11d4 <timer0Init+0xca>
    118e:	14 c0       	rjmp	.+40     	; 0x11b8 <timer0Init+0xae>
case  T0_POLLING:{
pooling=0;
    1190:	10 92 49 01 	sts	0x0149, r1
G_interrupt_Disable();
    1194:	0e 94 7e 02 	call	0x4fc	; 0x4fc <G_interrupt_Disable>
TIMSK0 &= T0_POLLING;
    1198:	ee e6       	ldi	r30, 0x6E	; 110
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	10 82       	st	Z, r1
break;
    11a0:	19 c0       	rjmp	.+50     	; 0x11d4 <timer0Init+0xca>
}
case T0_INTERRUPT_NORMAL :
{pooling=1;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	80 93 49 01 	sts	0x0149, r24
G_interrupt_Enable();
    11a8:	0e 94 63 02 	call	0x4c6	; 0x4c6 <G_interrupt_Enable>
TIMSK0 |= T0_INTERRUPT_NORMAL;
    11ac:	ee e6       	ldi	r30, 0x6E	; 110
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	81 60       	ori	r24, 0x01	; 1
    11b4:	80 83       	st	Z, r24
break;
    11b6:	0e c0       	rjmp	.+28     	; 0x11d4 <timer0Init+0xca>
}
case T0_INTERRUPT_CMP:
{pooling=1;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	80 93 49 01 	sts	0x0149, r24
//G_interrupt_Enable();
SET_BIT(SREG,7);
    11be:	8f b7       	in	r24, 0x3f	; 63
    11c0:	80 68       	ori	r24, 0x80	; 128
    11c2:	8f bf       	out	0x3f, r24	; 63
TIMSK0 |= T0_INTERRUPT_NORMAL;
    11c4:	ee e6       	ldi	r30, 0x6E	; 110
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	81 60       	ori	r24, 0x01	; 1
    11cc:	80 83       	st	Z, r24
TIMSK0 |=T0_INTERRUPT_CMP;
    11ce:	80 81       	ld	r24, Z
    11d0:	82 60       	ori	r24, 0x02	; 2
    11d2:	80 83       	st	Z, r24
}
}

}

}
    11d4:	1f 91       	pop	r17
    11d6:	0f 91       	pop	r16
    11d8:	ef 90       	pop	r14
    11da:	08 95       	ret

000011dc <timer0DelayMs>:
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
    11dc:	ac 01       	movw	r20, r24
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	41 15       	cp	r20, r1
    11e4:	51 05       	cpc	r21, r1
    11e6:	61 05       	cpc	r22, r1
    11e8:	71 05       	cpc	r23, r1
    11ea:	71 f0       	breq	.+28     	; 0x1208 <timer0DelayMs+0x2c>
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	dc 01       	movw	r26, r24
{
	while ((TIFR0&0x01)==0);
    11f2:	a8 9b       	sbis	0x15, 0	; 21
    11f4:	fe cf       	rjmp	.-4      	; 0x11f2 <timer0DelayMs+0x16>
	TIFR0 |=0x01;
    11f6:	a8 9a       	sbi	0x15, 0	; 21
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
    11f8:	01 96       	adiw	r24, 0x01	; 1
    11fa:	a1 1d       	adc	r26, r1
    11fc:	b1 1d       	adc	r27, r1
    11fe:	84 17       	cp	r24, r20
    1200:	95 07       	cpc	r25, r21
    1202:	a6 07       	cpc	r26, r22
    1204:	b7 07       	cpc	r27, r23
    1206:	a8 f3       	brcs	.-22     	; 0x11f2 <timer0DelayMs+0x16>
    1208:	08 95       	ret

0000120a <timer0DelayUs>:
 at pooling _no prescaling
 240at TCNT0

 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	a1 05       	cpc	r26, r1
    1212:	b1 05       	cpc	r27, r1
    1214:	31 f0       	breq	.+12     	; 0x1222 <timer0DelayUs+0x18>
	{
	timer0Set(240);
    1216:	80 ef       	ldi	r24, 0xF0	; 240
    1218:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <timer0Set>
	while(timer0Read()<=255);
    121c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <timer0Read>
    1220:	fd cf       	rjmp	.-6      	; 0x121c <timer0DelayUs+0x12>
	//while(u32_ovf_counter <= (8*u32_delay_in_us/1000));
	}
	TIFR0 |=(1<<TOV0);/*Clear the flag*/
    1222:	a8 9a       	sbi	0x15, 0	; 21
}/*1*/
    1224:	08 95       	ret

00001226 <timer0SwPWM>:
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    1226:	cf 92       	push	r12
    1228:	df 92       	push	r13
    122a:	ef 92       	push	r14
    122c:	ff 92       	push	r15
    122e:	cf 93       	push	r28
    1230:	c8 2f       	mov	r28, r24
float dutyReal;
pwm_time_on=MAX_HOLD;
    1232:	8f ef       	ldi	r24, 0xFF	; 255
    1234:	80 93 45 01 	sts	0x0145, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
    1238:	60 91 45 01 	lds	r22, 0x0145
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__floatunsisf>
    1246:	6b 01       	movw	r12, r22
    1248:	7c 01       	movw	r14, r24
}/*1*/
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
    124a:	6c 2f       	mov	r22, r28
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__floatunsisf>
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	48 ec       	ldi	r20, 0xC8	; 200
    125c:	52 e4       	ldi	r21, 0x42	; 66
    125e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__divsf3>
    1262:	9b 01       	movw	r18, r22
    1264:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
    1266:	c7 01       	movw	r24, r14
    1268:	b6 01       	movw	r22, r12
    126a:	0e 94 8d 0c 	call	0x191a	; 0x191a <__mulsf3>
    126e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__fixunssfsi>
    1272:	60 93 45 01 	sts	0x0145, r22
switch(pooling)
    1276:	80 91 49 01 	lds	r24, 0x0149
    127a:	88 23       	and	r24, r24
    127c:	19 f0       	breq	.+6      	; 0x1284 <timer0SwPWM+0x5e>
    127e:	81 30       	cpi	r24, 0x01	; 1
    1280:	09 f5       	brne	.+66     	; 0x12c4 <timer0SwPWM+0x9e>
    1282:	19 c0       	rjmp	.+50     	; 0x12b6 <timer0SwPWM+0x90>
{
	case 0:
	{
	timer0Start();
    1284:	0e 94 6e 08 	call	0x10dc	; 0x10dc <timer0Start>
	timer0Set(pwm_time_on);
    1288:	80 91 45 01 	lds	r24, 0x0145
    128c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <timer0Set>
	//freq 50KHZ is the Max frequency possible
	while ((TIFR0 &0x01)==0);
    1290:	a8 9b       	sbis	0x15, 0	; 21
    1292:	fe cf       	rjmp	.-4      	; 0x1290 <timer0SwPWM+0x6a>
	TIFR0 |=0x01;
    1294:	a8 9a       	sbi	0x15, 0	; 21
	PORTC_DATA |=0xff;
    1296:	88 b1       	in	r24, 0x08	; 8
    1298:	8f ef       	ldi	r24, 0xFF	; 255
    129a:	88 b9       	out	0x08, r24	; 8
	timer0Start();
    129c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <timer0Start>
	timer0Set(MAX_HOLD-pwm_time_on);
    12a0:	80 91 45 01 	lds	r24, 0x0145
    12a4:	80 95       	com	r24
    12a6:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <timer0Set>
	//freq
	while ((TIFR0 & 0x01)==0);
    12aa:	a8 9b       	sbis	0x15, 0	; 21
    12ac:	fe cf       	rjmp	.-4      	; 0x12aa <timer0SwPWM+0x84>
	TIFR0 |=0x01;
    12ae:	a8 9a       	sbi	0x15, 0	; 21
	PORTC_DATA &=0x00;
    12b0:	88 b1       	in	r24, 0x08	; 8
    12b2:	18 b8       	out	0x08, r1	; 8

break;
    12b4:	07 c0       	rjmp	.+14     	; 0x12c4 <timer0SwPWM+0x9e>
}
case 1:
{
timer0Start();
    12b6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <timer0Start>
OCR0=pwm_time_on;
    12ba:	80 91 45 01 	lds	r24, 0x0145
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	98 bd       	out	0x28, r25	; 40
    12c2:	87 bd       	out	0x27, r24	; 39
break;
}

}

}
    12c4:	cf 91       	pop	r28
    12c6:	ff 90       	pop	r15
    12c8:	ef 90       	pop	r14
    12ca:	df 90       	pop	r13
    12cc:	cf 90       	pop	r12
    12ce:	08 95       	ret

000012d0 <Timer_interrupt_COMP_routine>:



void Timer_interrupt_COMP_routine(void)
{
	PORTD_DATA ^=0xff;
    12d0:	8b b1       	in	r24, 0x0b	; 11
    12d2:	80 95       	com	r24
    12d4:	8b b9       	out	0x0b, r24	; 11

}
    12d6:	08 95       	ret

000012d8 <timer1Set>:
	}

*/
void timer1Set(uint16_t u16_value)
{
TCNT1=u16_value;
    12d8:	90 93 85 00 	sts	0x0085, r25
    12dc:	80 93 84 00 	sts	0x0084, r24
}
    12e0:	08 95       	ret

000012e2 <timer1Read>:
 * Description:
 * @return TCNT1
 */
uint16_t timer1Read(void)
{
return TCNT1;
    12e2:	80 91 84 00 	lds	r24, 0x0084
    12e6:	90 91 85 00 	lds	r25, 0x0085
}
    12ea:	08 95       	ret

000012ec <timer1Start>:
 * Description:
 * @param
 */
void timer1Start(void)
{
TCCR1B |=u8g_T1_Prescaler;
    12ec:	e1 e8       	ldi	r30, 0x81	; 129
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	90 81       	ld	r25, Z
    12f2:	80 91 46 01 	lds	r24, 0x0146
    12f6:	89 2b       	or	r24, r25
    12f8:	80 83       	st	Z, r24
}
    12fa:	08 95       	ret

000012fc <timer1Stop>:
 * Description:
 * @param
 */
void timer1Stop(void)
{
TCCR1B &=0xfff8;
    12fc:	e1 e8       	ldi	r30, 0x81	; 129
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	88 7f       	andi	r24, 0xF8	; 248
    1304:	80 83       	st	Z, r24
/*Keep all sittings as it is and put zeros in cs10,cs11,cs12*/
}
    1306:	08 95       	ret

00001308 <timer1DelayMs>:
 */
void timer1DelayMs(uint16_t u16_delay_in_ms)
{


}
    1308:	08 95       	ret

0000130a <timer1DelayUs>:
 */
void timer1DelayUs(uint32_t u32_delay_in_us)
{


}
    130a:	08 95       	ret

0000130c <timer1SwPWM>:
 */
void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{


}
    130c:	08 95       	ret

0000130e <timer2Set>:
* Description:
* @param value
*/
void timer2Set(uint8_t u8_a_value)
{
TCNT2=u8_a_value;
    130e:	80 93 b2 00 	sts	0x00B2, r24
}
    1312:	08 95       	ret

00001314 <timer2Read>:
/**
* Description:
* @return
*/
uint8_t timer2Read(void){
return TCNT2;
    1314:	80 91 b2 00 	lds	r24, 0x00B2
}
    1318:	08 95       	ret

0000131a <timer2Start>:
/**
* Description:
*/
void timer2Start(void)
{
TCCR2B &= 0xf8;
    131a:	e1 eb       	ldi	r30, 0xB1	; 177
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	88 7f       	andi	r24, 0xF8	; 248
    1322:	80 83       	st	Z, r24
TCCR2B |= Prescaler_Value2;
    1324:	90 81       	ld	r25, Z
    1326:	80 91 47 01 	lds	r24, 0x0147
    132a:	89 2b       	or	r24, r25
    132c:	80 83       	st	Z, r24
}
    132e:	08 95       	ret

00001330 <timer2Stop>:
/**
* Description:
*/
void timer2Stop(void)
{
TCCR2B &= 0xf8;
    1330:	e1 eb       	ldi	r30, 0xB1	; 177
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	88 7f       	andi	r24, 0xF8	; 248
    1338:	80 83       	st	Z, r24

}
    133a:	08 95       	ret

0000133c <timer2Init>:


}

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC,En_timer2perscaler_t en_prescal2, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
    133c:	cf 92       	push	r12
    133e:	0f 93       	push	r16
    1340:	1f 93       	push	r17
if(en_prescal2 == T2_NO_CLOCK)
    1342:	44 23       	and	r20, r20
    1344:	19 f4       	brne	.+6      	; 0x134c <timer2Init+0x10>
{/*
if there is no clock the timer will be disabled
*/
timer2Stop();
    1346:	0e 94 98 09 	call	0x1330	; 0x1330 <timer2Stop>
    134a:	5e c0       	rjmp	.+188    	; 0x1408 <timer2Init+0xcc>
}
else
{
TCCR2A |= en_mode;
    134c:	e0 eb       	ldi	r30, 0xB0	; 176
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	90 81       	ld	r25, Z
    1352:	89 2b       	or	r24, r25
    1354:	80 83       	st	Z, r24
TCCR2B |= en_prescal2 ;
    1356:	e1 eb       	ldi	r30, 0xB1	; 177
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	84 2b       	or	r24, r20
    135e:	80 83       	st	Z, r24

Prescaler_Value2=en_prescal2;
    1360:	40 93 47 01 	sts	0x0147, r20
TCNT2 = u8_initialValue;
    1364:	20 93 b2 00 	sts	0x00B2, r18
switch(en_OC){
    1368:	60 34       	cpi	r22, 0x40	; 64
    136a:	81 f0       	breq	.+32     	; 0x138c <timer2Init+0x50>
    136c:	61 34       	cpi	r22, 0x41	; 65
    136e:	18 f4       	brcc	.+6      	; 0x1376 <timer2Init+0x3a>
    1370:	66 23       	and	r22, r22
    1372:	31 f0       	breq	.+12     	; 0x1380 <timer2Init+0x44>
    1374:	1c c0       	rjmp	.+56     	; 0x13ae <timer2Init+0x72>
    1376:	60 38       	cpi	r22, 0x80	; 128
    1378:	79 f0       	breq	.+30     	; 0x1398 <timer2Init+0x5c>
    137a:	60 3a       	cpi	r22, 0xA0	; 160
    137c:	c1 f4       	brne	.+48     	; 0x13ae <timer2Init+0x72>
    137e:	12 c0       	rjmp	.+36     	; 0x13a4 <timer2Init+0x68>
	case  T2_OC2A_DIS:
	{
	TCCR2B &= 0xFC;
    1380:	e1 eb       	ldi	r30, 0xB1	; 177
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	8c 7f       	andi	r24, 0xFC	; 252
    1388:	80 83       	st	Z, r24
		break;
    138a:	11 c0       	rjmp	.+34     	; 0x13ae <timer2Init+0x72>
	}
	case T2_OC2A_TOGGLE:
	{
		TCCR2A |=T2_OC2A_TOGGLE;
    138c:	e0 eb       	ldi	r30, 0xB0	; 176
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	80 64       	ori	r24, 0x40	; 64
    1394:	80 83       	st	Z, r24
		break;
    1396:	0b c0       	rjmp	.+22     	; 0x13ae <timer2Init+0x72>
	}
	case  T2_OC2A_CLEAR:
	{
	TCCR2A |= T2_OC2A_CLEAR;
    1398:	e0 eb       	ldi	r30, 0xB0	; 176
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	80 68       	ori	r24, 0x80	; 128
    13a0:	80 83       	st	Z, r24

		break;
    13a2:	05 c0       	rjmp	.+10     	; 0x13ae <timer2Init+0x72>
	}
	case T2_OC2A_SET:
	{
		TCCR2A |=T2_OC2A_SET;
    13a4:	e0 eb       	ldi	r30, 0xB0	; 176
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	80 6a       	ori	r24, 0xA0	; 160
    13ac:	80 83       	st	Z, r24
		break;
	}

}
OCR2  = u8_outputCompare;
    13ae:	10 e0       	ldi	r17, 0x00	; 0
    13b0:	10 93 b4 00 	sts	0x00B4, r17
    13b4:	00 93 b3 00 	sts	0x00B3, r16
switch(en_interruptMask){
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	c8 16       	cp	r12, r24
    13bc:	69 f0       	breq	.+26     	; 0x13d8 <timer2Init+0x9c>
    13be:	c8 16       	cp	r12, r24
    13c0:	20 f0       	brcs	.+8      	; 0x13ca <timer2Init+0x8e>
    13c2:	83 e0       	ldi	r24, 0x03	; 3
    13c4:	c8 16       	cp	r12, r24
    13c6:	01 f5       	brne	.+64     	; 0x1408 <timer2Init+0xcc>
    13c8:	12 c0       	rjmp	.+36     	; 0x13ee <timer2Init+0xb2>
case  T2_POLLING:
pooling_2=0;
    13ca:	10 92 48 01 	sts	0x0148, r1
TIMSK2 &= T2_POLLING;
    13ce:	e0 e7       	ldi	r30, 0x70	; 112
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	10 82       	st	Z, r1
break;
    13d6:	18 c0       	rjmp	.+48     	; 0x1408 <timer2Init+0xcc>
case T2_INTERRUPT_NORMAL :
{
	pooling_2=1;
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	80 93 48 01 	sts	0x0148, r24
G_interrupt_Enable();
    13de:	0e 94 63 02 	call	0x4c6	; 0x4c6 <G_interrupt_Enable>
TIMSK2 |= T2_INTERRUPT_NORMAL;
    13e2:	e0 e7       	ldi	r30, 0x70	; 112
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	81 60       	ori	r24, 0x01	; 1
    13ea:	80 83       	st	Z, r24

break;
    13ec:	0d c0       	rjmp	.+26     	; 0x1408 <timer2Init+0xcc>
}
case T2_INTERRUPT_CMP:
{
	pooling_2=1;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	80 93 48 01 	sts	0x0148, r24
G_interrupt_Enable();
    13f4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <G_interrupt_Enable>
//SET_BIT(SREG,7);
TIMSK2 |=T2_INTERRUPT_NORMAL;
    13f8:	e0 e7       	ldi	r30, 0x70	; 112
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	81 60       	ori	r24, 0x01	; 1
    1400:	80 83       	st	Z, r24
TIMSK2 |=T2_INTERRUPT_CMP;
    1402:	80 81       	ld	r24, Z
    1404:	83 60       	ori	r24, 0x03	; 3
    1406:	80 83       	st	Z, r24

}



}
    1408:	1f 91       	pop	r17
    140a:	0f 91       	pop	r16
    140c:	cf 90       	pop	r12
    140e:	08 95       	ret

00001410 <timer2DelayMs>:
		Prescalercounst=1;
		break;

		}*/
void timer2DelayMs(uint16_t u16_delay_in_ms)
{
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	cf 93       	push	r28
    1416:	df 93       	push	r29
    1418:	00 d0       	rcall	.+0      	; 0x141a <timer2DelayMs+0xa>
    141a:	00 d0       	rcall	.+0      	; 0x141c <timer2DelayMs+0xc>
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	8c 01       	movw	r16, r24
	volatile uint16_t count=0;
    1422:	1a 82       	std	Y+2, r1	; 0x02
    1424:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t Prescalercounst=0,set_timer2=0;
    1426:	1b 82       	std	Y+3, r1	; 0x03
    1428:	1c 82       	std	Y+4, r1	; 0x04
	switch(Prescaler_Value2)
    142a:	80 91 47 01 	lds	r24, 0x0147
    142e:	84 30       	cpi	r24, 0x04	; 4
    1430:	f9 f0       	breq	.+62     	; 0x1470 <timer2DelayMs+0x60>
    1432:	85 30       	cpi	r24, 0x05	; 5
    1434:	38 f4       	brcc	.+14     	; 0x1444 <timer2DelayMs+0x34>
    1436:	82 30       	cpi	r24, 0x02	; 2
    1438:	89 f0       	breq	.+34     	; 0x145c <timer2DelayMs+0x4c>
    143a:	83 30       	cpi	r24, 0x03	; 3
    143c:	a0 f4       	brcc	.+40     	; 0x1466 <timer2DelayMs+0x56>
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	51 f5       	brne	.+84     	; 0x1496 <timer2DelayMs+0x86>
    1442:	07 c0       	rjmp	.+14     	; 0x1452 <timer2DelayMs+0x42>
    1444:	86 30       	cpi	r24, 0x06	; 6
    1446:	f1 f0       	breq	.+60     	; 0x1484 <timer2DelayMs+0x74>
    1448:	86 30       	cpi	r24, 0x06	; 6
    144a:	b8 f0       	brcs	.+46     	; 0x147a <timer2DelayMs+0x6a>
    144c:	87 30       	cpi	r24, 0x07	; 7
    144e:	19 f5       	brne	.+70     	; 0x1496 <timer2DelayMs+0x86>
    1450:	1e c0       	rjmp	.+60     	; 0x148e <timer2DelayMs+0x7e>
	{
		case T2_PRESCALER_NO:{
		Prescalercounst=58;
    1452:	8a e3       	ldi	r24, 0x3A	; 58
    1454:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=10;
    1456:	8a e0       	ldi	r24, 0x0A	; 10
    1458:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    145a:	1d c0       	rjmp	.+58     	; 0x1496 <timer2DelayMs+0x86>
		case T2_PRESCALER_8:
		{Prescalercounst=8;
    145c:	88 e0       	ldi	r24, 0x08	; 8
    145e:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=12;
    1460:	8c e0       	ldi	r24, 0x0C	; 12
    1462:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    1464:	18 c0       	rjmp	.+48     	; 0x1496 <timer2DelayMs+0x86>
		case T2_PRESCALER_32:
		{Prescalercounst=2;
    1466:	82 e0       	ldi	r24, 0x02	; 2
    1468:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=8;
    146a:	88 e0       	ldi	r24, 0x08	; 8
    146c:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    146e:	13 c0       	rjmp	.+38     	; 0x1496 <timer2DelayMs+0x86>
		case T2_PRESCALER_64:
		{Prescalercounst=1;
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=6;
    1474:	86 e0       	ldi	r24, 0x06	; 6
    1476:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    1478:	0e c0       	rjmp	.+28     	; 0x1496 <timer2DelayMs+0x86>
		case T2_PRESCALER_128:
		{Prescalercounst=1;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=131;
    147e:	83 e8       	ldi	r24, 0x83	; 131
    1480:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    1482:	09 c0       	rjmp	.+18     	; 0x1496 <timer2DelayMs+0x86>
		case T2_PRESCALER_256:
		{Prescalercounst=1;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=194;
    1488:	82 ec       	ldi	r24, 0xC2	; 194
    148a:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    148c:	04 c0       	rjmp	.+8      	; 0x1496 <timer2DelayMs+0x86>
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=240;
    1492:	80 ef       	ldi	r24, 0xF0	; 240
    1494:	8c 83       	std	Y+4, r24	; 0x04
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
    1496:	1a 82       	std	Y+2, r1	; 0x02
    1498:	19 82       	std	Y+1, r1	; 0x01
    149a:	2b 81       	ldd	r18, Y+3	; 0x03
    149c:	49 81       	ldd	r20, Y+1	; 0x01
    149e:	5a 81       	ldd	r21, Y+2	; 0x02
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	02 9f       	mul	r16, r18
    14a4:	c0 01       	movw	r24, r0
    14a6:	03 9f       	mul	r16, r19
    14a8:	90 0d       	add	r25, r0
    14aa:	12 9f       	mul	r17, r18
    14ac:	90 0d       	add	r25, r0
    14ae:	11 24       	eor	r1, r1
    14b0:	48 17       	cp	r20, r24
    14b2:	59 07       	cpc	r21, r25
    14b4:	c8 f4       	brcc	.+50     	; 0x14e8 <timer2DelayMs+0xd8>
	{
		timer2Set(set_timer2);//10 for no prescaler....12 for 8 prescaler .... 8 for 32 prescaler ....6 for prescaler 64 .....
    14b6:	8c 81       	ldd	r24, Y+4	; 0x04
    14b8:	0e 94 87 09 	call	0x130e	; 0x130e <timer2Set>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR2 & 0x01)==0);
    14bc:	b8 9b       	sbis	0x17, 0	; 23
    14be:	fe cf       	rjmp	.-4      	; 0x14bc <timer2DelayMs+0xac>
		TIFR2 |=0x01;
    14c0:	b8 9a       	sbi	0x17, 0	; 23
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
		set_timer2=240;
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	9a 81       	ldd	r25, Y+2	; 0x02
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	9a 83       	std	Y+2, r25	; 0x02
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	2b 81       	ldd	r18, Y+3	; 0x03
    14ce:	49 81       	ldd	r20, Y+1	; 0x01
    14d0:	5a 81       	ldd	r21, Y+2	; 0x02
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	02 9f       	mul	r16, r18
    14d6:	c0 01       	movw	r24, r0
    14d8:	03 9f       	mul	r16, r19
    14da:	90 0d       	add	r25, r0
    14dc:	12 9f       	mul	r17, r18
    14de:	90 0d       	add	r25, r0
    14e0:	11 24       	eor	r1, r1
    14e2:	48 17       	cp	r20, r24
    14e4:	59 07       	cpc	r21, r25
    14e6:	38 f3       	brcs	.-50     	; 0x14b6 <timer2DelayMs+0xa6>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR2 & 0x01)==0);
		TIFR2 |=0x01;

	}
}
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	08 95       	ret

000014fa <timer2DelayUs>:

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
    14fa:	cf 92       	push	r12
    14fc:	df 92       	push	r13
    14fe:	ef 92       	push	r14
    1500:	ff 92       	push	r15
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
    1506:	00 d0       	rcall	.+0      	; 0x1508 <timer2DelayUs+0xe>
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	6b 01       	movw	r12, r22
    150e:	7c 01       	movw	r14, r24
	volatile uint16_t count =0;
    1510:	1a 82       	std	Y+2, r1	; 0x02
    1512:	19 82       	std	Y+1, r1	; 0x01
	for (count=0;count<u16_delay_in_us;count++)
    1514:	1a 82       	std	Y+2, r1	; 0x02
    1516:	19 82       	std	Y+1, r1	; 0x01
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	9a 81       	ldd	r25, Y+2	; 0x02
    151c:	a0 e0       	ldi	r26, 0x00	; 0
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	8c 15       	cp	r24, r12
    1522:	9d 05       	cpc	r25, r13
    1524:	ae 05       	cpc	r26, r14
    1526:	bf 05       	cpc	r27, r15
    1528:	a0 f4       	brcc	.+40     	; 0x1552 <timer2DelayUs+0x58>
	{
		timer2Set(254);//254 for no prescaler
    152a:	8e ef       	ldi	r24, 0xFE	; 254
    152c:	0e 94 87 09 	call	0x130e	; 0x130e <timer2Set>
		while ((TIFR2 & 0x01)==0);
    1530:	b8 9b       	sbis	0x17, 0	; 23
    1532:	fe cf       	rjmp	.-4      	; 0x1530 <timer2DelayUs+0x36>
		TIFR2 |=0x01;
    1534:	b8 9a       	sbi	0x17, 0	; 23

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
	volatile uint16_t count =0;
	for (count=0;count<u16_delay_in_us;count++)
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	9a 81       	ldd	r25, Y+2	; 0x02
    153a:	01 96       	adiw	r24, 0x01	; 1
    153c:	9a 83       	std	Y+2, r25	; 0x02
    153e:	89 83       	std	Y+1, r24	; 0x01
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	9a 81       	ldd	r25, Y+2	; 0x02
    1544:	a0 e0       	ldi	r26, 0x00	; 0
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	8c 15       	cp	r24, r12
    154a:	9d 05       	cpc	r25, r13
    154c:	ae 05       	cpc	r26, r14
    154e:	bf 05       	cpc	r27, r15
    1550:	60 f3       	brcs	.-40     	; 0x152a <timer2DelayUs+0x30>
		while ((TIFR2 & 0x01)==0);
		TIFR2 |=0x01;

	}

}
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	ff 90       	pop	r15
    155c:	ef 90       	pop	r14
    155e:	df 90       	pop	r13
    1560:	cf 90       	pop	r12
    1562:	08 95       	ret

00001564 <timer2SwPWM>:
/**
* Description:
* @param dutyCycle
*/
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    1564:	cf 92       	push	r12
    1566:	df 92       	push	r13
    1568:	ef 92       	push	r14
    156a:	ff 92       	push	r15
    156c:	cf 93       	push	r28
    156e:	c8 2f       	mov	r28, r24

float dutyReal;
pwm_time_on=MAX_HOLD;
    1570:	8f ef       	ldi	r24, 0xFF	; 255
    1572:	80 93 45 01 	sts	0x0145, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
    1576:	60 91 45 01 	lds	r22, 0x0145
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__floatunsisf>
    1584:	6b 01       	movw	r12, r22
    1586:	7c 01       	movw	r14, r24
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{

float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
    1588:	6c 2f       	mov	r22, r28
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__floatunsisf>
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	48 ec       	ldi	r20, 0xC8	; 200
    159a:	52 e4       	ldi	r21, 0x42	; 66
    159c:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__divsf3>
    15a0:	9b 01       	movw	r18, r22
    15a2:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
    15a4:	c7 01       	movw	r24, r14
    15a6:	b6 01       	movw	r22, r12
    15a8:	0e 94 8d 0c 	call	0x191a	; 0x191a <__mulsf3>
    15ac:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <__fixunssfsi>
    15b0:	60 93 45 01 	sts	0x0145, r22
switch(pooling_2)
    15b4:	80 91 48 01 	lds	r24, 0x0148
    15b8:	88 23       	and	r24, r24
    15ba:	19 f0       	breq	.+6      	; 0x15c2 <timer2SwPWM+0x5e>
    15bc:	81 30       	cpi	r24, 0x01	; 1
    15be:	19 f5       	brne	.+70     	; 0x1606 <timer2SwPWM+0xa2>
    15c0:	19 c0       	rjmp	.+50     	; 0x15f4 <timer2SwPWM+0x90>
{
	case 0:
	{
		timer2Start();
    15c2:	0e 94 8d 09 	call	0x131a	; 0x131a <timer2Start>
		timer2Set(pwm_time_on);
    15c6:	80 91 45 01 	lds	r24, 0x0145
    15ca:	0e 94 87 09 	call	0x130e	; 0x130e <timer2Set>
		//freq 50KHZ is the Max frequency possible
		while ((TIFR2 & 0x01)==0);
    15ce:	b8 9b       	sbis	0x17, 0	; 23
    15d0:	fe cf       	rjmp	.-4      	; 0x15ce <timer2SwPWM+0x6a>
		TIFR2 |=0x01;
    15d2:	b8 9a       	sbi	0x17, 0	; 23
		PORTC_DATA |=0xff;
    15d4:	88 b1       	in	r24, 0x08	; 8
    15d6:	8f ef       	ldi	r24, 0xFF	; 255
    15d8:	88 b9       	out	0x08, r24	; 8
		timer2Start();
    15da:	0e 94 8d 09 	call	0x131a	; 0x131a <timer2Start>
		timer2Set(MAX_HOLD-pwm_time_on);
    15de:	80 91 45 01 	lds	r24, 0x0145
    15e2:	80 95       	com	r24
    15e4:	0e 94 87 09 	call	0x130e	; 0x130e <timer2Set>
		//freq
		while ((TIFR2 & 0x01)==0);
    15e8:	b8 9b       	sbis	0x17, 0	; 23
    15ea:	fe cf       	rjmp	.-4      	; 0x15e8 <timer2SwPWM+0x84>
		TIFR2 |=0x01;
    15ec:	b8 9a       	sbi	0x17, 0	; 23
		PORTC_DATA &=0x00;
    15ee:	88 b1       	in	r24, 0x08	; 8
    15f0:	18 b8       	out	0x08, r1	; 8

		break;
    15f2:	09 c0       	rjmp	.+18     	; 0x1606 <timer2SwPWM+0xa2>
	}
	case 1:
	{
		timer2Start();
    15f4:	0e 94 8d 09 	call	0x131a	; 0x131a <timer2Start>
		OCR2=pwm_time_on;
    15f8:	80 91 45 01 	lds	r24, 0x0145
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	90 93 b4 00 	sts	0x00B4, r25
    1602:	80 93 b3 00 	sts	0x00B3, r24
	}

}


}
    1606:	cf 91       	pop	r28
    1608:	ff 90       	pop	r15
    160a:	ef 90       	pop	r14
    160c:	df 90       	pop	r13
    160e:	cf 90       	pop	r12
    1610:	08 95       	ret

00001612 <Timer2_interrupt_COMP_routine>:
void Timer2_interrupt_COMP_routine(void)
{



}
    1612:	08 95       	ret

00001614 <Timer2_interrupt_routine>:
void Timer2_interrupt_routine(void)
{
timer2_interrupt_raised=1;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	80 93 43 01 	sts	0x0143, r24
timer2_interrupt_counter++;
    161a:	80 91 41 01 	lds	r24, 0x0141
    161e:	90 91 42 01 	lds	r25, 0x0142
    1622:	01 96       	adiw	r24, 0x01	; 1
    1624:	90 93 42 01 	sts	0x0142, r25
    1628:	80 93 41 01 	sts	0x0141, r24
}
    162c:	08 95       	ret

0000162e <Us_Init>:
 *                                                                                                  *
 *                                                                                                  *
 ***************************************************************************************************/

ERROR_STATUS Us_Init(void)
{uint8_t Ret;
    162e:	cf 92       	push	r12
    1630:	ef 92       	push	r14
    1632:	0f 93       	push	r16
    1634:	cf 93       	push	r28
Ret=DIO_init(&US_Configuration);
    1636:	84 e2       	ldi	r24, 0x24	; 36
    1638:	91 e0       	ldi	r25, 0x01	; 1
    163a:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_init>
Ret=Icu_Init(&ICU_Configuration);
    163e:	8f e0       	ldi	r24, 0x0F	; 15
    1640:	91 e0       	ldi	r25, 0x01	; 1
    1642:	0e 94 64 01 	call	0x2c8	; 0x2c8 <Icu_Init>
    1646:	c8 2f       	mov	r28, r24
timer2Init(T2_NORMAL_MODE,T2_OC2B_CLEAR,T2_PRESCALER_1024,0,0,0,T2_INTERRUPT_NORMAL);
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	60 e2       	ldi	r22, 0x20	; 32
    164c:	47 e0       	ldi	r20, 0x07	; 7
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	00 e0       	ldi	r16, 0x00	; 0
    1652:	ee 24       	eor	r14, r14
    1654:	cc 24       	eor	r12, r12
    1656:	c3 94       	inc	r12
    1658:	0e 94 9e 09 	call	0x133c	; 0x133c <timer2Init>
return Ret;
}
    165c:	8c 2f       	mov	r24, r28
    165e:	cf 91       	pop	r28
    1660:	0f 91       	pop	r16
    1662:	ef 90       	pop	r14
    1664:	cf 90       	pop	r12
    1666:	08 95       	ret

00001668 <Us_Trigger>:
ERROR_STATUS Us_Trigger(void)
{uint8_t Ret=0;
if(timer2_interrupt_raised){
    1668:	80 91 43 01 	lds	r24, 0x0143
    166c:	88 23       	and	r24, r24
    166e:	99 f0       	breq	.+38     	; 0x1696 <Us_Trigger+0x2e>
timer2_interrupt_raised=0;
    1670:	10 92 43 01 	sts	0x0143, r1
Ret=DIO_Toggle(GPIOD,BIT1);
    1674:	83 e0       	ldi	r24, 0x03	; 3
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	62 e0       	ldi	r22, 0x02	; 2
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    1680:	82 e3       	ldi	r24, 0x32	; 50
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	01 97       	sbiw	r24, 0x01	; 1
for (int i=0;i<50;i++)
    1686:	f1 f7       	brne	.-4      	; 0x1684 <Us_Trigger+0x1c>
{;/*a pulse for 10 Micro seconds*/
}
Ret=DIO_Toggle(GPIOD,BIT1);
    1688:	83 e0       	ldi	r24, 0x03	; 3
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	62 e0       	ldi	r22, 0x02	; 2
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    1694:	08 95       	ret
Ret=Icu_Init(&ICU_Configuration);
timer2Init(T2_NORMAL_MODE,T2_OC2B_CLEAR,T2_PRESCALER_1024,0,0,0,T2_INTERRUPT_NORMAL);
return Ret;
}
ERROR_STATUS Us_Trigger(void)
{uint8_t Ret=0;
    1696:	80 e0       	ldi	r24, 0x00	; 0
{;/*a pulse for 10 Micro seconds*/
}
Ret=DIO_Toggle(GPIOD,BIT1);
}
return Ret;
}
    1698:	08 95       	ret

0000169a <Us_GetDistance>:


ERROR_STATUS Us_GetDistance(uint16_t *Distance)
{uint8_t Ret=0;
    169a:	0f 93       	push	r16
    169c:	1f 93       	push	r17
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <Us_GetDistance+0xa>
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <Us_GetDistance+0xc>
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	8c 01       	movw	r16, r24
	uint32_t u32l_Time;
	Ret=Icu_ReadTime(ICU_CH2,ICU_RISE_TO_FALL,&u32l_Time);
    16ac:	82 e0       	ldi	r24, 0x02	; 2
    16ae:	61 e0       	ldi	r22, 0x01	; 1
    16b0:	ae 01       	movw	r20, r28
    16b2:	4f 5f       	subi	r20, 0xFF	; 255
    16b4:	5f 4f       	sbci	r21, 0xFF	; 255
    16b6:	0e 94 93 01 	call	0x326	; 0x326 <Icu_ReadTime>
	*Distance=u32l_Time;
    16ba:	29 81       	ldd	r18, Y+1	; 0x01
    16bc:	3a 81       	ldd	r19, Y+2	; 0x02
    16be:	f8 01       	movw	r30, r16
    16c0:	31 83       	std	Z+1, r19	; 0x01
    16c2:	20 83       	st	Z, r18
	return Ret;
}
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	1f 91       	pop	r17
    16d2:	0f 91       	pop	r16
    16d4:	08 95       	ret

000016d6 <__divsf3>:
    16d6:	0c d0       	rcall	.+24     	; 0x16f0 <__divsf3x>
    16d8:	e6 c0       	rjmp	.+460    	; 0x18a6 <__fp_round>
    16da:	de d0       	rcall	.+444    	; 0x1898 <__fp_pscB>
    16dc:	40 f0       	brcs	.+16     	; 0x16ee <__divsf3+0x18>
    16de:	d5 d0       	rcall	.+426    	; 0x188a <__fp_pscA>
    16e0:	30 f0       	brcs	.+12     	; 0x16ee <__divsf3+0x18>
    16e2:	21 f4       	brne	.+8      	; 0x16ec <__divsf3+0x16>
    16e4:	5f 3f       	cpi	r21, 0xFF	; 255
    16e6:	19 f0       	breq	.+6      	; 0x16ee <__divsf3+0x18>
    16e8:	c7 c0       	rjmp	.+398    	; 0x1878 <__fp_inf>
    16ea:	51 11       	cpse	r21, r1
    16ec:	10 c1       	rjmp	.+544    	; 0x190e <__fp_szero>
    16ee:	ca c0       	rjmp	.+404    	; 0x1884 <__fp_nan>

000016f0 <__divsf3x>:
    16f0:	eb d0       	rcall	.+470    	; 0x18c8 <__fp_split3>
    16f2:	98 f3       	brcs	.-26     	; 0x16da <__divsf3+0x4>

000016f4 <__divsf3_pse>:
    16f4:	99 23       	and	r25, r25
    16f6:	c9 f3       	breq	.-14     	; 0x16ea <__divsf3+0x14>
    16f8:	55 23       	and	r21, r21
    16fa:	b1 f3       	breq	.-20     	; 0x16e8 <__divsf3+0x12>
    16fc:	95 1b       	sub	r25, r21
    16fe:	55 0b       	sbc	r21, r21
    1700:	bb 27       	eor	r27, r27
    1702:	aa 27       	eor	r26, r26
    1704:	62 17       	cp	r22, r18
    1706:	73 07       	cpc	r23, r19
    1708:	84 07       	cpc	r24, r20
    170a:	38 f0       	brcs	.+14     	; 0x171a <__divsf3_pse+0x26>
    170c:	9f 5f       	subi	r25, 0xFF	; 255
    170e:	5f 4f       	sbci	r21, 0xFF	; 255
    1710:	22 0f       	add	r18, r18
    1712:	33 1f       	adc	r19, r19
    1714:	44 1f       	adc	r20, r20
    1716:	aa 1f       	adc	r26, r26
    1718:	a9 f3       	breq	.-22     	; 0x1704 <__divsf3_pse+0x10>
    171a:	33 d0       	rcall	.+102    	; 0x1782 <__divsf3_pse+0x8e>
    171c:	0e 2e       	mov	r0, r30
    171e:	3a f0       	brmi	.+14     	; 0x172e <__divsf3_pse+0x3a>
    1720:	e0 e8       	ldi	r30, 0x80	; 128
    1722:	30 d0       	rcall	.+96     	; 0x1784 <__divsf3_pse+0x90>
    1724:	91 50       	subi	r25, 0x01	; 1
    1726:	50 40       	sbci	r21, 0x00	; 0
    1728:	e6 95       	lsr	r30
    172a:	00 1c       	adc	r0, r0
    172c:	ca f7       	brpl	.-14     	; 0x1720 <__divsf3_pse+0x2c>
    172e:	29 d0       	rcall	.+82     	; 0x1782 <__divsf3_pse+0x8e>
    1730:	fe 2f       	mov	r31, r30
    1732:	27 d0       	rcall	.+78     	; 0x1782 <__divsf3_pse+0x8e>
    1734:	66 0f       	add	r22, r22
    1736:	77 1f       	adc	r23, r23
    1738:	88 1f       	adc	r24, r24
    173a:	bb 1f       	adc	r27, r27
    173c:	26 17       	cp	r18, r22
    173e:	37 07       	cpc	r19, r23
    1740:	48 07       	cpc	r20, r24
    1742:	ab 07       	cpc	r26, r27
    1744:	b0 e8       	ldi	r27, 0x80	; 128
    1746:	09 f0       	breq	.+2      	; 0x174a <__divsf3_pse+0x56>
    1748:	bb 0b       	sbc	r27, r27
    174a:	80 2d       	mov	r24, r0
    174c:	bf 01       	movw	r22, r30
    174e:	ff 27       	eor	r31, r31
    1750:	93 58       	subi	r25, 0x83	; 131
    1752:	5f 4f       	sbci	r21, 0xFF	; 255
    1754:	2a f0       	brmi	.+10     	; 0x1760 <__divsf3_pse+0x6c>
    1756:	9e 3f       	cpi	r25, 0xFE	; 254
    1758:	51 05       	cpc	r21, r1
    175a:	68 f0       	brcs	.+26     	; 0x1776 <__divsf3_pse+0x82>
    175c:	8d c0       	rjmp	.+282    	; 0x1878 <__fp_inf>
    175e:	d7 c0       	rjmp	.+430    	; 0x190e <__fp_szero>
    1760:	5f 3f       	cpi	r21, 0xFF	; 255
    1762:	ec f3       	brlt	.-6      	; 0x175e <__divsf3_pse+0x6a>
    1764:	98 3e       	cpi	r25, 0xE8	; 232
    1766:	dc f3       	brlt	.-10     	; 0x175e <__divsf3_pse+0x6a>
    1768:	86 95       	lsr	r24
    176a:	77 95       	ror	r23
    176c:	67 95       	ror	r22
    176e:	b7 95       	ror	r27
    1770:	f7 95       	ror	r31
    1772:	9f 5f       	subi	r25, 0xFF	; 255
    1774:	c9 f7       	brne	.-14     	; 0x1768 <__divsf3_pse+0x74>
    1776:	88 0f       	add	r24, r24
    1778:	91 1d       	adc	r25, r1
    177a:	96 95       	lsr	r25
    177c:	87 95       	ror	r24
    177e:	97 f9       	bld	r25, 7
    1780:	08 95       	ret
    1782:	e1 e0       	ldi	r30, 0x01	; 1
    1784:	66 0f       	add	r22, r22
    1786:	77 1f       	adc	r23, r23
    1788:	88 1f       	adc	r24, r24
    178a:	bb 1f       	adc	r27, r27
    178c:	62 17       	cp	r22, r18
    178e:	73 07       	cpc	r23, r19
    1790:	84 07       	cpc	r24, r20
    1792:	ba 07       	cpc	r27, r26
    1794:	20 f0       	brcs	.+8      	; 0x179e <__divsf3_pse+0xaa>
    1796:	62 1b       	sub	r22, r18
    1798:	73 0b       	sbc	r23, r19
    179a:	84 0b       	sbc	r24, r20
    179c:	ba 0b       	sbc	r27, r26
    179e:	ee 1f       	adc	r30, r30
    17a0:	88 f7       	brcc	.-30     	; 0x1784 <__divsf3_pse+0x90>
    17a2:	e0 95       	com	r30
    17a4:	08 95       	ret

000017a6 <__fixunssfsi>:
    17a6:	98 d0       	rcall	.+304    	; 0x18d8 <__fp_splitA>
    17a8:	88 f0       	brcs	.+34     	; 0x17cc <__fixunssfsi+0x26>
    17aa:	9f 57       	subi	r25, 0x7F	; 127
    17ac:	90 f0       	brcs	.+36     	; 0x17d2 <__fixunssfsi+0x2c>
    17ae:	b9 2f       	mov	r27, r25
    17b0:	99 27       	eor	r25, r25
    17b2:	b7 51       	subi	r27, 0x17	; 23
    17b4:	a0 f0       	brcs	.+40     	; 0x17de <__fixunssfsi+0x38>
    17b6:	d1 f0       	breq	.+52     	; 0x17ec <__fixunssfsi+0x46>
    17b8:	66 0f       	add	r22, r22
    17ba:	77 1f       	adc	r23, r23
    17bc:	88 1f       	adc	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	1a f0       	brmi	.+6      	; 0x17c8 <__fixunssfsi+0x22>
    17c2:	ba 95       	dec	r27
    17c4:	c9 f7       	brne	.-14     	; 0x17b8 <__fixunssfsi+0x12>
    17c6:	12 c0       	rjmp	.+36     	; 0x17ec <__fixunssfsi+0x46>
    17c8:	b1 30       	cpi	r27, 0x01	; 1
    17ca:	81 f0       	breq	.+32     	; 0x17ec <__fixunssfsi+0x46>
    17cc:	9f d0       	rcall	.+318    	; 0x190c <__fp_zero>
    17ce:	b1 e0       	ldi	r27, 0x01	; 1
    17d0:	08 95       	ret
    17d2:	9c c0       	rjmp	.+312    	; 0x190c <__fp_zero>
    17d4:	67 2f       	mov	r22, r23
    17d6:	78 2f       	mov	r23, r24
    17d8:	88 27       	eor	r24, r24
    17da:	b8 5f       	subi	r27, 0xF8	; 248
    17dc:	39 f0       	breq	.+14     	; 0x17ec <__fixunssfsi+0x46>
    17de:	b9 3f       	cpi	r27, 0xF9	; 249
    17e0:	cc f3       	brlt	.-14     	; 0x17d4 <__fixunssfsi+0x2e>
    17e2:	86 95       	lsr	r24
    17e4:	77 95       	ror	r23
    17e6:	67 95       	ror	r22
    17e8:	b3 95       	inc	r27
    17ea:	d9 f7       	brne	.-10     	; 0x17e2 <__fixunssfsi+0x3c>
    17ec:	3e f4       	brtc	.+14     	; 0x17fc <__fixunssfsi+0x56>
    17ee:	90 95       	com	r25
    17f0:	80 95       	com	r24
    17f2:	70 95       	com	r23
    17f4:	61 95       	neg	r22
    17f6:	7f 4f       	sbci	r23, 0xFF	; 255
    17f8:	8f 4f       	sbci	r24, 0xFF	; 255
    17fa:	9f 4f       	sbci	r25, 0xFF	; 255
    17fc:	08 95       	ret

000017fe <__floatunsisf>:
    17fe:	e8 94       	clt
    1800:	09 c0       	rjmp	.+18     	; 0x1814 <__floatsisf+0x12>

00001802 <__floatsisf>:
    1802:	97 fb       	bst	r25, 7
    1804:	3e f4       	brtc	.+14     	; 0x1814 <__floatsisf+0x12>
    1806:	90 95       	com	r25
    1808:	80 95       	com	r24
    180a:	70 95       	com	r23
    180c:	61 95       	neg	r22
    180e:	7f 4f       	sbci	r23, 0xFF	; 255
    1810:	8f 4f       	sbci	r24, 0xFF	; 255
    1812:	9f 4f       	sbci	r25, 0xFF	; 255
    1814:	99 23       	and	r25, r25
    1816:	a9 f0       	breq	.+42     	; 0x1842 <__floatsisf+0x40>
    1818:	f9 2f       	mov	r31, r25
    181a:	96 e9       	ldi	r25, 0x96	; 150
    181c:	bb 27       	eor	r27, r27
    181e:	93 95       	inc	r25
    1820:	f6 95       	lsr	r31
    1822:	87 95       	ror	r24
    1824:	77 95       	ror	r23
    1826:	67 95       	ror	r22
    1828:	b7 95       	ror	r27
    182a:	f1 11       	cpse	r31, r1
    182c:	f8 cf       	rjmp	.-16     	; 0x181e <__floatsisf+0x1c>
    182e:	fa f4       	brpl	.+62     	; 0x186e <__floatsisf+0x6c>
    1830:	bb 0f       	add	r27, r27
    1832:	11 f4       	brne	.+4      	; 0x1838 <__floatsisf+0x36>
    1834:	60 ff       	sbrs	r22, 0
    1836:	1b c0       	rjmp	.+54     	; 0x186e <__floatsisf+0x6c>
    1838:	6f 5f       	subi	r22, 0xFF	; 255
    183a:	7f 4f       	sbci	r23, 0xFF	; 255
    183c:	8f 4f       	sbci	r24, 0xFF	; 255
    183e:	9f 4f       	sbci	r25, 0xFF	; 255
    1840:	16 c0       	rjmp	.+44     	; 0x186e <__floatsisf+0x6c>
    1842:	88 23       	and	r24, r24
    1844:	11 f0       	breq	.+4      	; 0x184a <__floatsisf+0x48>
    1846:	96 e9       	ldi	r25, 0x96	; 150
    1848:	11 c0       	rjmp	.+34     	; 0x186c <__floatsisf+0x6a>
    184a:	77 23       	and	r23, r23
    184c:	21 f0       	breq	.+8      	; 0x1856 <__floatsisf+0x54>
    184e:	9e e8       	ldi	r25, 0x8E	; 142
    1850:	87 2f       	mov	r24, r23
    1852:	76 2f       	mov	r23, r22
    1854:	05 c0       	rjmp	.+10     	; 0x1860 <__floatsisf+0x5e>
    1856:	66 23       	and	r22, r22
    1858:	71 f0       	breq	.+28     	; 0x1876 <__floatsisf+0x74>
    185a:	96 e8       	ldi	r25, 0x86	; 134
    185c:	86 2f       	mov	r24, r22
    185e:	70 e0       	ldi	r23, 0x00	; 0
    1860:	60 e0       	ldi	r22, 0x00	; 0
    1862:	2a f0       	brmi	.+10     	; 0x186e <__floatsisf+0x6c>
    1864:	9a 95       	dec	r25
    1866:	66 0f       	add	r22, r22
    1868:	77 1f       	adc	r23, r23
    186a:	88 1f       	adc	r24, r24
    186c:	da f7       	brpl	.-10     	; 0x1864 <__floatsisf+0x62>
    186e:	88 0f       	add	r24, r24
    1870:	96 95       	lsr	r25
    1872:	87 95       	ror	r24
    1874:	97 f9       	bld	r25, 7
    1876:	08 95       	ret

00001878 <__fp_inf>:
    1878:	97 f9       	bld	r25, 7
    187a:	9f 67       	ori	r25, 0x7F	; 127
    187c:	80 e8       	ldi	r24, 0x80	; 128
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	60 e0       	ldi	r22, 0x00	; 0
    1882:	08 95       	ret

00001884 <__fp_nan>:
    1884:	9f ef       	ldi	r25, 0xFF	; 255
    1886:	80 ec       	ldi	r24, 0xC0	; 192
    1888:	08 95       	ret

0000188a <__fp_pscA>:
    188a:	00 24       	eor	r0, r0
    188c:	0a 94       	dec	r0
    188e:	16 16       	cp	r1, r22
    1890:	17 06       	cpc	r1, r23
    1892:	18 06       	cpc	r1, r24
    1894:	09 06       	cpc	r0, r25
    1896:	08 95       	ret

00001898 <__fp_pscB>:
    1898:	00 24       	eor	r0, r0
    189a:	0a 94       	dec	r0
    189c:	12 16       	cp	r1, r18
    189e:	13 06       	cpc	r1, r19
    18a0:	14 06       	cpc	r1, r20
    18a2:	05 06       	cpc	r0, r21
    18a4:	08 95       	ret

000018a6 <__fp_round>:
    18a6:	09 2e       	mov	r0, r25
    18a8:	03 94       	inc	r0
    18aa:	00 0c       	add	r0, r0
    18ac:	11 f4       	brne	.+4      	; 0x18b2 <__fp_round+0xc>
    18ae:	88 23       	and	r24, r24
    18b0:	52 f0       	brmi	.+20     	; 0x18c6 <__fp_round+0x20>
    18b2:	bb 0f       	add	r27, r27
    18b4:	40 f4       	brcc	.+16     	; 0x18c6 <__fp_round+0x20>
    18b6:	bf 2b       	or	r27, r31
    18b8:	11 f4       	brne	.+4      	; 0x18be <__fp_round+0x18>
    18ba:	60 ff       	sbrs	r22, 0
    18bc:	04 c0       	rjmp	.+8      	; 0x18c6 <__fp_round+0x20>
    18be:	6f 5f       	subi	r22, 0xFF	; 255
    18c0:	7f 4f       	sbci	r23, 0xFF	; 255
    18c2:	8f 4f       	sbci	r24, 0xFF	; 255
    18c4:	9f 4f       	sbci	r25, 0xFF	; 255
    18c6:	08 95       	ret

000018c8 <__fp_split3>:
    18c8:	57 fd       	sbrc	r21, 7
    18ca:	90 58       	subi	r25, 0x80	; 128
    18cc:	44 0f       	add	r20, r20
    18ce:	55 1f       	adc	r21, r21
    18d0:	59 f0       	breq	.+22     	; 0x18e8 <__fp_splitA+0x10>
    18d2:	5f 3f       	cpi	r21, 0xFF	; 255
    18d4:	71 f0       	breq	.+28     	; 0x18f2 <__fp_splitA+0x1a>
    18d6:	47 95       	ror	r20

000018d8 <__fp_splitA>:
    18d8:	88 0f       	add	r24, r24
    18da:	97 fb       	bst	r25, 7
    18dc:	99 1f       	adc	r25, r25
    18de:	61 f0       	breq	.+24     	; 0x18f8 <__fp_splitA+0x20>
    18e0:	9f 3f       	cpi	r25, 0xFF	; 255
    18e2:	79 f0       	breq	.+30     	; 0x1902 <__fp_splitA+0x2a>
    18e4:	87 95       	ror	r24
    18e6:	08 95       	ret
    18e8:	12 16       	cp	r1, r18
    18ea:	13 06       	cpc	r1, r19
    18ec:	14 06       	cpc	r1, r20
    18ee:	55 1f       	adc	r21, r21
    18f0:	f2 cf       	rjmp	.-28     	; 0x18d6 <__fp_split3+0xe>
    18f2:	46 95       	lsr	r20
    18f4:	f1 df       	rcall	.-30     	; 0x18d8 <__fp_splitA>
    18f6:	08 c0       	rjmp	.+16     	; 0x1908 <__fp_splitA+0x30>
    18f8:	16 16       	cp	r1, r22
    18fa:	17 06       	cpc	r1, r23
    18fc:	18 06       	cpc	r1, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	f1 cf       	rjmp	.-30     	; 0x18e4 <__fp_splitA+0xc>
    1902:	86 95       	lsr	r24
    1904:	71 05       	cpc	r23, r1
    1906:	61 05       	cpc	r22, r1
    1908:	08 94       	sec
    190a:	08 95       	ret

0000190c <__fp_zero>:
    190c:	e8 94       	clt

0000190e <__fp_szero>:
    190e:	bb 27       	eor	r27, r27
    1910:	66 27       	eor	r22, r22
    1912:	77 27       	eor	r23, r23
    1914:	cb 01       	movw	r24, r22
    1916:	97 f9       	bld	r25, 7
    1918:	08 95       	ret

0000191a <__mulsf3>:
    191a:	0b d0       	rcall	.+22     	; 0x1932 <__mulsf3x>
    191c:	c4 cf       	rjmp	.-120    	; 0x18a6 <__fp_round>
    191e:	b5 df       	rcall	.-150    	; 0x188a <__fp_pscA>
    1920:	28 f0       	brcs	.+10     	; 0x192c <__mulsf3+0x12>
    1922:	ba df       	rcall	.-140    	; 0x1898 <__fp_pscB>
    1924:	18 f0       	brcs	.+6      	; 0x192c <__mulsf3+0x12>
    1926:	95 23       	and	r25, r21
    1928:	09 f0       	breq	.+2      	; 0x192c <__mulsf3+0x12>
    192a:	a6 cf       	rjmp	.-180    	; 0x1878 <__fp_inf>
    192c:	ab cf       	rjmp	.-170    	; 0x1884 <__fp_nan>
    192e:	11 24       	eor	r1, r1
    1930:	ee cf       	rjmp	.-36     	; 0x190e <__fp_szero>

00001932 <__mulsf3x>:
    1932:	ca df       	rcall	.-108    	; 0x18c8 <__fp_split3>
    1934:	a0 f3       	brcs	.-24     	; 0x191e <__mulsf3+0x4>

00001936 <__mulsf3_pse>:
    1936:	95 9f       	mul	r25, r21
    1938:	d1 f3       	breq	.-12     	; 0x192e <__mulsf3+0x14>
    193a:	95 0f       	add	r25, r21
    193c:	50 e0       	ldi	r21, 0x00	; 0
    193e:	55 1f       	adc	r21, r21
    1940:	62 9f       	mul	r22, r18
    1942:	f0 01       	movw	r30, r0
    1944:	72 9f       	mul	r23, r18
    1946:	bb 27       	eor	r27, r27
    1948:	f0 0d       	add	r31, r0
    194a:	b1 1d       	adc	r27, r1
    194c:	63 9f       	mul	r22, r19
    194e:	aa 27       	eor	r26, r26
    1950:	f0 0d       	add	r31, r0
    1952:	b1 1d       	adc	r27, r1
    1954:	aa 1f       	adc	r26, r26
    1956:	64 9f       	mul	r22, r20
    1958:	66 27       	eor	r22, r22
    195a:	b0 0d       	add	r27, r0
    195c:	a1 1d       	adc	r26, r1
    195e:	66 1f       	adc	r22, r22
    1960:	82 9f       	mul	r24, r18
    1962:	22 27       	eor	r18, r18
    1964:	b0 0d       	add	r27, r0
    1966:	a1 1d       	adc	r26, r1
    1968:	62 1f       	adc	r22, r18
    196a:	73 9f       	mul	r23, r19
    196c:	b0 0d       	add	r27, r0
    196e:	a1 1d       	adc	r26, r1
    1970:	62 1f       	adc	r22, r18
    1972:	83 9f       	mul	r24, r19
    1974:	a0 0d       	add	r26, r0
    1976:	61 1d       	adc	r22, r1
    1978:	22 1f       	adc	r18, r18
    197a:	74 9f       	mul	r23, r20
    197c:	33 27       	eor	r19, r19
    197e:	a0 0d       	add	r26, r0
    1980:	61 1d       	adc	r22, r1
    1982:	23 1f       	adc	r18, r19
    1984:	84 9f       	mul	r24, r20
    1986:	60 0d       	add	r22, r0
    1988:	21 1d       	adc	r18, r1
    198a:	82 2f       	mov	r24, r18
    198c:	76 2f       	mov	r23, r22
    198e:	6a 2f       	mov	r22, r26
    1990:	11 24       	eor	r1, r1
    1992:	9f 57       	subi	r25, 0x7F	; 127
    1994:	50 40       	sbci	r21, 0x00	; 0
    1996:	8a f0       	brmi	.+34     	; 0x19ba <__mulsf3_pse+0x84>
    1998:	e1 f0       	breq	.+56     	; 0x19d2 <__mulsf3_pse+0x9c>
    199a:	88 23       	and	r24, r24
    199c:	4a f0       	brmi	.+18     	; 0x19b0 <__mulsf3_pse+0x7a>
    199e:	ee 0f       	add	r30, r30
    19a0:	ff 1f       	adc	r31, r31
    19a2:	bb 1f       	adc	r27, r27
    19a4:	66 1f       	adc	r22, r22
    19a6:	77 1f       	adc	r23, r23
    19a8:	88 1f       	adc	r24, r24
    19aa:	91 50       	subi	r25, 0x01	; 1
    19ac:	50 40       	sbci	r21, 0x00	; 0
    19ae:	a9 f7       	brne	.-22     	; 0x199a <__mulsf3_pse+0x64>
    19b0:	9e 3f       	cpi	r25, 0xFE	; 254
    19b2:	51 05       	cpc	r21, r1
    19b4:	70 f0       	brcs	.+28     	; 0x19d2 <__mulsf3_pse+0x9c>
    19b6:	60 cf       	rjmp	.-320    	; 0x1878 <__fp_inf>
    19b8:	aa cf       	rjmp	.-172    	; 0x190e <__fp_szero>
    19ba:	5f 3f       	cpi	r21, 0xFF	; 255
    19bc:	ec f3       	brlt	.-6      	; 0x19b8 <__mulsf3_pse+0x82>
    19be:	98 3e       	cpi	r25, 0xE8	; 232
    19c0:	dc f3       	brlt	.-10     	; 0x19b8 <__mulsf3_pse+0x82>
    19c2:	86 95       	lsr	r24
    19c4:	77 95       	ror	r23
    19c6:	67 95       	ror	r22
    19c8:	b7 95       	ror	r27
    19ca:	f7 95       	ror	r31
    19cc:	e7 95       	ror	r30
    19ce:	9f 5f       	subi	r25, 0xFF	; 255
    19d0:	c1 f7       	brne	.-16     	; 0x19c2 <__mulsf3_pse+0x8c>
    19d2:	fe 2b       	or	r31, r30
    19d4:	88 0f       	add	r24, r24
    19d6:	91 1d       	adc	r25, r1
    19d8:	96 95       	lsr	r25
    19da:	87 95       	ror	r24
    19dc:	97 f9       	bld	r25, 7
    19de:	08 95       	ret

000019e0 <_exit>:
    19e0:	f8 94       	cli

000019e2 <__stop_program>:
    19e2:	ff cf       	rjmp	.-2      	; 0x19e2 <__stop_program>
