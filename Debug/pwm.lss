
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00001b12  00001ba6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  00800124  00800124  00001bca  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00001bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00003798  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00003d20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002377  00000000  00000000  00003ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4c  00000000  00000000  00006237  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a22  00000000  00000000  00006d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000db4  00000000  00000000  000077a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d46  00000000  00000000  0000855c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021f3  00000000  00000000  000092a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 c1 02 	jmp	0x582	; 0x582 <__vector_1>
       8:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__vector_2>
       c:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__vector_3>
      10:	0c 94 36 03 	jmp	0x66c	; 0x66c <__vector_4>
      14:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__vector_5>
      18:	0c 94 84 03 	jmp	0x708	; 0x708 <__vector_6>
      1c:	0c 94 ab 03 	jmp	0x756	; 0x756 <__vector_7>
      20:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__vector_8>
      24:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__vector_9>
      28:	0c 94 20 04 	jmp	0x840	; 0x840 <__vector_10>
      2c:	0c 94 47 04 	jmp	0x88e	; 0x88e <__vector_11>
      30:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__vector_12>
      34:	0c 94 95 04 	jmp	0x92a	; 0x92a <__vector_13>
      38:	0c 94 bc 04 	jmp	0x978	; 0x978 <__vector_14>
      3c:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__vector_15>
      40:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <__vector_16>
      44:	0c 94 31 05 	jmp	0xa62	; 0xa62 <__vector_17>
      48:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__vector_18>
      4c:	0c 94 7f 05 	jmp	0xafe	; 0xafe <__vector_19>
      50:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__vector_20>
      54:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__vector_21>
      58:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__vector_22>
      5c:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__vector_23>
      60:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__vector_24>
      64:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__vector_25>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e1       	ldi	r30, 0x12	; 18
      7c:	fb e1       	ldi	r31, 0x1B	; 27
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 32       	cpi	r26, 0x24	; 36
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a4 e2       	ldi	r26, 0x24	; 36
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 37       	cpi	r26, 0x7F	; 127
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 90 06 	call	0xd20	; 0xd20 <main>
      9e:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DIO_init>:
*/


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
      a6:	fc 01       	movw	r30, r24
  uint8_t RET=0;
  static uint8_t Multiple_init=0;
  if (DIO_info == NULL)
      a8:	00 97       	sbiw	r24, 0x00	; 0
      aa:	09 f4       	brne	.+2      	; 0xae <DIO_init+0x8>
      ac:	5e c0       	rjmp	.+188    	; 0x16a <DIO_init+0xc4>
  {
    RET=NULL_PTR+DIO_MODULE;

  }else{
    u8_is_init=1;
      ae:	81 e0       	ldi	r24, 0x01	; 1
      b0:	80 93 24 01 	sts	0x0124, r24
    switch(DIO_info->dir)
      b4:	82 81       	ldd	r24, Z+2	; 0x02
      b6:	88 23       	and	r24, r24
      b8:	21 f0       	breq	.+8      	; 0xc2 <DIO_init+0x1c>
      ba:	8f 3f       	cpi	r24, 0xFF	; 255
      bc:	09 f0       	breq	.+2      	; 0xc0 <DIO_init+0x1a>
      be:	57 c0       	rjmp	.+174    	; 0x16e <DIO_init+0xc8>
      c0:	2c c0       	rjmp	.+88     	; 0x11a <DIO_init+0x74>
    {
    case INPUT:
      switch(DIO_info ->GPIO)
      c2:	80 81       	ld	r24, Z
      c4:	82 30       	cpi	r24, 0x02	; 2
      c6:	89 f0       	breq	.+34     	; 0xea <DIO_init+0x44>
      c8:	83 30       	cpi	r24, 0x03	; 3
      ca:	d9 f0       	breq	.+54     	; 0x102 <DIO_init+0x5c>
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	09 f0       	breq	.+2      	; 0xd2 <DIO_init+0x2c>
      d0:	50 c0       	rjmp	.+160    	; 0x172 <DIO_init+0xcc>
      {
      case GPIOB:
        PORTB_DIR &=(~(DIO_info->pins)) ;
      d2:	94 b1       	in	r25, 0x04	; 4
      d4:	81 81       	ldd	r24, Z+1	; 0x01
      d6:	80 95       	com	r24
      d8:	89 23       	and	r24, r25
      da:	84 b9       	out	0x04, r24	; 4
        Multiple_init+=2;
      dc:	80 91 25 01 	lds	r24, 0x0125
      e0:	8e 5f       	subi	r24, 0xFE	; 254
      e2:	80 93 25 01 	sts	0x0125, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
      e6:	80 e0       	ldi	r24, 0x00	; 0
      switch(DIO_info ->GPIO)
      {
      case GPIOB:
        PORTB_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=2;
        break;
      e8:	08 95       	ret
      case GPIOC:
        PORTC_DIR &=(~(DIO_info->pins)) ;
      ea:	97 b1       	in	r25, 0x07	; 7
      ec:	81 81       	ldd	r24, Z+1	; 0x01
      ee:	80 95       	com	r24
      f0:	89 23       	and	r24, r25
      f2:	87 b9       	out	0x07, r24	; 7
        Multiple_init+=3;
      f4:	80 91 25 01 	lds	r24, 0x0125
      f8:	8d 5f       	subi	r24, 0xFD	; 253
      fa:	80 93 25 01 	sts	0x0125, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
      fe:	80 e0       	ldi	r24, 0x00	; 0
        Multiple_init+=2;
        break;
      case GPIOC:
        PORTC_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=3;
        break;
     100:	08 95       	ret
      case GPIOD:
        PORTD_DIR &=(~(DIO_info->pins)) ;
     102:	9a b1       	in	r25, 0x0a	; 10
     104:	81 81       	ldd	r24, Z+1	; 0x01
     106:	80 95       	com	r24
     108:	89 23       	and	r24, r25
     10a:	8a b9       	out	0x0a, r24	; 10
        Multiple_init+=4;
     10c:	80 91 25 01 	lds	r24, 0x0125
     110:	8c 5f       	subi	r24, 0xFC	; 252
     112:	80 93 25 01 	sts	0x0125, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     116:	80 e0       	ldi	r24, 0x00	; 0
        Multiple_init+=3;
        break;
      case GPIOD:
        PORTD_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=4;
        break;
     118:	08 95       	ret
        break;
      }
      break;

      case OUTPUT:
        switch(DIO_info ->GPIO)
     11a:	80 81       	ld	r24, Z
     11c:	82 30       	cpi	r24, 0x02	; 2
     11e:	79 f0       	breq	.+30     	; 0x13e <DIO_init+0x98>
     120:	83 30       	cpi	r24, 0x03	; 3
     122:	c1 f0       	breq	.+48     	; 0x154 <DIO_init+0xae>
     124:	81 30       	cpi	r24, 0x01	; 1
     126:	39 f5       	brne	.+78     	; 0x176 <DIO_init+0xd0>
        {
        case GPIOB:
          PORTB_DIR |=(DIO_info->pins)  ;
     128:	94 b1       	in	r25, 0x04	; 4
     12a:	81 81       	ldd	r24, Z+1	; 0x01
     12c:	89 2b       	or	r24, r25
     12e:	84 b9       	out	0x04, r24	; 4
          Multiple_init+=2;
     130:	80 91 25 01 	lds	r24, 0x0125
     134:	8e 5f       	subi	r24, 0xFE	; 254
     136:	80 93 25 01 	sts	0x0125, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     13a:	80 e0       	ldi	r24, 0x00	; 0
        switch(DIO_info ->GPIO)
        {
        case GPIOB:
          PORTB_DIR |=(DIO_info->pins)  ;
          Multiple_init+=2;
          break;
     13c:	08 95       	ret
        case GPIOC:
          PORTC_DIR |=(DIO_info->pins)  ;
     13e:	97 b1       	in	r25, 0x07	; 7
     140:	81 81       	ldd	r24, Z+1	; 0x01
     142:	89 2b       	or	r24, r25
     144:	87 b9       	out	0x07, r24	; 7
          Multiple_init+=3;
     146:	80 91 25 01 	lds	r24, 0x0125
     14a:	8d 5f       	subi	r24, 0xFD	; 253
     14c:	80 93 25 01 	sts	0x0125, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     150:	80 e0       	ldi	r24, 0x00	; 0
          Multiple_init+=2;
          break;
        case GPIOC:
          PORTC_DIR |=(DIO_info->pins)  ;
          Multiple_init+=3;
          break;
     152:	08 95       	ret
        case GPIOD:
          PORTD_DIR |=(DIO_info->pins)  ;
     154:	9a b1       	in	r25, 0x0a	; 10
     156:	81 81       	ldd	r24, Z+1	; 0x01
     158:	89 2b       	or	r24, r25
     15a:	8a b9       	out	0x0a, r24	; 10
          Multiple_init+=4;
     15c:	80 91 25 01 	lds	r24, 0x0125
     160:	8c 5f       	subi	r24, 0xFC	; 252
     162:	80 93 25 01 	sts	0x0125, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     166:	80 e0       	ldi	r24, 0x00	; 0
          Multiple_init+=3;
          break;
        case GPIOD:
          PORTD_DIR |=(DIO_info->pins)  ;
          Multiple_init+=4;
          break;
     168:	08 95       	ret
{
  uint8_t RET=0;
  static uint8_t Multiple_init=0;
  if (DIO_info == NULL)
  {
    RET=NULL_PTR+DIO_MODULE;
     16a:	86 e1       	ldi	r24, 0x16	; 22
     16c:	08 95       	ret
          break;
        }

        break;
        default:
          RET=E_NOK+DIO_MODULE+INVALID_DIRECTION;
     16e:	83 e2       	ldi	r24, 0x23	; 35
     170:	08 95       	ret
      case GPIOD:
        PORTD_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=4;
        break;
      default:
        RET=E_NOK+DIO_MODULE+INVALID_PORT;
     172:	85 e2       	ldi	r24, 0x25	; 37
     174:	08 95       	ret
        case GPIOD:
          PORTD_DIR |=(DIO_info->pins)  ;
          Multiple_init+=4;
          break;
        default:
          RET=E_NOK+DIO_MODULE+INVALID_PORT;
     176:	85 e2       	ldi	r24, 0x25	; 37
    }


  }
  return RET;
}
     178:	08 95       	ret

0000017a <DIO_deinit>:

void DIO_deinit(void){
  u8_is_init=0;
     17a:	10 92 24 01 	sts	0x0124, r1
}
     17e:	08 95       	ret

00000180 <DIO_is_init>:

void DIO_is_init(void){
  u8_is_init=1;
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	80 93 24 01 	sts	0x0124, r24
}
     186:	08 95       	ret

00000188 <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;

if(u8_is_init==1){
     188:	90 91 24 01 	lds	r25, 0x0124
     18c:	91 30       	cpi	r25, 0x01	; 1
     18e:	91 f5       	brne	.+100    	; 0x1f4 <DIO_Write+0x6c>
switch(value){
     190:	44 23       	and	r20, r20
     192:	19 f0       	breq	.+6      	; 0x19a <DIO_Write+0x12>
     194:	4f 3f       	cpi	r20, 0xFF	; 255
     196:	81 f5       	brne	.+96     	; 0x1f8 <DIO_Write+0x70>
     198:	18 c0       	rjmp	.+48     	; 0x1ca <DIO_Write+0x42>
case LOW:
{
  switch (GPIO)
     19a:	82 30       	cpi	r24, 0x02	; 2
     19c:	51 f0       	breq	.+20     	; 0x1b2 <DIO_Write+0x2a>
     19e:	83 30       	cpi	r24, 0x03	; 3
     1a0:	71 f0       	breq	.+28     	; 0x1be <DIO_Write+0x36>
     1a2:	81 30       	cpi	r24, 0x01	; 1
     1a4:	59 f5       	brne	.+86     	; 0x1fc <DIO_Write+0x74>
  {
  case GPIOB:
    PORTB_DATA &= ~(pins);
     1a6:	85 b1       	in	r24, 0x05	; 5
     1a8:	60 95       	com	r22
     1aa:	68 23       	and	r22, r24
     1ac:	65 b9       	out	0x05, r22	; 5
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1ae:	84 e1       	ldi	r24, 0x14	; 20
{
  switch (GPIO)
  {
  case GPIOB:
    PORTB_DATA &= ~(pins);
    break;
     1b0:	08 95       	ret
  case GPIOC:
    PORTC_DATA &= ~(pins);
     1b2:	88 b1       	in	r24, 0x08	; 8
     1b4:	60 95       	com	r22
     1b6:	68 23       	and	r22, r24
     1b8:	68 b9       	out	0x08, r22	; 8
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1ba:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    PORTB_DATA &= ~(pins);
    break;
  case GPIOC:
    PORTC_DATA &= ~(pins);
    break;
     1bc:	08 95       	ret
  case GPIOD:
    PORTD_DATA &= ~(pins);
     1be:	8b b1       	in	r24, 0x0b	; 11
     1c0:	60 95       	com	r22
     1c2:	68 23       	and	r22, r24
     1c4:	6b b9       	out	0x0b, r22	; 11
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1c6:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    PORTC_DATA &= ~(pins);
    break;
  case GPIOD:
    PORTD_DATA &= ~(pins);
    break;
     1c8:	08 95       	ret
    break;
  }
  break;
}
case HIGH:{
  switch (GPIO)
     1ca:	82 30       	cpi	r24, 0x02	; 2
     1cc:	49 f0       	breq	.+18     	; 0x1e0 <DIO_Write+0x58>
     1ce:	83 30       	cpi	r24, 0x03	; 3
     1d0:	61 f0       	breq	.+24     	; 0x1ea <DIO_Write+0x62>
     1d2:	81 30       	cpi	r24, 0x01	; 1
     1d4:	a9 f4       	brne	.+42     	; 0x200 <DIO_Write+0x78>
  { 
  case GPIOB:
    PORTB_DATA |=(pins);
     1d6:	85 b1       	in	r24, 0x05	; 5
     1d8:	68 2b       	or	r22, r24
     1da:	65 b9       	out	0x05, r22	; 5
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1dc:	84 e1       	ldi	r24, 0x14	; 20
case HIGH:{
  switch (GPIO)
  { 
  case GPIOB:
    PORTB_DATA |=(pins);
    break;
     1de:	08 95       	ret
  case GPIOC:
    PORTC_DATA |=(pins);
     1e0:	88 b1       	in	r24, 0x08	; 8
     1e2:	68 2b       	or	r22, r24
     1e4:	68 b9       	out	0x08, r22	; 8
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1e6:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    PORTB_DATA |=(pins);
    break;
  case GPIOC:
    PORTC_DATA |=(pins);
    break;
     1e8:	08 95       	ret
  case GPIOD:
    PORTD_DATA |=(pins);
     1ea:	8b b1       	in	r24, 0x0b	; 11
     1ec:	68 2b       	or	r22, r24
     1ee:	6b b9       	out	0x0b, r22	; 11
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1f0:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    PORTC_DATA |=(pins);
    break;
  case GPIOD:
    PORTD_DATA |=(pins);
    break;
     1f2:	08 95       	ret
default:
  Ret+=INVALID_VALUE;
  break;
}

}else{Ret+=NOT_INIT;}
     1f4:	88 e1       	ldi	r24, 0x18	; 24
     1f6:	08 95       	ret
    break;
  }
  break;
}
default:
  Ret+=INVALID_VALUE;
     1f8:	86 e2       	ldi	r24, 0x26	; 38
     1fa:	08 95       	ret
    break;
  case GPIOD:
    PORTD_DATA &= ~(pins);
    break;
  default:
    Ret+=INVALID_PORT;
     1fc:	84 e2       	ldi	r24, 0x24	; 36
     1fe:	08 95       	ret
    break;
  case GPIOD:
    PORTD_DATA |=(pins);
    break;
  default:
    Ret+=INVALID_PORT;
     200:	84 e2       	ldi	r24, 0x24	; 36
  break;
}

}else{Ret+=NOT_INIT;}
return Ret;
}
     202:	08 95       	ret

00000204 <DIO_Read>:


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
if(u8_is_init==1){
     204:	90 91 24 01 	lds	r25, 0x0124
     208:	91 30       	cpi	r25, 0x01	; 1
     20a:	01 f5       	brne	.+64     	; 0x24c <DIO_Read+0x48>
  switch (GPIO)
     20c:	82 30       	cpi	r24, 0x02	; 2
     20e:	51 f0       	breq	.+20     	; 0x224 <DIO_Read+0x20>
     210:	83 30       	cpi	r24, 0x03	; 3
     212:	71 f0       	breq	.+28     	; 0x230 <DIO_Read+0x2c>
     214:	81 30       	cpi	r24, 0x01	; 1
     216:	91 f4       	brne	.+36     	; 0x23c <DIO_Read+0x38>
  { 
  case GPIOB:
    *data=(PORTB_PIN & pins);
     218:	83 b1       	in	r24, 0x03	; 3
     21a:	68 23       	and	r22, r24
     21c:	fa 01       	movw	r30, r20
     21e:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
     220:	84 e1       	ldi	r24, 0x14	; 20
if(u8_is_init==1){
  switch (GPIO)
  { 
  case GPIOB:
    *data=(PORTB_PIN & pins);
    break;
     222:	0d c0       	rjmp	.+26     	; 0x23e <DIO_Read+0x3a>
  case GPIOC:
    *data=(PORTC_PIN & pins);
     224:	86 b1       	in	r24, 0x06	; 6
     226:	68 23       	and	r22, r24
     228:	fa 01       	movw	r30, r20
     22a:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
     22c:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    *data=(PORTB_PIN & pins);
    break;
  case GPIOC:
    *data=(PORTC_PIN & pins);
    break;
     22e:	07 c0       	rjmp	.+14     	; 0x23e <DIO_Read+0x3a>
  case GPIOD:
    *data=(PORTD_PIN & pins);
     230:	89 b1       	in	r24, 0x09	; 9
     232:	68 23       	and	r22, r24
     234:	fa 01       	movw	r30, r20
     236:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
     238:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    *data=(PORTC_PIN & pins);
    break;
  case GPIOD:
    *data=(PORTD_PIN & pins);
    break;
     23a:	01 c0       	rjmp	.+2      	; 0x23e <DIO_Read+0x3a>
    default:
    ret+=INVALID_PORT;
     23c:	84 e2       	ldi	r24, 0x24	; 36
    break;
  }
  if(*data > 0)
     23e:	fa 01       	movw	r30, r20
     240:	90 81       	ld	r25, Z
     242:	99 23       	and	r25, r25
     244:	21 f0       	breq	.+8      	; 0x24e <DIO_Read+0x4a>
  {
    *data = 1;
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	90 83       	st	Z, r25
     24a:	08 95       	ret
  }
}else{ret+=NOT_INIT;}
     24c:	88 e1       	ldi	r24, 0x18	; 24
return ret;
}
     24e:	08 95       	ret

00000250 <DIO_Toggle>:
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
if(u8_is_init==1){
     250:	90 91 24 01 	lds	r25, 0x0124
     254:	91 30       	cpi	r25, 0x01	; 1
     256:	a9 f4       	brne	.+42     	; 0x282 <DIO_Toggle+0x32>
  switch (GPIO)
     258:	82 30       	cpi	r24, 0x02	; 2
     25a:	49 f0       	breq	.+18     	; 0x26e <DIO_Toggle+0x1e>
     25c:	83 30       	cpi	r24, 0x03	; 3
     25e:	61 f0       	breq	.+24     	; 0x278 <DIO_Toggle+0x28>
     260:	81 30       	cpi	r24, 0x01	; 1
     262:	89 f4       	brne	.+34     	; 0x286 <DIO_Toggle+0x36>
  {
  case GPIOB:
    PORTB_DATA ^=(pins);
     264:	85 b1       	in	r24, 0x05	; 5
     266:	68 27       	eor	r22, r24
     268:	65 b9       	out	0x05, r22	; 5
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
     26a:	84 e1       	ldi	r24, 0x14	; 20
if(u8_is_init==1){
  switch (GPIO)
  {
  case GPIOB:
    PORTB_DATA ^=(pins);
    break;
     26c:	08 95       	ret
  case GPIOC:
    PORTC_DATA ^=(pins);
     26e:	88 b1       	in	r24, 0x08	; 8
     270:	68 27       	eor	r22, r24
     272:	68 b9       	out	0x08, r22	; 8
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
     274:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    PORTB_DATA ^=(pins);
    break;
  case GPIOC:
    PORTC_DATA ^=(pins);
    break;
     276:	08 95       	ret
  case GPIOD:
    PORTD_DATA ^=(pins);
     278:	8b b1       	in	r24, 0x0b	; 11
     27a:	68 27       	eor	r22, r24
     27c:	6b b9       	out	0x0b, r22	; 11
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
     27e:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    PORTC_DATA ^=(pins);
    break;
  case GPIOD:
    PORTD_DATA ^=(pins);
    break;
     280:	08 95       	ret
  default:
    ret+=INVALID_PORT;
    break;
  }
}else{ret+=NOT_INIT;}
     282:	88 e1       	ldi	r24, 0x18	; 24
     284:	08 95       	ret
    break;
  case GPIOD:
    PORTD_DATA ^=(pins);
    break;
  default:
    ret+=INVALID_PORT;
     286:	84 e2       	ldi	r24, 0x24	; 36
    break;
  }
}else{ret+=NOT_INIT;}
  return ret;
}
     288:	08 95       	ret

0000028a <system_init>:

static uint32_t ticks=0;
void system_init(void)
{

Us_Init();
     28a:	0e 94 ae 0b 	call	0x175c	; 0x175c <Us_Init>
motor_init();
     28e:	0e 94 95 06 	call	0xd2a	; 0xd2a <motor_init>
speaker_init();
     292:	0e 94 64 08 	call	0x10c8	; 0x10c8 <speaker_init>


}
     296:	08 95       	ret

00000298 <system_update>:

void system_update(void)
{
static uint16_t Distance = 0;
static uint8_t state_machine=0;
Us_Trigger();
     298:	0e 94 cb 0b 	call	0x1796	; 0x1796 <Us_Trigger>
Us_GetDistance(&Distance);
     29c:	86 e2       	ldi	r24, 0x26	; 38
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <Us_GetDistance>


ticks=Distance;
     2a4:	80 91 26 01 	lds	r24, 0x0126
     2a8:	90 91 27 01 	lds	r25, 0x0127
     2ac:	ac 01       	movw	r20, r24
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	70 e0       	ldi	r23, 0x00	; 0
     2b2:	40 93 28 01 	sts	0x0128, r20
     2b6:	50 93 29 01 	sts	0x0129, r21
     2ba:	60 93 2a 01 	sts	0x012A, r22
     2be:	70 93 2b 01 	sts	0x012B, r23
if (Distance>200)
     2c2:	89 3c       	cpi	r24, 0xC9	; 201
     2c4:	91 05       	cpc	r25, r1
     2c6:	10 f0       	brcs	.+4      	; 0x2cc <system_update+0x34>
{
	state_machine=0;
     2c8:	10 92 2c 01 	sts	0x012C, r1
}
if (Distance <= 200 && Distance > 150)
     2cc:	9c 01       	movw	r18, r24
     2ce:	27 59       	subi	r18, 0x97	; 151
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	22 33       	cpi	r18, 0x32	; 50
     2d4:	31 05       	cpc	r19, r1
     2d6:	18 f4       	brcc	.+6      	; 0x2de <system_update+0x46>
{
	state_machine = 1;
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	20 93 2c 01 	sts	0x012C, r18
}
if (Distance <= 150 && Distance > 100)
     2de:	9c 01       	movw	r18, r24
     2e0:	25 56       	subi	r18, 0x65	; 101
     2e2:	30 40       	sbci	r19, 0x00	; 0
     2e4:	22 33       	cpi	r18, 0x32	; 50
     2e6:	31 05       	cpc	r19, r1
     2e8:	18 f4       	brcc	.+6      	; 0x2f0 <system_update+0x58>
{
	state_machine = 2;
     2ea:	22 e0       	ldi	r18, 0x02	; 2
     2ec:	20 93 2c 01 	sts	0x012C, r18
}
if (Distance <= 100 && Distance > 50)
     2f0:	9c 01       	movw	r18, r24
     2f2:	23 53       	subi	r18, 0x33	; 51
     2f4:	30 40       	sbci	r19, 0x00	; 0
     2f6:	22 33       	cpi	r18, 0x32	; 50
     2f8:	31 05       	cpc	r19, r1
     2fa:	18 f4       	brcc	.+6      	; 0x302 <system_update+0x6a>
{
	state_machine = 3;
     2fc:	23 e0       	ldi	r18, 0x03	; 3
     2fe:	20 93 2c 01 	sts	0x012C, r18
}
if (Distance <= 50 && Distance > 30)
     302:	9c 01       	movw	r18, r24
     304:	2f 51       	subi	r18, 0x1F	; 31
     306:	30 40       	sbci	r19, 0x00	; 0
     308:	24 31       	cpi	r18, 0x14	; 20
     30a:	31 05       	cpc	r19, r1
     30c:	18 f4       	brcc	.+6      	; 0x314 <system_update+0x7c>
{
	state_machine = 4;
     30e:	24 e0       	ldi	r18, 0x04	; 4
     310:	20 93 2c 01 	sts	0x012C, r18
}
if (Distance <= 30 && Distance > 20)
     314:	9c 01       	movw	r18, r24
     316:	25 51       	subi	r18, 0x15	; 21
     318:	30 40       	sbci	r19, 0x00	; 0
     31a:	2a 30       	cpi	r18, 0x0A	; 10
     31c:	31 05       	cpc	r19, r1
     31e:	18 f4       	brcc	.+6      	; 0x326 <system_update+0x8e>
{
	state_machine = 5;
     320:	25 e0       	ldi	r18, 0x05	; 5
     322:	20 93 2c 01 	sts	0x012C, r18
}
if (Distance <= 20 && Distance > 0)
     326:	01 97       	sbiw	r24, 0x01	; 1
     328:	84 31       	cpi	r24, 0x14	; 20
     32a:	91 05       	cpc	r25, r1
     32c:	18 f4       	brcc	.+6      	; 0x334 <system_update+0x9c>
{
	state_machine = 6;
     32e:	86 e0       	ldi	r24, 0x06	; 6
     330:	80 93 2c 01 	sts	0x012C, r24
}

motor_start_sm(state_machine);
     334:	80 91 2c 01 	lds	r24, 0x012C
     338:	0e 94 a3 06 	call	0xd46	; 0xd46 <motor_start_sm>
speaker_start_sm(state_machine);
     33c:	80 91 2c 01 	lds	r24, 0x012C
     340:	0e 94 69 08 	call	0x10d2	; 0x10d2 <speaker_start_sm>

}
     344:	08 95       	ret

00000346 <Icu_Init>:
static volatile uint32_t u32_Time_rising_edge=0;
static volatile uint32_t u32_Time_faling_edge=0;
static volatile uint32_t Timer_High=0;
static volatile uint32_t Timer_Low=0;
ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	ec 01       	movw	r28, r24
  uint8_t Ret=0;
//Enable Global int
G_interrupt_Enable();
     34c:	0e 94 a2 02 	call	0x544	; 0x544 <G_interrupt_Enable>
//Enable EXTI
switch(Icu_Cfg->ICU_Ch_No)
     350:	88 81       	ld	r24, Y
     352:	88 23       	and	r24, r24
     354:	19 f0       	breq	.+6      	; 0x35c <Icu_Init+0x16>
     356:	81 30       	cpi	r24, 0x01	; 1
     358:	91 f4       	brne	.+36     	; 0x37e <Icu_Init+0x38>
     35a:	09 c0       	rjmp	.+18     	; 0x36e <Icu_Init+0x28>
{
case ICU_CH0:
EX_interrupt0_enable0();
     35c:	0e 94 b2 02 	call	0x564	; 0x564 <EX_interrupt0_enable0>
INT0_external_interrupt = (Icu_Cfg->external_int);
     360:	8a 81       	ldd	r24, Y+2	; 0x02
     362:	9b 81       	ldd	r25, Y+3	; 0x03
     364:	90 93 17 01 	sts	0x0117, r25
     368:	80 93 16 01 	sts	0x0116, r24

break;
     36c:	08 c0       	rjmp	.+16     	; 0x37e <Icu_Init+0x38>
case ICU_CH1:
EX_interrupt1_enable1();
     36e:	0e 94 a6 02 	call	0x54c	; 0x54c <EX_interrupt1_enable1>
INT1_external_interrupt = (Icu_Cfg->external_int);
     372:	8a 81       	ldd	r24, Y+2	; 0x02
     374:	9b 81       	ldd	r25, Y+3	; 0x03
     376:	90 93 7a 01 	sts	0x017A, r25
     37a:	80 93 79 01 	sts	0x0179, r24

break;
}

switch(Icu_Cfg->ICU_Ch_Timer)
     37e:	89 81       	ldd	r24, Y+1	; 0x01
     380:	81 30       	cpi	r24, 0x01	; 1
     382:	61 f4       	brne	.+24     	; 0x39c <Icu_Init+0x56>
    TCCR0=0x05;
    TIMSK0=0x01;
    break;
    */
   case ICU_TIMER_CH1:
   TCCR1B=0x05;
     384:	85 e0       	ldi	r24, 0x05	; 5
     386:	80 93 81 00 	sts	0x0081, r24
	TIMSK1=0x01;
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	80 93 6f 00 	sts	0x006F, r24
	TIMER1OVF=(Icu_Cfg->timer_int);
     390:	8c 81       	ldd	r24, Y+4	; 0x04
     392:	9d 81       	ldd	r25, Y+5	; 0x05
     394:	90 93 13 01 	sts	0x0113, r25
     398:	80 93 12 01 	sts	0x0112, r24
 */
}


return Ret;
}
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	08 95       	ret

000003a4 <Icu_ReadTime>:
 *          - E_NOK : not successful                   *
 * Description  : calculates the time between 2 edges              *
 ***************************************************************************/

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time)
{
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
uint8_t Ret=0;
switch(Icu_Channel)
     3a8:	81 30       	cpi	r24, 0x01	; 1
     3aa:	29 f4       	brne	.+10     	; 0x3b6 <Icu_ReadTime+0x12>
 /* case ICU_TIMER_CH0:
  TCCR0|=0x03;
  Ret=E_OK;
  break;
 */ case ICU_TIMER_CH1:
  TCCR1B|=0x05;
     3ac:	e1 e8       	ldi	r30, 0x81	; 129
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	80 81       	ld	r24, Z
     3b2:	85 60       	ori	r24, 0x05	; 5
     3b4:	80 83       	st	Z, r24
  default:
  Ret=E_NOK;
  break;
}

switch(Icu_EdgeToEdge)
     3b6:	61 30       	cpi	r22, 0x01	; 1
     3b8:	01 f1       	breq	.+64     	; 0x3fa <Icu_ReadTime+0x56>
     3ba:	61 30       	cpi	r22, 0x01	; 1
     3bc:	18 f0       	brcs	.+6      	; 0x3c4 <Icu_ReadTime+0x20>
     3be:	62 30       	cpi	r22, 0x02	; 2
     3c0:	d1 f5       	brne	.+116    	; 0x436 <Icu_ReadTime+0x92>
     3c2:	2a c0       	rjmp	.+84     	; 0x418 <Icu_ReadTime+0x74>
{
  case ICU_RISE_TO_RISE:
  *Icu_Time=Timer_High+Timer_Low;
     3c4:	80 91 31 01 	lds	r24, 0x0131
     3c8:	90 91 32 01 	lds	r25, 0x0132
     3cc:	a0 91 33 01 	lds	r26, 0x0133
     3d0:	b0 91 34 01 	lds	r27, 0x0134
     3d4:	00 91 2d 01 	lds	r16, 0x012D
     3d8:	10 91 2e 01 	lds	r17, 0x012E
     3dc:	20 91 2f 01 	lds	r18, 0x012F
     3e0:	30 91 30 01 	lds	r19, 0x0130
     3e4:	80 0f       	add	r24, r16
     3e6:	91 1f       	adc	r25, r17
     3e8:	a2 1f       	adc	r26, r18
     3ea:	b3 1f       	adc	r27, r19
     3ec:	fa 01       	movw	r30, r20
     3ee:	80 83       	st	Z, r24
     3f0:	91 83       	std	Z+1, r25	; 0x01
     3f2:	a2 83       	std	Z+2, r26	; 0x02
     3f4:	b3 83       	std	Z+3, r27	; 0x03
  Ret=E_OK;
     3f6:	80 e0       	ldi	r24, 0x00	; 0
  break;
     3f8:	1f c0       	rjmp	.+62     	; 0x438 <Icu_ReadTime+0x94>
  case ICU_RISE_TO_FALL:
  *Icu_Time=Timer_High;
     3fa:	80 91 31 01 	lds	r24, 0x0131
     3fe:	90 91 32 01 	lds	r25, 0x0132
     402:	a0 91 33 01 	lds	r26, 0x0133
     406:	b0 91 34 01 	lds	r27, 0x0134
     40a:	fa 01       	movw	r30, r20
     40c:	80 83       	st	Z, r24
     40e:	91 83       	std	Z+1, r25	; 0x01
     410:	a2 83       	std	Z+2, r26	; 0x02
     412:	b3 83       	std	Z+3, r27	; 0x03
  Ret=E_OK;
     414:	80 e0       	ldi	r24, 0x00	; 0
  break;
     416:	10 c0       	rjmp	.+32     	; 0x438 <Icu_ReadTime+0x94>
  case ICU_FALE_TO_RISE:
  *Icu_Time=Timer_Low;
     418:	80 91 2d 01 	lds	r24, 0x012D
     41c:	90 91 2e 01 	lds	r25, 0x012E
     420:	a0 91 2f 01 	lds	r26, 0x012F
     424:	b0 91 30 01 	lds	r27, 0x0130
     428:	fa 01       	movw	r30, r20
     42a:	80 83       	st	Z, r24
     42c:	91 83       	std	Z+1, r25	; 0x01
     42e:	a2 83       	std	Z+2, r26	; 0x02
     430:	b3 83       	std	Z+3, r27	; 0x03
  Ret=E_OK;
     432:	80 e0       	ldi	r24, 0x00	; 0
  break;
     434:	01 c0       	rjmp	.+2      	; 0x438 <Icu_ReadTime+0x94>

  default:
  Ret=E_NOK;
     436:	81 e0       	ldi	r24, 0x01	; 1
  break;
}

return Ret;
}
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	08 95       	ret

0000043e <EXTI0>:

void EXTI0(void)
{
  //u32_sgv_TimerVal=(uint32_t)TCNT1;
  u32_sgv_TimerVal=TCNT1;
     43e:	80 91 84 00 	lds	r24, 0x0084
     442:	90 91 85 00 	lds	r25, 0x0085
     446:	a0 e0       	ldi	r26, 0x00	; 0
     448:	b0 e0       	ldi	r27, 0x00	; 0
     44a:	80 93 3e 01 	sts	0x013E, r24
     44e:	90 93 3f 01 	sts	0x013F, r25
     452:	a0 93 40 01 	sts	0x0140, r26
     456:	b0 93 41 01 	sts	0x0141, r27
  u8_ovf_happend=0;
     45a:	10 92 3d 01 	sts	0x013D, r1
//  if(READBIT(EXTERNAL_INTERRUPT_CONTROL,6))
    if(READBIT(EXTERNAL_INTERRUPT_CONTROL,ISC00) && READBIT(EXTERNAL_INTERRUPT_CONTROL,ISC01))
     45e:	80 91 69 00 	lds	r24, 0x0069
     462:	80 ff       	sbrs	r24, 0
     464:	37 c0       	rjmp	.+110    	; 0x4d4 <EXTI0+0x96>
     466:	80 91 69 00 	lds	r24, 0x0069
     46a:	86 95       	lsr	r24
     46c:	80 ff       	sbrs	r24, 0
     46e:	32 c0       	rjmp	.+100    	; 0x4d4 <EXTI0+0x96>
    {
		
    u32_Time_rising_edge=u32_sgv_TimerVal;
     470:	80 91 3e 01 	lds	r24, 0x013E
     474:	90 91 3f 01 	lds	r25, 0x013F
     478:	a0 91 40 01 	lds	r26, 0x0140
     47c:	b0 91 41 01 	lds	r27, 0x0141
     480:	80 93 39 01 	sts	0x0139, r24
     484:	90 93 3a 01 	sts	0x013A, r25
     488:	a0 93 3b 01 	sts	0x013B, r26
     48c:	b0 93 3c 01 	sts	0x013C, r27
    Timer_Low = u32_Time_rising_edge - u32_Time_faling_edge;
     490:	80 91 39 01 	lds	r24, 0x0139
     494:	90 91 3a 01 	lds	r25, 0x013A
     498:	a0 91 3b 01 	lds	r26, 0x013B
     49c:	b0 91 3c 01 	lds	r27, 0x013C
     4a0:	40 91 35 01 	lds	r20, 0x0135
     4a4:	50 91 36 01 	lds	r21, 0x0136
     4a8:	60 91 37 01 	lds	r22, 0x0137
     4ac:	70 91 38 01 	lds	r23, 0x0138
     4b0:	84 1b       	sub	r24, r20
     4b2:	95 0b       	sbc	r25, r21
     4b4:	a6 0b       	sbc	r26, r22
     4b6:	b7 0b       	sbc	r27, r23
     4b8:	80 93 2d 01 	sts	0x012D, r24
     4bc:	90 93 2e 01 	sts	0x012E, r25
     4c0:	a0 93 2f 01 	sts	0x012F, r26
     4c4:	b0 93 30 01 	sts	0x0130, r27
    /*****************************************/
    CLEAR_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC00);  /*Make it falling*/
     4c8:	e9 e6       	ldi	r30, 0x69	; 105
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 81       	ld	r24, Z
     4ce:	8e 7f       	andi	r24, 0xFE	; 254
     4d0:	80 83       	st	Z, r24
     4d2:	08 95       	ret
    /***************************************/
   }else{
      u32_Time_faling_edge=u32_sgv_TimerVal;
     4d4:	80 91 3e 01 	lds	r24, 0x013E
     4d8:	90 91 3f 01 	lds	r25, 0x013F
     4dc:	a0 91 40 01 	lds	r26, 0x0140
     4e0:	b0 91 41 01 	lds	r27, 0x0141
     4e4:	80 93 35 01 	sts	0x0135, r24
     4e8:	90 93 36 01 	sts	0x0136, r25
     4ec:	a0 93 37 01 	sts	0x0137, r26
     4f0:	b0 93 38 01 	sts	0x0138, r27
      Timer_High =u32_Time_faling_edge - u32_Time_rising_edge;
     4f4:	80 91 35 01 	lds	r24, 0x0135
     4f8:	90 91 36 01 	lds	r25, 0x0136
     4fc:	a0 91 37 01 	lds	r26, 0x0137
     500:	b0 91 38 01 	lds	r27, 0x0138
     504:	40 91 39 01 	lds	r20, 0x0139
     508:	50 91 3a 01 	lds	r21, 0x013A
     50c:	60 91 3b 01 	lds	r22, 0x013B
     510:	70 91 3c 01 	lds	r23, 0x013C
     514:	84 1b       	sub	r24, r20
     516:	95 0b       	sbc	r25, r21
     518:	a6 0b       	sbc	r26, r22
     51a:	b7 0b       	sbc	r27, r23
     51c:	80 93 31 01 	sts	0x0131, r24
     520:	90 93 32 01 	sts	0x0132, r25
     524:	a0 93 33 01 	sts	0x0133, r26
     528:	b0 93 34 01 	sts	0x0134, r27
   /*********************************/
      SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC00);    /*Make it Rising*/
     52c:	e9 e6       	ldi	r30, 0x69	; 105
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	80 81       	ld	r24, Z
     532:	81 60       	ori	r24, 0x01	; 1
     534:	80 83       	st	Z, r24
     536:	08 95       	ret

00000538 <timer_interrupt1>:
 }

}
void timer_interrupt1(void)
{
  u8_ovf_happend=1;
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	80 93 3d 01 	sts	0x013D, r24
Us_Trigger();
     53e:	0e 94 cb 0b 	call	0x1796	; 0x1796 <Us_Trigger>
}
     542:	08 95       	ret

00000544 <G_interrupt_Enable>:
ptr_to_Fun ANA_COMP;
ptr_to_Fun TWI_I2C;
ptr_to_Fun SPM_RDY;
void G_interrupt_Enable(void)
{
 SREG |=(0x80);
     544:	8f b7       	in	r24, 0x3f	; 63
     546:	80 68       	ori	r24, 0x80	; 128
     548:	8f bf       	out	0x3f, r24	; 63
}
     54a:	08 95       	ret

0000054c <EX_interrupt1_enable1>:

void EX_interrupt1_enable1(void)
{
CLEAR_BIT(PORTD_DIR,3);/*Input*/
     54c:	53 98       	cbi	0x0a, 3	; 10
SET_BIT(PORTD_DATA,3);/*Pullup*/
     54e:	5b 9a       	sbi	0x0b, 3	; 11
SET_BIT(EXTERNAL_INTERRUPT_MASK_REG,INT1);/*EXT1*/
     550:	e9 9a       	sbi	0x1d, 1	; 29
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC10);/*Rising*/
     552:	e9 e6       	ldi	r30, 0x69	; 105
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	80 81       	ld	r24, Z
     558:	84 60       	ori	r24, 0x04	; 4
     55a:	80 83       	st	Z, r24
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC11);/*Rising*/
     55c:	80 81       	ld	r24, Z
     55e:	88 60       	ori	r24, 0x08	; 8
     560:	80 83       	st	Z, r24
}
     562:	08 95       	ret

00000564 <EX_interrupt0_enable0>:
void EX_interrupt0_enable0(void)
{
CLEAR_BIT(PORTD_DIR,2);/*Input*/
     564:	52 98       	cbi	0x0a, 2	; 10
//SET_BIT(PORTD_DATA,2);/*Pullup*/
SET_BIT(EXTERNAL_INTERRUPT_MASK_REG,INT0);/*EXT0*/
     566:	e8 9a       	sbi	0x1d, 0	; 29
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC00);/*Rising*/
     568:	e9 e6       	ldi	r30, 0x69	; 105
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	80 81       	ld	r24, Z
     56e:	81 60       	ori	r24, 0x01	; 1
     570:	80 83       	st	Z, r24
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC01);/*Rising*/
     572:	80 81       	ld	r24, Z
     574:	82 60       	ori	r24, 0x02	; 2
     576:	80 83       	st	Z, r24
}
     578:	08 95       	ret

0000057a <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
     57a:	8f b7       	in	r24, 0x3f	; 63
     57c:	8f 77       	andi	r24, 0x7F	; 127
     57e:	8f bf       	out	0x3f, r24	; 63
}
     580:	08 95       	ret

00000582 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     582:	1f 92       	push	r1
     584:	0f 92       	push	r0
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	0f 92       	push	r0
     58a:	11 24       	eor	r1, r1
     58c:	2f 93       	push	r18
     58e:	3f 93       	push	r19
     590:	4f 93       	push	r20
     592:	5f 93       	push	r21
     594:	6f 93       	push	r22
     596:	7f 93       	push	r23
     598:	8f 93       	push	r24
     59a:	9f 93       	push	r25
     59c:	af 93       	push	r26
     59e:	bf 93       	push	r27
     5a0:	ef 93       	push	r30
     5a2:	ff 93       	push	r31
  INT0_external_interrupt();
     5a4:	e0 91 16 01 	lds	r30, 0x0116
     5a8:	f0 91 17 01 	lds	r31, 0x0117
     5ac:	09 95       	icall
}
     5ae:	ff 91       	pop	r31
     5b0:	ef 91       	pop	r30
     5b2:	bf 91       	pop	r27
     5b4:	af 91       	pop	r26
     5b6:	9f 91       	pop	r25
     5b8:	8f 91       	pop	r24
     5ba:	7f 91       	pop	r23
     5bc:	6f 91       	pop	r22
     5be:	5f 91       	pop	r21
     5c0:	4f 91       	pop	r20
     5c2:	3f 91       	pop	r19
     5c4:	2f 91       	pop	r18
     5c6:	0f 90       	pop	r0
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	0f 90       	pop	r0
     5cc:	1f 90       	pop	r1
     5ce:	18 95       	reti

000005d0 <__vector_2>:


void __vector_2(void) __attribute__((signal));
void
 __vector_2(void)
{
     5d0:	1f 92       	push	r1
     5d2:	0f 92       	push	r0
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	0f 92       	push	r0
     5d8:	11 24       	eor	r1, r1
     5da:	2f 93       	push	r18
     5dc:	3f 93       	push	r19
     5de:	4f 93       	push	r20
     5e0:	5f 93       	push	r21
     5e2:	6f 93       	push	r22
     5e4:	7f 93       	push	r23
     5e6:	8f 93       	push	r24
     5e8:	9f 93       	push	r25
     5ea:	af 93       	push	r26
     5ec:	bf 93       	push	r27
     5ee:	ef 93       	push	r30
     5f0:	ff 93       	push	r31
  INT1_external_interrupt();
     5f2:	e0 91 79 01 	lds	r30, 0x0179
     5f6:	f0 91 7a 01 	lds	r31, 0x017A
     5fa:	09 95       	icall
}
     5fc:	ff 91       	pop	r31
     5fe:	ef 91       	pop	r30
     600:	bf 91       	pop	r27
     602:	af 91       	pop	r26
     604:	9f 91       	pop	r25
     606:	8f 91       	pop	r24
     608:	7f 91       	pop	r23
     60a:	6f 91       	pop	r22
     60c:	5f 91       	pop	r21
     60e:	4f 91       	pop	r20
     610:	3f 91       	pop	r19
     612:	2f 91       	pop	r18
     614:	0f 90       	pop	r0
     616:	0f be       	out	0x3f, r0	; 63
     618:	0f 90       	pop	r0
     61a:	1f 90       	pop	r1
     61c:	18 95       	reti

0000061e <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     61e:	1f 92       	push	r1
     620:	0f 92       	push	r0
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	0f 92       	push	r0
     626:	11 24       	eor	r1, r1
     628:	2f 93       	push	r18
     62a:	3f 93       	push	r19
     62c:	4f 93       	push	r20
     62e:	5f 93       	push	r21
     630:	6f 93       	push	r22
     632:	7f 93       	push	r23
     634:	8f 93       	push	r24
     636:	9f 93       	push	r25
     638:	af 93       	push	r26
     63a:	bf 93       	push	r27
     63c:	ef 93       	push	r30
     63e:	ff 93       	push	r31
  Pin_Change_Interrupt_Request_0();
     640:	e0 91 5f 01 	lds	r30, 0x015F
     644:	f0 91 60 01 	lds	r31, 0x0160
     648:	09 95       	icall
}
     64a:	ff 91       	pop	r31
     64c:	ef 91       	pop	r30
     64e:	bf 91       	pop	r27
     650:	af 91       	pop	r26
     652:	9f 91       	pop	r25
     654:	8f 91       	pop	r24
     656:	7f 91       	pop	r23
     658:	6f 91       	pop	r22
     65a:	5f 91       	pop	r21
     65c:	4f 91       	pop	r20
     65e:	3f 91       	pop	r19
     660:	2f 91       	pop	r18
     662:	0f 90       	pop	r0
     664:	0f be       	out	0x3f, r0	; 63
     666:	0f 90       	pop	r0
     668:	1f 90       	pop	r1
     66a:	18 95       	reti

0000066c <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     66c:	1f 92       	push	r1
     66e:	0f 92       	push	r0
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	0f 92       	push	r0
     674:	11 24       	eor	r1, r1
     676:	2f 93       	push	r18
     678:	3f 93       	push	r19
     67a:	4f 93       	push	r20
     67c:	5f 93       	push	r21
     67e:	6f 93       	push	r22
     680:	7f 93       	push	r23
     682:	8f 93       	push	r24
     684:	9f 93       	push	r25
     686:	af 93       	push	r26
     688:	bf 93       	push	r27
     68a:	ef 93       	push	r30
     68c:	ff 93       	push	r31
Pin_Change_Interrupt_Request_1();
     68e:	e0 91 73 01 	lds	r30, 0x0173
     692:	f0 91 74 01 	lds	r31, 0x0174
     696:	09 95       	icall
}
     698:	ff 91       	pop	r31
     69a:	ef 91       	pop	r30
     69c:	bf 91       	pop	r27
     69e:	af 91       	pop	r26
     6a0:	9f 91       	pop	r25
     6a2:	8f 91       	pop	r24
     6a4:	7f 91       	pop	r23
     6a6:	6f 91       	pop	r22
     6a8:	5f 91       	pop	r21
     6aa:	4f 91       	pop	r20
     6ac:	3f 91       	pop	r19
     6ae:	2f 91       	pop	r18
     6b0:	0f 90       	pop	r0
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	0f 90       	pop	r0
     6b6:	1f 90       	pop	r1
     6b8:	18 95       	reti

000006ba <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     6ba:	1f 92       	push	r1
     6bc:	0f 92       	push	r0
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	0f 92       	push	r0
     6c2:	11 24       	eor	r1, r1
     6c4:	2f 93       	push	r18
     6c6:	3f 93       	push	r19
     6c8:	4f 93       	push	r20
     6ca:	5f 93       	push	r21
     6cc:	6f 93       	push	r22
     6ce:	7f 93       	push	r23
     6d0:	8f 93       	push	r24
     6d2:	9f 93       	push	r25
     6d4:	af 93       	push	r26
     6d6:	bf 93       	push	r27
     6d8:	ef 93       	push	r30
     6da:	ff 93       	push	r31
  Pin_Change_Interrupt_Request_2();
     6dc:	e0 91 65 01 	lds	r30, 0x0165
     6e0:	f0 91 66 01 	lds	r31, 0x0166
     6e4:	09 95       	icall
}
     6e6:	ff 91       	pop	r31
     6e8:	ef 91       	pop	r30
     6ea:	bf 91       	pop	r27
     6ec:	af 91       	pop	r26
     6ee:	9f 91       	pop	r25
     6f0:	8f 91       	pop	r24
     6f2:	7f 91       	pop	r23
     6f4:	6f 91       	pop	r22
     6f6:	5f 91       	pop	r21
     6f8:	4f 91       	pop	r20
     6fa:	3f 91       	pop	r19
     6fc:	2f 91       	pop	r18
     6fe:	0f 90       	pop	r0
     700:	0f be       	out	0x3f, r0	; 63
     702:	0f 90       	pop	r0
     704:	1f 90       	pop	r1
     706:	18 95       	reti

00000708 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     708:	1f 92       	push	r1
     70a:	0f 92       	push	r0
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	0f 92       	push	r0
     710:	11 24       	eor	r1, r1
     712:	2f 93       	push	r18
     714:	3f 93       	push	r19
     716:	4f 93       	push	r20
     718:	5f 93       	push	r21
     71a:	6f 93       	push	r22
     71c:	7f 93       	push	r23
     71e:	8f 93       	push	r24
     720:	9f 93       	push	r25
     722:	af 93       	push	r26
     724:	bf 93       	push	r27
     726:	ef 93       	push	r30
     728:	ff 93       	push	r31
  watch_dog_interrupt();
     72a:	e0 91 57 01 	lds	r30, 0x0157
     72e:	f0 91 58 01 	lds	r31, 0x0158
     732:	09 95       	icall
}
     734:	ff 91       	pop	r31
     736:	ef 91       	pop	r30
     738:	bf 91       	pop	r27
     73a:	af 91       	pop	r26
     73c:	9f 91       	pop	r25
     73e:	8f 91       	pop	r24
     740:	7f 91       	pop	r23
     742:	6f 91       	pop	r22
     744:	5f 91       	pop	r21
     746:	4f 91       	pop	r20
     748:	3f 91       	pop	r19
     74a:	2f 91       	pop	r18
     74c:	0f 90       	pop	r0
     74e:	0f be       	out	0x3f, r0	; 63
     750:	0f 90       	pop	r0
     752:	1f 90       	pop	r1
     754:	18 95       	reti

00000756 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
     756:	1f 92       	push	r1
     758:	0f 92       	push	r0
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	0f 92       	push	r0
     75e:	11 24       	eor	r1, r1
     760:	2f 93       	push	r18
     762:	3f 93       	push	r19
     764:	4f 93       	push	r20
     766:	5f 93       	push	r21
     768:	6f 93       	push	r22
     76a:	7f 93       	push	r23
     76c:	8f 93       	push	r24
     76e:	9f 93       	push	r25
     770:	af 93       	push	r26
     772:	bf 93       	push	r27
     774:	ef 93       	push	r30
     776:	ff 93       	push	r31
TIMER2COMPA();
     778:	e0 91 71 01 	lds	r30, 0x0171
     77c:	f0 91 72 01 	lds	r31, 0x0172
     780:	09 95       	icall
}
     782:	ff 91       	pop	r31
     784:	ef 91       	pop	r30
     786:	bf 91       	pop	r27
     788:	af 91       	pop	r26
     78a:	9f 91       	pop	r25
     78c:	8f 91       	pop	r24
     78e:	7f 91       	pop	r23
     790:	6f 91       	pop	r22
     792:	5f 91       	pop	r21
     794:	4f 91       	pop	r20
     796:	3f 91       	pop	r19
     798:	2f 91       	pop	r18
     79a:	0f 90       	pop	r0
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	0f 90       	pop	r0
     7a0:	1f 90       	pop	r1
     7a2:	18 95       	reti

000007a4 <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
     7a4:	1f 92       	push	r1
     7a6:	0f 92       	push	r0
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	0f 92       	push	r0
     7ac:	11 24       	eor	r1, r1
     7ae:	2f 93       	push	r18
     7b0:	3f 93       	push	r19
     7b2:	4f 93       	push	r20
     7b4:	5f 93       	push	r21
     7b6:	6f 93       	push	r22
     7b8:	7f 93       	push	r23
     7ba:	8f 93       	push	r24
     7bc:	9f 93       	push	r25
     7be:	af 93       	push	r26
     7c0:	bf 93       	push	r27
     7c2:	ef 93       	push	r30
     7c4:	ff 93       	push	r31
  TIMER2COMPB();
     7c6:	e0 91 61 01 	lds	r30, 0x0161
     7ca:	f0 91 62 01 	lds	r31, 0x0162
     7ce:	09 95       	icall
}
     7d0:	ff 91       	pop	r31
     7d2:	ef 91       	pop	r30
     7d4:	bf 91       	pop	r27
     7d6:	af 91       	pop	r26
     7d8:	9f 91       	pop	r25
     7da:	8f 91       	pop	r24
     7dc:	7f 91       	pop	r23
     7de:	6f 91       	pop	r22
     7e0:	5f 91       	pop	r21
     7e2:	4f 91       	pop	r20
     7e4:	3f 91       	pop	r19
     7e6:	2f 91       	pop	r18
     7e8:	0f 90       	pop	r0
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	0f 90       	pop	r0
     7ee:	1f 90       	pop	r1
     7f0:	18 95       	reti

000007f2 <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
     7f2:	1f 92       	push	r1
     7f4:	0f 92       	push	r0
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	0f 92       	push	r0
     7fa:	11 24       	eor	r1, r1
     7fc:	2f 93       	push	r18
     7fe:	3f 93       	push	r19
     800:	4f 93       	push	r20
     802:	5f 93       	push	r21
     804:	6f 93       	push	r22
     806:	7f 93       	push	r23
     808:	8f 93       	push	r24
     80a:	9f 93       	push	r25
     80c:	af 93       	push	r26
     80e:	bf 93       	push	r27
     810:	ef 93       	push	r30
     812:	ff 93       	push	r31
  TIMER2OVF();
     814:	e0 91 14 01 	lds	r30, 0x0114
     818:	f0 91 15 01 	lds	r31, 0x0115
     81c:	09 95       	icall
}
     81e:	ff 91       	pop	r31
     820:	ef 91       	pop	r30
     822:	bf 91       	pop	r27
     824:	af 91       	pop	r26
     826:	9f 91       	pop	r25
     828:	8f 91       	pop	r24
     82a:	7f 91       	pop	r23
     82c:	6f 91       	pop	r22
     82e:	5f 91       	pop	r21
     830:	4f 91       	pop	r20
     832:	3f 91       	pop	r19
     834:	2f 91       	pop	r18
     836:	0f 90       	pop	r0
     838:	0f be       	out	0x3f, r0	; 63
     83a:	0f 90       	pop	r0
     83c:	1f 90       	pop	r1
     83e:	18 95       	reti

00000840 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     840:	1f 92       	push	r1
     842:	0f 92       	push	r0
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	0f 92       	push	r0
     848:	11 24       	eor	r1, r1
     84a:	2f 93       	push	r18
     84c:	3f 93       	push	r19
     84e:	4f 93       	push	r20
     850:	5f 93       	push	r21
     852:	6f 93       	push	r22
     854:	7f 93       	push	r23
     856:	8f 93       	push	r24
     858:	9f 93       	push	r25
     85a:	af 93       	push	r26
     85c:	bf 93       	push	r27
     85e:	ef 93       	push	r30
     860:	ff 93       	push	r31

  TIMER1CAPT();
     862:	e0 91 7d 01 	lds	r30, 0x017D
     866:	f0 91 7e 01 	lds	r31, 0x017E
     86a:	09 95       	icall
}
     86c:	ff 91       	pop	r31
     86e:	ef 91       	pop	r30
     870:	bf 91       	pop	r27
     872:	af 91       	pop	r26
     874:	9f 91       	pop	r25
     876:	8f 91       	pop	r24
     878:	7f 91       	pop	r23
     87a:	6f 91       	pop	r22
     87c:	5f 91       	pop	r21
     87e:	4f 91       	pop	r20
     880:	3f 91       	pop	r19
     882:	2f 91       	pop	r18
     884:	0f 90       	pop	r0
     886:	0f be       	out	0x3f, r0	; 63
     888:	0f 90       	pop	r0
     88a:	1f 90       	pop	r1
     88c:	18 95       	reti

0000088e <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     88e:	1f 92       	push	r1
     890:	0f 92       	push	r0
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	0f 92       	push	r0
     896:	11 24       	eor	r1, r1
     898:	2f 93       	push	r18
     89a:	3f 93       	push	r19
     89c:	4f 93       	push	r20
     89e:	5f 93       	push	r21
     8a0:	6f 93       	push	r22
     8a2:	7f 93       	push	r23
     8a4:	8f 93       	push	r24
     8a6:	9f 93       	push	r25
     8a8:	af 93       	push	r26
     8aa:	bf 93       	push	r27
     8ac:	ef 93       	push	r30
     8ae:	ff 93       	push	r31

  TIMER1COMPA();
     8b0:	e0 91 5d 01 	lds	r30, 0x015D
     8b4:	f0 91 5e 01 	lds	r31, 0x015E
     8b8:	09 95       	icall
}
     8ba:	ff 91       	pop	r31
     8bc:	ef 91       	pop	r30
     8be:	bf 91       	pop	r27
     8c0:	af 91       	pop	r26
     8c2:	9f 91       	pop	r25
     8c4:	8f 91       	pop	r24
     8c6:	7f 91       	pop	r23
     8c8:	6f 91       	pop	r22
     8ca:	5f 91       	pop	r21
     8cc:	4f 91       	pop	r20
     8ce:	3f 91       	pop	r19
     8d0:	2f 91       	pop	r18
     8d2:	0f 90       	pop	r0
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	0f 90       	pop	r0
     8d8:	1f 90       	pop	r1
     8da:	18 95       	reti

000008dc <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
     8dc:	1f 92       	push	r1
     8de:	0f 92       	push	r0
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	0f 92       	push	r0
     8e4:	11 24       	eor	r1, r1
     8e6:	2f 93       	push	r18
     8e8:	3f 93       	push	r19
     8ea:	4f 93       	push	r20
     8ec:	5f 93       	push	r21
     8ee:	6f 93       	push	r22
     8f0:	7f 93       	push	r23
     8f2:	8f 93       	push	r24
     8f4:	9f 93       	push	r25
     8f6:	af 93       	push	r26
     8f8:	bf 93       	push	r27
     8fa:	ef 93       	push	r30
     8fc:	ff 93       	push	r31
  TIMER1COMPB();
     8fe:	e0 91 5b 01 	lds	r30, 0x015B
     902:	f0 91 5c 01 	lds	r31, 0x015C
     906:	09 95       	icall
}
     908:	ff 91       	pop	r31
     90a:	ef 91       	pop	r30
     90c:	bf 91       	pop	r27
     90e:	af 91       	pop	r26
     910:	9f 91       	pop	r25
     912:	8f 91       	pop	r24
     914:	7f 91       	pop	r23
     916:	6f 91       	pop	r22
     918:	5f 91       	pop	r21
     91a:	4f 91       	pop	r20
     91c:	3f 91       	pop	r19
     91e:	2f 91       	pop	r18
     920:	0f 90       	pop	r0
     922:	0f be       	out	0x3f, r0	; 63
     924:	0f 90       	pop	r0
     926:	1f 90       	pop	r1
     928:	18 95       	reti

0000092a <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     92a:	1f 92       	push	r1
     92c:	0f 92       	push	r0
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	0f 92       	push	r0
     932:	11 24       	eor	r1, r1
     934:	2f 93       	push	r18
     936:	3f 93       	push	r19
     938:	4f 93       	push	r20
     93a:	5f 93       	push	r21
     93c:	6f 93       	push	r22
     93e:	7f 93       	push	r23
     940:	8f 93       	push	r24
     942:	9f 93       	push	r25
     944:	af 93       	push	r26
     946:	bf 93       	push	r27
     948:	ef 93       	push	r30
     94a:	ff 93       	push	r31
  TIMER1OVF();
     94c:	e0 91 12 01 	lds	r30, 0x0112
     950:	f0 91 13 01 	lds	r31, 0x0113
     954:	09 95       	icall
}
     956:	ff 91       	pop	r31
     958:	ef 91       	pop	r30
     95a:	bf 91       	pop	r27
     95c:	af 91       	pop	r26
     95e:	9f 91       	pop	r25
     960:	8f 91       	pop	r24
     962:	7f 91       	pop	r23
     964:	6f 91       	pop	r22
     966:	5f 91       	pop	r21
     968:	4f 91       	pop	r20
     96a:	3f 91       	pop	r19
     96c:	2f 91       	pop	r18
     96e:	0f 90       	pop	r0
     970:	0f be       	out	0x3f, r0	; 63
     972:	0f 90       	pop	r0
     974:	1f 90       	pop	r1
     976:	18 95       	reti

00000978 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
     978:	1f 92       	push	r1
     97a:	0f 92       	push	r0
     97c:	0f b6       	in	r0, 0x3f	; 63
     97e:	0f 92       	push	r0
     980:	11 24       	eor	r1, r1
     982:	2f 93       	push	r18
     984:	3f 93       	push	r19
     986:	4f 93       	push	r20
     988:	5f 93       	push	r21
     98a:	6f 93       	push	r22
     98c:	7f 93       	push	r23
     98e:	8f 93       	push	r24
     990:	9f 93       	push	r25
     992:	af 93       	push	r26
     994:	bf 93       	push	r27
     996:	ef 93       	push	r30
     998:	ff 93       	push	r31
  TIMER0COMPA();
     99a:	e0 91 7b 01 	lds	r30, 0x017B
     99e:	f0 91 7c 01 	lds	r31, 0x017C
     9a2:	09 95       	icall
}
     9a4:	ff 91       	pop	r31
     9a6:	ef 91       	pop	r30
     9a8:	bf 91       	pop	r27
     9aa:	af 91       	pop	r26
     9ac:	9f 91       	pop	r25
     9ae:	8f 91       	pop	r24
     9b0:	7f 91       	pop	r23
     9b2:	6f 91       	pop	r22
     9b4:	5f 91       	pop	r21
     9b6:	4f 91       	pop	r20
     9b8:	3f 91       	pop	r19
     9ba:	2f 91       	pop	r18
     9bc:	0f 90       	pop	r0
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	0f 90       	pop	r0
     9c2:	1f 90       	pop	r1
     9c4:	18 95       	reti

000009c6 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
     9c6:	1f 92       	push	r1
     9c8:	0f 92       	push	r0
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	0f 92       	push	r0
     9ce:	11 24       	eor	r1, r1
     9d0:	2f 93       	push	r18
     9d2:	3f 93       	push	r19
     9d4:	4f 93       	push	r20
     9d6:	5f 93       	push	r21
     9d8:	6f 93       	push	r22
     9da:	7f 93       	push	r23
     9dc:	8f 93       	push	r24
     9de:	9f 93       	push	r25
     9e0:	af 93       	push	r26
     9e2:	bf 93       	push	r27
     9e4:	ef 93       	push	r30
     9e6:	ff 93       	push	r31
  TIMER0COMPB();
     9e8:	e0 91 6b 01 	lds	r30, 0x016B
     9ec:	f0 91 6c 01 	lds	r31, 0x016C
     9f0:	09 95       	icall
}
     9f2:	ff 91       	pop	r31
     9f4:	ef 91       	pop	r30
     9f6:	bf 91       	pop	r27
     9f8:	af 91       	pop	r26
     9fa:	9f 91       	pop	r25
     9fc:	8f 91       	pop	r24
     9fe:	7f 91       	pop	r23
     a00:	6f 91       	pop	r22
     a02:	5f 91       	pop	r21
     a04:	4f 91       	pop	r20
     a06:	3f 91       	pop	r19
     a08:	2f 91       	pop	r18
     a0a:	0f 90       	pop	r0
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	0f 90       	pop	r0
     a10:	1f 90       	pop	r1
     a12:	18 95       	reti

00000a14 <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     a14:	1f 92       	push	r1
     a16:	0f 92       	push	r0
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	0f 92       	push	r0
     a1c:	11 24       	eor	r1, r1
     a1e:	2f 93       	push	r18
     a20:	3f 93       	push	r19
     a22:	4f 93       	push	r20
     a24:	5f 93       	push	r21
     a26:	6f 93       	push	r22
     a28:	7f 93       	push	r23
     a2a:	8f 93       	push	r24
     a2c:	9f 93       	push	r25
     a2e:	af 93       	push	r26
     a30:	bf 93       	push	r27
     a32:	ef 93       	push	r30
     a34:	ff 93       	push	r31
  TIMER0OVF_INT();
     a36:	e0 91 67 01 	lds	r30, 0x0167
     a3a:	f0 91 68 01 	lds	r31, 0x0168
     a3e:	09 95       	icall
}
     a40:	ff 91       	pop	r31
     a42:	ef 91       	pop	r30
     a44:	bf 91       	pop	r27
     a46:	af 91       	pop	r26
     a48:	9f 91       	pop	r25
     a4a:	8f 91       	pop	r24
     a4c:	7f 91       	pop	r23
     a4e:	6f 91       	pop	r22
     a50:	5f 91       	pop	r21
     a52:	4f 91       	pop	r20
     a54:	3f 91       	pop	r19
     a56:	2f 91       	pop	r18
     a58:	0f 90       	pop	r0
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	0f 90       	pop	r0
     a5e:	1f 90       	pop	r1
     a60:	18 95       	reti

00000a62 <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
     a62:	1f 92       	push	r1
     a64:	0f 92       	push	r0
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	0f 92       	push	r0
     a6a:	11 24       	eor	r1, r1
     a6c:	2f 93       	push	r18
     a6e:	3f 93       	push	r19
     a70:	4f 93       	push	r20
     a72:	5f 93       	push	r21
     a74:	6f 93       	push	r22
     a76:	7f 93       	push	r23
     a78:	8f 93       	push	r24
     a7a:	9f 93       	push	r25
     a7c:	af 93       	push	r26
     a7e:	bf 93       	push	r27
     a80:	ef 93       	push	r30
     a82:	ff 93       	push	r31
  SPI_STC();
     a84:	e0 91 63 01 	lds	r30, 0x0163
     a88:	f0 91 64 01 	lds	r31, 0x0164
     a8c:	09 95       	icall
}
     a8e:	ff 91       	pop	r31
     a90:	ef 91       	pop	r30
     a92:	bf 91       	pop	r27
     a94:	af 91       	pop	r26
     a96:	9f 91       	pop	r25
     a98:	8f 91       	pop	r24
     a9a:	7f 91       	pop	r23
     a9c:	6f 91       	pop	r22
     a9e:	5f 91       	pop	r21
     aa0:	4f 91       	pop	r20
     aa2:	3f 91       	pop	r19
     aa4:	2f 91       	pop	r18
     aa6:	0f 90       	pop	r0
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	0f 90       	pop	r0
     aac:	1f 90       	pop	r1
     aae:	18 95       	reti

00000ab0 <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
     ab0:	1f 92       	push	r1
     ab2:	0f 92       	push	r0
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	0f 92       	push	r0
     ab8:	11 24       	eor	r1, r1
     aba:	2f 93       	push	r18
     abc:	3f 93       	push	r19
     abe:	4f 93       	push	r20
     ac0:	5f 93       	push	r21
     ac2:	6f 93       	push	r22
     ac4:	7f 93       	push	r23
     ac6:	8f 93       	push	r24
     ac8:	9f 93       	push	r25
     aca:	af 93       	push	r26
     acc:	bf 93       	push	r27
     ace:	ef 93       	push	r30
     ad0:	ff 93       	push	r31
  USART_RXC();
     ad2:	e0 91 55 01 	lds	r30, 0x0155
     ad6:	f0 91 56 01 	lds	r31, 0x0156
     ada:	09 95       	icall
}
     adc:	ff 91       	pop	r31
     ade:	ef 91       	pop	r30
     ae0:	bf 91       	pop	r27
     ae2:	af 91       	pop	r26
     ae4:	9f 91       	pop	r25
     ae6:	8f 91       	pop	r24
     ae8:	7f 91       	pop	r23
     aea:	6f 91       	pop	r22
     aec:	5f 91       	pop	r21
     aee:	4f 91       	pop	r20
     af0:	3f 91       	pop	r19
     af2:	2f 91       	pop	r18
     af4:	0f 90       	pop	r0
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	0f 90       	pop	r0
     afa:	1f 90       	pop	r1
     afc:	18 95       	reti

00000afe <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
     afe:	1f 92       	push	r1
     b00:	0f 92       	push	r0
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	0f 92       	push	r0
     b06:	11 24       	eor	r1, r1
     b08:	2f 93       	push	r18
     b0a:	3f 93       	push	r19
     b0c:	4f 93       	push	r20
     b0e:	5f 93       	push	r21
     b10:	6f 93       	push	r22
     b12:	7f 93       	push	r23
     b14:	8f 93       	push	r24
     b16:	9f 93       	push	r25
     b18:	af 93       	push	r26
     b1a:	bf 93       	push	r27
     b1c:	ef 93       	push	r30
     b1e:	ff 93       	push	r31
  USART_UDRE();
     b20:	e0 91 77 01 	lds	r30, 0x0177
     b24:	f0 91 78 01 	lds	r31, 0x0178
     b28:	09 95       	icall
}
     b2a:	ff 91       	pop	r31
     b2c:	ef 91       	pop	r30
     b2e:	bf 91       	pop	r27
     b30:	af 91       	pop	r26
     b32:	9f 91       	pop	r25
     b34:	8f 91       	pop	r24
     b36:	7f 91       	pop	r23
     b38:	6f 91       	pop	r22
     b3a:	5f 91       	pop	r21
     b3c:	4f 91       	pop	r20
     b3e:	3f 91       	pop	r19
     b40:	2f 91       	pop	r18
     b42:	0f 90       	pop	r0
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	0f 90       	pop	r0
     b48:	1f 90       	pop	r1
     b4a:	18 95       	reti

00000b4c <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
     b4c:	1f 92       	push	r1
     b4e:	0f 92       	push	r0
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	0f 92       	push	r0
     b54:	11 24       	eor	r1, r1
     b56:	2f 93       	push	r18
     b58:	3f 93       	push	r19
     b5a:	4f 93       	push	r20
     b5c:	5f 93       	push	r21
     b5e:	6f 93       	push	r22
     b60:	7f 93       	push	r23
     b62:	8f 93       	push	r24
     b64:	9f 93       	push	r25
     b66:	af 93       	push	r26
     b68:	bf 93       	push	r27
     b6a:	ef 93       	push	r30
     b6c:	ff 93       	push	r31
  USART_TXC();
     b6e:	e0 91 75 01 	lds	r30, 0x0175
     b72:	f0 91 76 01 	lds	r31, 0x0176
     b76:	09 95       	icall
}
     b78:	ff 91       	pop	r31
     b7a:	ef 91       	pop	r30
     b7c:	bf 91       	pop	r27
     b7e:	af 91       	pop	r26
     b80:	9f 91       	pop	r25
     b82:	8f 91       	pop	r24
     b84:	7f 91       	pop	r23
     b86:	6f 91       	pop	r22
     b88:	5f 91       	pop	r21
     b8a:	4f 91       	pop	r20
     b8c:	3f 91       	pop	r19
     b8e:	2f 91       	pop	r18
     b90:	0f 90       	pop	r0
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	0f 90       	pop	r0
     b96:	1f 90       	pop	r1
     b98:	18 95       	reti

00000b9a <__vector_21>:

void __vector_21(void) __attribute__((signal));
void __vector_21(void)
{
     b9a:	1f 92       	push	r1
     b9c:	0f 92       	push	r0
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	0f 92       	push	r0
     ba2:	11 24       	eor	r1, r1
     ba4:	2f 93       	push	r18
     ba6:	3f 93       	push	r19
     ba8:	4f 93       	push	r20
     baa:	5f 93       	push	r21
     bac:	6f 93       	push	r22
     bae:	7f 93       	push	r23
     bb0:	8f 93       	push	r24
     bb2:	9f 93       	push	r25
     bb4:	af 93       	push	r26
     bb6:	bf 93       	push	r27
     bb8:	ef 93       	push	r30
     bba:	ff 93       	push	r31
  ADC_INT();
     bbc:	e0 91 6d 01 	lds	r30, 0x016D
     bc0:	f0 91 6e 01 	lds	r31, 0x016E
     bc4:	09 95       	icall
}
     bc6:	ff 91       	pop	r31
     bc8:	ef 91       	pop	r30
     bca:	bf 91       	pop	r27
     bcc:	af 91       	pop	r26
     bce:	9f 91       	pop	r25
     bd0:	8f 91       	pop	r24
     bd2:	7f 91       	pop	r23
     bd4:	6f 91       	pop	r22
     bd6:	5f 91       	pop	r21
     bd8:	4f 91       	pop	r20
     bda:	3f 91       	pop	r19
     bdc:	2f 91       	pop	r18
     bde:	0f 90       	pop	r0
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	0f 90       	pop	r0
     be4:	1f 90       	pop	r1
     be6:	18 95       	reti

00000be8 <__vector_22>:

void __vector_22(void) __attribute__((signal));
void __vector_22(void)
{
     be8:	1f 92       	push	r1
     bea:	0f 92       	push	r0
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	0f 92       	push	r0
     bf0:	11 24       	eor	r1, r1
     bf2:	2f 93       	push	r18
     bf4:	3f 93       	push	r19
     bf6:	4f 93       	push	r20
     bf8:	5f 93       	push	r21
     bfa:	6f 93       	push	r22
     bfc:	7f 93       	push	r23
     bfe:	8f 93       	push	r24
     c00:	9f 93       	push	r25
     c02:	af 93       	push	r26
     c04:	bf 93       	push	r27
     c06:	ef 93       	push	r30
     c08:	ff 93       	push	r31
  EE_RDY();
     c0a:	e0 91 6f 01 	lds	r30, 0x016F
     c0e:	f0 91 70 01 	lds	r31, 0x0170
     c12:	09 95       	icall
}
     c14:	ff 91       	pop	r31
     c16:	ef 91       	pop	r30
     c18:	bf 91       	pop	r27
     c1a:	af 91       	pop	r26
     c1c:	9f 91       	pop	r25
     c1e:	8f 91       	pop	r24
     c20:	7f 91       	pop	r23
     c22:	6f 91       	pop	r22
     c24:	5f 91       	pop	r21
     c26:	4f 91       	pop	r20
     c28:	3f 91       	pop	r19
     c2a:	2f 91       	pop	r18
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	0f 90       	pop	r0
     c32:	1f 90       	pop	r1
     c34:	18 95       	reti

00000c36 <__vector_23>:

void __vector_23(void) __attribute__((signal));
void __vector_23(void)
{
     c36:	1f 92       	push	r1
     c38:	0f 92       	push	r0
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	0f 92       	push	r0
     c3e:	11 24       	eor	r1, r1
     c40:	2f 93       	push	r18
     c42:	3f 93       	push	r19
     c44:	4f 93       	push	r20
     c46:	5f 93       	push	r21
     c48:	6f 93       	push	r22
     c4a:	7f 93       	push	r23
     c4c:	8f 93       	push	r24
     c4e:	9f 93       	push	r25
     c50:	af 93       	push	r26
     c52:	bf 93       	push	r27
     c54:	ef 93       	push	r30
     c56:	ff 93       	push	r31
  ANA_COMP();
     c58:	e0 91 69 01 	lds	r30, 0x0169
     c5c:	f0 91 6a 01 	lds	r31, 0x016A
     c60:	09 95       	icall
}
     c62:	ff 91       	pop	r31
     c64:	ef 91       	pop	r30
     c66:	bf 91       	pop	r27
     c68:	af 91       	pop	r26
     c6a:	9f 91       	pop	r25
     c6c:	8f 91       	pop	r24
     c6e:	7f 91       	pop	r23
     c70:	6f 91       	pop	r22
     c72:	5f 91       	pop	r21
     c74:	4f 91       	pop	r20
     c76:	3f 91       	pop	r19
     c78:	2f 91       	pop	r18
     c7a:	0f 90       	pop	r0
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	0f 90       	pop	r0
     c80:	1f 90       	pop	r1
     c82:	18 95       	reti

00000c84 <__vector_24>:

void __vector_24(void) __attribute__((signal));
void __vector_24(void)
{
     c84:	1f 92       	push	r1
     c86:	0f 92       	push	r0
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	0f 92       	push	r0
     c8c:	11 24       	eor	r1, r1
     c8e:	2f 93       	push	r18
     c90:	3f 93       	push	r19
     c92:	4f 93       	push	r20
     c94:	5f 93       	push	r21
     c96:	6f 93       	push	r22
     c98:	7f 93       	push	r23
     c9a:	8f 93       	push	r24
     c9c:	9f 93       	push	r25
     c9e:	af 93       	push	r26
     ca0:	bf 93       	push	r27
     ca2:	ef 93       	push	r30
     ca4:	ff 93       	push	r31
  TWI_I2C();
     ca6:	e0 91 53 01 	lds	r30, 0x0153
     caa:	f0 91 54 01 	lds	r31, 0x0154
     cae:	09 95       	icall
}
     cb0:	ff 91       	pop	r31
     cb2:	ef 91       	pop	r30
     cb4:	bf 91       	pop	r27
     cb6:	af 91       	pop	r26
     cb8:	9f 91       	pop	r25
     cba:	8f 91       	pop	r24
     cbc:	7f 91       	pop	r23
     cbe:	6f 91       	pop	r22
     cc0:	5f 91       	pop	r21
     cc2:	4f 91       	pop	r20
     cc4:	3f 91       	pop	r19
     cc6:	2f 91       	pop	r18
     cc8:	0f 90       	pop	r0
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	0f 90       	pop	r0
     cce:	1f 90       	pop	r1
     cd0:	18 95       	reti

00000cd2 <__vector_25>:

void __vector_25(void) __attribute__((signal));
void __vector_25(void)
{
     cd2:	1f 92       	push	r1
     cd4:	0f 92       	push	r0
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	0f 92       	push	r0
     cda:	11 24       	eor	r1, r1
     cdc:	2f 93       	push	r18
     cde:	3f 93       	push	r19
     ce0:	4f 93       	push	r20
     ce2:	5f 93       	push	r21
     ce4:	6f 93       	push	r22
     ce6:	7f 93       	push	r23
     ce8:	8f 93       	push	r24
     cea:	9f 93       	push	r25
     cec:	af 93       	push	r26
     cee:	bf 93       	push	r27
     cf0:	ef 93       	push	r30
     cf2:	ff 93       	push	r31
  SPM_RDY();
     cf4:	e0 91 59 01 	lds	r30, 0x0159
     cf8:	f0 91 5a 01 	lds	r31, 0x015A
     cfc:	09 95       	icall
}
     cfe:	ff 91       	pop	r31
     d00:	ef 91       	pop	r30
     d02:	bf 91       	pop	r27
     d04:	af 91       	pop	r26
     d06:	9f 91       	pop	r25
     d08:	8f 91       	pop	r24
     d0a:	7f 91       	pop	r23
     d0c:	6f 91       	pop	r22
     d0e:	5f 91       	pop	r21
     d10:	4f 91       	pop	r20
     d12:	3f 91       	pop	r19
     d14:	2f 91       	pop	r18
     d16:	0f 90       	pop	r0
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	0f 90       	pop	r0
     d1c:	1f 90       	pop	r1
     d1e:	18 95       	reti

00000d20 <main>:
 */
#include "glasses_sm.h"
static uint32_t timespend=0;
int main(void)
{
system_init();
     d20:	0e 94 45 01 	call	0x28a	; 0x28a <system_init>
	while(1)
    {
		system_update();
     d24:	0e 94 4c 01 	call	0x298	; 0x298 <system_update>
     d28:	fd cf       	rjmp	.-6      	; 0xd24 <main+0x4>

00000d2a <motor_init>:
ERROR_STATUS motor_init(void)
{
uint8_t ret =E_OK;


ret=DIO_init(&motor_Configuration_0);
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_init>
DIO_Write(GPIOD,PIN6,HIGH);
     d32:	83 e0       	ldi	r24, 0x03	; 3
     d34:	60 e4       	ldi	r22, 0x40	; 64
     d36:	4f ef       	ldi	r20, 0xFF	; 255
     d38:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
ret=Pwm_Init(&PWM_Configuration_0);
     d3c:	8a e1       	ldi	r24, 0x1A	; 26
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	0e 94 63 07 	call	0xec6	; 0xec6 <Pwm_Init>
return ret;
}
     d44:	08 95       	ret

00000d46 <motor_start_sm>:


ERROR_STATUS motor_start_sm(uint8_t state)
{
     d46:	cf 93       	push	r28
     d48:	c8 2f       	mov	r28, r24
  uint8_t ret=E_OK;
  static uint8_t speed=0;
    static uint16_t counter=0;
	 Pwm_Start(PWM_CH0,speed,10);
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	60 91 42 01 	lds	r22, 0x0142
     d50:	2a e0       	ldi	r18, 0x0A	; 10
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	40 e0       	ldi	r20, 0x00	; 0
     d56:	50 e0       	ldi	r21, 0x00	; 0
     d58:	0e 94 71 07 	call	0xee2	; 0xee2 <Pwm_Start>
    if (timer2_interrupt_raised)
     d5c:	80 91 4b 01 	lds	r24, 0x014B
     d60:	88 23       	and	r24, r24
     d62:	49 f0       	breq	.+18     	; 0xd76 <motor_start_sm+0x30>
    {
	    counter++;
     d64:	80 91 43 01 	lds	r24, 0x0143
     d68:	90 91 44 01 	lds	r25, 0x0144
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	90 93 44 01 	sts	0x0144, r25
     d72:	80 93 43 01 	sts	0x0143, r24
    }
switch (state) {
     d76:	c3 30       	cpi	r28, 0x03	; 3
     d78:	09 f4       	brne	.+2      	; 0xd7c <motor_start_sm+0x36>
     d7a:	41 c0       	rjmp	.+130    	; 0xdfe <motor_start_sm+0xb8>
     d7c:	c4 30       	cpi	r28, 0x04	; 4
     d7e:	28 f4       	brcc	.+10     	; 0xd8a <motor_start_sm+0x44>
     d80:	c1 30       	cpi	r28, 0x01	; 1
     d82:	a1 f0       	breq	.+40     	; 0xdac <motor_start_sm+0x66>
     d84:	c2 30       	cpi	r28, 0x02	; 2
     d86:	40 f5       	brcc	.+80     	; 0xdd8 <motor_start_sm+0x92>
     d88:	0a c0       	rjmp	.+20     	; 0xd9e <motor_start_sm+0x58>
     d8a:	c5 30       	cpi	r28, 0x05	; 5
     d8c:	09 f4       	brne	.+2      	; 0xd90 <motor_start_sm+0x4a>
     d8e:	62 c0       	rjmp	.+196    	; 0xe54 <motor_start_sm+0x10e>
     d90:	c5 30       	cpi	r28, 0x05	; 5
     d92:	08 f4       	brcc	.+2      	; 0xd96 <motor_start_sm+0x50>
     d94:	4a c0       	rjmp	.+148    	; 0xe2a <motor_start_sm+0xe4>
     d96:	c6 30       	cpi	r28, 0x06	; 6
     d98:	09 f0       	breq	.+2      	; 0xd9c <motor_start_sm+0x56>
     d9a:	86 c0       	rjmp	.+268    	; 0xea8 <motor_start_sm+0x162>
     d9c:	70 c0       	rjmp	.+224    	; 0xe7e <motor_start_sm+0x138>
  case MOTOR_STOP:
//Pwm_Stop(PWM_CH0);
DIO_Write(GPIOD,BIT7,LOW);
     d9e:	83 e0       	ldi	r24, 0x03	; 3
     da0:	60 e8       	ldi	r22, 0x80	; 128
     da2:	40 e0       	ldi	r20, 0x00	; 0
     da4:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     da8:	80 e0       	ldi	r24, 0x00	; 0
    }
switch (state) {
  case MOTOR_STOP:
//Pwm_Stop(PWM_CH0);
DIO_Write(GPIOD,BIT7,LOW);
  break;
     daa:	8b c0       	rjmp	.+278    	; 0xec2 <motor_start_sm+0x17c>
  case MOTOR_TWO_M:
 speed=10;
     dac:	8a e0       	ldi	r24, 0x0A	; 10
     dae:	80 93 42 01 	sts	0x0142, r24
  if(counter==100){
     db2:	80 91 43 01 	lds	r24, 0x0143
     db6:	90 91 44 01 	lds	r25, 0x0144
     dba:	84 36       	cpi	r24, 0x64	; 100
     dbc:	91 05       	cpc	r25, r1
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <motor_start_sm+0x7c>
     dc0:	75 c0       	rjmp	.+234    	; 0xeac <motor_start_sm+0x166>
  counter=0;
     dc2:	10 92 44 01 	sts	0x0144, r1
     dc6:	10 92 43 01 	sts	0x0143, r1
  DIO_Write(GPIOD,BIT7,HIGH);
     dca:	83 e0       	ldi	r24, 0x03	; 3
     dcc:	60 e8       	ldi	r22, 0x80	; 128
     dce:	4f ef       	ldi	r20, 0xFF	; 255
     dd0:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	75 c0       	rjmp	.+234    	; 0xec2 <motor_start_sm+0x17c>
}

  break;
  speed=20;
  case MOTOR_ONE_HALF_M:
  if(counter==50){
     dd8:	80 91 43 01 	lds	r24, 0x0143
     ddc:	90 91 44 01 	lds	r25, 0x0144
     de0:	82 33       	cpi	r24, 0x32	; 50
     de2:	91 05       	cpc	r25, r1
     de4:	09 f0       	breq	.+2      	; 0xde8 <motor_start_sm+0xa2>
     de6:	64 c0       	rjmp	.+200    	; 0xeb0 <motor_start_sm+0x16a>
  counter=0;
     de8:	10 92 44 01 	sts	0x0144, r1
     dec:	10 92 43 01 	sts	0x0143, r1
  DIO_Write(GPIOD,BIT7,HIGH);
     df0:	83 e0       	ldi	r24, 0x03	; 3
     df2:	60 e8       	ldi	r22, 0x80	; 128
     df4:	4f ef       	ldi	r20, 0xFF	; 255
     df6:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	62 c0       	rjmp	.+196    	; 0xec2 <motor_start_sm+0x17c>
  DIO_Write(GPIOD,BIT7,HIGH);
  }

  break;
  case MOTOR_ONE_M:
  speed=30;
     dfe:	8e e1       	ldi	r24, 0x1E	; 30
     e00:	80 93 42 01 	sts	0x0142, r24
  if(counter==25){
     e04:	80 91 43 01 	lds	r24, 0x0143
     e08:	90 91 44 01 	lds	r25, 0x0144
     e0c:	89 31       	cpi	r24, 0x19	; 25
     e0e:	91 05       	cpc	r25, r1
     e10:	09 f0       	breq	.+2      	; 0xe14 <motor_start_sm+0xce>
     e12:	50 c0       	rjmp	.+160    	; 0xeb4 <motor_start_sm+0x16e>
  counter=0;
     e14:	10 92 44 01 	sts	0x0144, r1
     e18:	10 92 43 01 	sts	0x0143, r1
  DIO_Write(GPIOD,BIT7,HIGH);
     e1c:	83 e0       	ldi	r24, 0x03	; 3
     e1e:	60 e8       	ldi	r22, 0x80	; 128
     e20:	4f ef       	ldi	r20, 0xFF	; 255
     e22:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	4c c0       	rjmp	.+152    	; 0xec2 <motor_start_sm+0x17c>
  counter=0;
  DIO_Write(GPIOD,BIT7,HIGH);
}
  break;
  case MOTOR_HALF_M:
speed=50;
     e2a:	82 e3       	ldi	r24, 0x32	; 50
     e2c:	80 93 42 01 	sts	0x0142, r24
  if(counter==12){
     e30:	80 91 43 01 	lds	r24, 0x0143
     e34:	90 91 44 01 	lds	r25, 0x0144
     e38:	8c 30       	cpi	r24, 0x0C	; 12
     e3a:	91 05       	cpc	r25, r1
     e3c:	e9 f5       	brne	.+122    	; 0xeb8 <motor_start_sm+0x172>
  counter=0;
     e3e:	10 92 44 01 	sts	0x0144, r1
     e42:	10 92 43 01 	sts	0x0143, r1
  DIO_Write(GPIOD,BIT7,HIGH);
     e46:	83 e0       	ldi	r24, 0x03	; 3
     e48:	60 e8       	ldi	r22, 0x80	; 128
     e4a:	4f ef       	ldi	r20, 0xFF	; 255
     e4c:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	37 c0       	rjmp	.+110    	; 0xec2 <motor_start_sm+0x17c>
}

  break;
  case MOTOR_30_CM:
  
speed=70;
     e54:	86 e4       	ldi	r24, 0x46	; 70
     e56:	80 93 42 01 	sts	0x0142, r24
  if(counter==7){
     e5a:	80 91 43 01 	lds	r24, 0x0143
     e5e:	90 91 44 01 	lds	r25, 0x0144
     e62:	87 30       	cpi	r24, 0x07	; 7
     e64:	91 05       	cpc	r25, r1
     e66:	51 f5       	brne	.+84     	; 0xebc <motor_start_sm+0x176>
  counter=0;
     e68:	10 92 44 01 	sts	0x0144, r1
     e6c:	10 92 43 01 	sts	0x0143, r1
  DIO_Write(GPIOD,BIT7,HIGH);
     e70:	83 e0       	ldi	r24, 0x03	; 3
     e72:	60 e8       	ldi	r22, 0x80	; 128
     e74:	4f ef       	ldi	r20, 0xFF	; 255
     e76:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	22 c0       	rjmp	.+68     	; 0xec2 <motor_start_sm+0x17c>
}

  break;
  case MOTOR_20_CM:

speed=90;
     e7e:	8a e5       	ldi	r24, 0x5A	; 90
     e80:	80 93 42 01 	sts	0x0142, r24
  if(counter==2){
     e84:	80 91 43 01 	lds	r24, 0x0143
     e88:	90 91 44 01 	lds	r25, 0x0144
     e8c:	82 30       	cpi	r24, 0x02	; 2
     e8e:	91 05       	cpc	r25, r1
     e90:	b9 f4       	brne	.+46     	; 0xec0 <motor_start_sm+0x17a>
  counter=0;
     e92:	10 92 44 01 	sts	0x0144, r1
     e96:	10 92 43 01 	sts	0x0143, r1
  DIO_Write(GPIOD,BIT7,HIGH);
     e9a:	83 e0       	ldi	r24, 0x03	; 3
     e9c:	60 e8       	ldi	r22, 0x80	; 128
     e9e:	4f ef       	ldi	r20, 0xFF	; 255
     ea0:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	0d c0       	rjmp	.+26     	; 0xec2 <motor_start_sm+0x17c>
  DIO_Write(GPIOD,BIT7,HIGH);
}

  break;
  default:
ret=E_NOK;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	0b c0       	rjmp	.+22     	; 0xec2 <motor_start_sm+0x17c>
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	09 c0       	rjmp	.+18     	; 0xec2 <motor_start_sm+0x17c>
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	07 c0       	rjmp	.+14     	; 0xec2 <motor_start_sm+0x17c>
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	05 c0       	rjmp	.+10     	; 0xec2 <motor_start_sm+0x17c>
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	03 c0       	rjmp	.+6      	; 0xec2 <motor_start_sm+0x17c>
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	01 c0       	rjmp	.+2      	; 0xec2 <motor_start_sm+0x17c>
     ec0:	80 e0       	ldi	r24, 0x00	; 0
  break;
}


  return ret;
}
     ec2:	cf 91       	pop	r28
     ec4:	08 95       	ret

00000ec6 <Pwm_Init>:
/* Return type : void                                                            */
/*                                                                               */
/* Description: initialize the PWM configuration                                 */
/*********************************************************************************/
ERROR_STATUS Pwm_Init(Pwm_Cfg_s *Pwm_Cfg)
{
     ec6:	fc 01       	movw	r30, r24
  uint8_t Ret=0;
  switch(Pwm_Cfg->Channel)
     ec8:	80 81       	ld	r24, Z
     eca:	88 23       	and	r24, r24
     ecc:	29 f4       	brne	.+10     	; 0xed8 <Pwm_Init+0x12>
    {
      case PWM_CH0:
      TCCR0|=T0_PWM_FAST |T0_NON_INVERTING;
     ece:	84 b5       	in	r24, 0x24	; 36
     ed0:	95 b5       	in	r25, 0x25	; 37
     ed2:	83 68       	ori	r24, 0x83	; 131
     ed4:	95 bd       	out	0x25, r25	; 37
     ed6:	84 bd       	out	0x24, r24	; 36
      break;
      default:
      Ret=E_NOK;
      break;*/
    }
  sgl_Prescaler=Pwm_Cfg->Prescaler;
     ed8:	81 81       	ldd	r24, Z+1	; 0x01
     eda:	80 93 45 01 	sts	0x0145, r24
  u32g_T1_Prescaler=en_prescal;
  OCR1A =u16_outputCompareA;
  OCR1B =u16_outputCompareB;
  TCNT1=u16_initialValue;
  */
}
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	08 95       	ret

00000ee2 <Pwm_Start>:
/*-------------------------------------------------------                        */
/*((all this calculations are for phase correct mode))                           */
/*all this calculation for F_CPU 16MHz                                           */
/*********************************************************************************/
ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{uint8_t Ret=0;
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	96 2f       	mov	r25, r22
     ee8:	ba 01       	movw	r22, r20
     eea:	a9 01       	movw	r20, r18
  float dutyReal;
uint32_t pwm_time_on = MAX_HOLD;

if(Frequncy <= 31372 && Frequncy > 3921 )
     eec:	8a 01       	movw	r16, r20
     eee:	9b 01       	movw	r18, r22
     ef0:	02 55       	subi	r16, 0x52	; 82
     ef2:	1f 40       	sbci	r17, 0x0F	; 15
     ef4:	20 40       	sbci	r18, 0x00	; 0
     ef6:	30 40       	sbci	r19, 0x00	; 0
     ef8:	0b 33       	cpi	r16, 0x3B	; 59
     efa:	eb e6       	ldi	r30, 0x6B	; 107
     efc:	1e 07       	cpc	r17, r30
     efe:	e0 e0       	ldi	r30, 0x00	; 0
     f00:	2e 07       	cpc	r18, r30
     f02:	e0 e0       	ldi	r30, 0x00	; 0
     f04:	3e 07       	cpc	r19, r30
     f06:	18 f4       	brcc	.+6      	; 0xf0e <Pwm_Start+0x2c>
  sgl_Prescaler=PWM_PRESCALER_NO;
     f08:	10 92 45 01 	sts	0x0145, r1
     f0c:	64 c0       	rjmp	.+200    	; 0xfd6 <Pwm_Start+0xf4>
else if(Frequncy <= 3921 && Frequncy > 980)
     f0e:	8a 01       	movw	r16, r20
     f10:	9b 01       	movw	r18, r22
     f12:	05 5d       	subi	r16, 0xD5	; 213
     f14:	13 40       	sbci	r17, 0x03	; 3
     f16:	20 40       	sbci	r18, 0x00	; 0
     f18:	30 40       	sbci	r19, 0x00	; 0
     f1a:	0d 37       	cpi	r16, 0x7D	; 125
     f1c:	eb e0       	ldi	r30, 0x0B	; 11
     f1e:	1e 07       	cpc	r17, r30
     f20:	e0 e0       	ldi	r30, 0x00	; 0
     f22:	2e 07       	cpc	r18, r30
     f24:	e0 e0       	ldi	r30, 0x00	; 0
     f26:	3e 07       	cpc	r19, r30
     f28:	20 f4       	brcc	.+8      	; 0xf32 <Pwm_Start+0x50>
  sgl_Prescaler=PWM_PRESCALER_8;
     f2a:	21 e0       	ldi	r18, 0x01	; 1
     f2c:	20 93 45 01 	sts	0x0145, r18
     f30:	58 c0       	rjmp	.+176    	; 0xfe2 <Pwm_Start+0x100>
else if(Frequncy <= 980 && Frequncy > 490)
     f32:	8a 01       	movw	r16, r20
     f34:	9b 01       	movw	r18, r22
     f36:	0b 5e       	subi	r16, 0xEB	; 235
     f38:	11 40       	sbci	r17, 0x01	; 1
     f3a:	20 40       	sbci	r18, 0x00	; 0
     f3c:	30 40       	sbci	r19, 0x00	; 0
     f3e:	0a 3e       	cpi	r16, 0xEA	; 234
     f40:	e1 e0       	ldi	r30, 0x01	; 1
     f42:	1e 07       	cpc	r17, r30
     f44:	e0 e0       	ldi	r30, 0x00	; 0
     f46:	2e 07       	cpc	r18, r30
     f48:	e0 e0       	ldi	r30, 0x00	; 0
     f4a:	3e 07       	cpc	r19, r30
     f4c:	20 f4       	brcc	.+8      	; 0xf56 <Pwm_Start+0x74>
  sgl_Prescaler=PWM_PRESCALER_32;
     f4e:	22 e0       	ldi	r18, 0x02	; 2
     f50:	20 93 45 01 	sts	0x0145, r18
     f54:	4c c0       	rjmp	.+152    	; 0xfee <Pwm_Start+0x10c>
else if(Frequncy <= 490 && Frequncy > 122)
     f56:	8a 01       	movw	r16, r20
     f58:	9b 01       	movw	r18, r22
     f5a:	0b 57       	subi	r16, 0x7B	; 123
     f5c:	10 40       	sbci	r17, 0x00	; 0
     f5e:	20 40       	sbci	r18, 0x00	; 0
     f60:	30 40       	sbci	r19, 0x00	; 0
     f62:	00 37       	cpi	r16, 0x70	; 112
     f64:	e1 e0       	ldi	r30, 0x01	; 1
     f66:	1e 07       	cpc	r17, r30
     f68:	e0 e0       	ldi	r30, 0x00	; 0
     f6a:	2e 07       	cpc	r18, r30
     f6c:	e0 e0       	ldi	r30, 0x00	; 0
     f6e:	3e 07       	cpc	r19, r30
     f70:	20 f4       	brcc	.+8      	; 0xf7a <Pwm_Start+0x98>
  sgl_Prescaler=PWM_PRESCALER_64;
     f72:	23 e0       	ldi	r18, 0x03	; 3
     f74:	20 93 45 01 	sts	0x0145, r18
     f78:	45 c0       	rjmp	.+138    	; 0x1004 <Pwm_Start+0x122>
else if(Frequncy <= 122 && Frequncy > 31)
     f7a:	8a 01       	movw	r16, r20
     f7c:	9b 01       	movw	r18, r22
     f7e:	00 52       	subi	r16, 0x20	; 32
     f80:	10 40       	sbci	r17, 0x00	; 0
     f82:	20 40       	sbci	r18, 0x00	; 0
     f84:	30 40       	sbci	r19, 0x00	; 0
     f86:	0b 35       	cpi	r16, 0x5B	; 91
     f88:	11 05       	cpc	r17, r1
     f8a:	21 05       	cpc	r18, r1
     f8c:	31 05       	cpc	r19, r1
     f8e:	20 f4       	brcc	.+8      	; 0xf98 <Pwm_Start+0xb6>
  sgl_Prescaler=PWM_PRESCALER_256;
     f90:	24 e0       	ldi	r18, 0x04	; 4
     f92:	20 93 45 01 	sts	0x0145, r18
     f96:	3c c0       	rjmp	.+120    	; 0x1010 <Pwm_Start+0x12e>
else if(Frequncy <= 31 && Frequncy > 0)
     f98:	41 50       	subi	r20, 0x01	; 1
     f9a:	50 40       	sbci	r21, 0x00	; 0
     f9c:	60 40       	sbci	r22, 0x00	; 0
     f9e:	70 40       	sbci	r23, 0x00	; 0
     fa0:	4f 31       	cpi	r20, 0x1F	; 31
     fa2:	51 05       	cpc	r21, r1
     fa4:	61 05       	cpc	r22, r1
     fa6:	71 05       	cpc	r23, r1
     fa8:	20 f4       	brcc	.+8      	; 0xfb2 <Pwm_Start+0xd0>
  sgl_Prescaler=PWM_PRESCALER_1024;
     faa:	25 e0       	ldi	r18, 0x05	; 5
     fac:	20 93 45 01 	sts	0x0145, r18
     fb0:	35 c0       	rjmp	.+106    	; 0x101c <Pwm_Start+0x13a>
else{Ret=E_NOK;}
switch(sgl_Prescaler)
     fb2:	20 91 45 01 	lds	r18, 0x0145
     fb6:	22 30       	cpi	r18, 0x02	; 2
     fb8:	d1 f0       	breq	.+52     	; 0xfee <Pwm_Start+0x10c>
     fba:	23 30       	cpi	r18, 0x03	; 3
     fbc:	28 f4       	brcc	.+10     	; 0xfc8 <Pwm_Start+0xe6>
     fbe:	22 23       	and	r18, r18
     fc0:	51 f0       	breq	.+20     	; 0xfd6 <Pwm_Start+0xf4>
     fc2:	21 30       	cpi	r18, 0x01	; 1
     fc4:	89 f5       	brne	.+98     	; 0x1028 <Pwm_Start+0x146>
     fc6:	0d c0       	rjmp	.+26     	; 0xfe2 <Pwm_Start+0x100>
     fc8:	24 30       	cpi	r18, 0x04	; 4
     fca:	11 f1       	breq	.+68     	; 0x1010 <Pwm_Start+0x12e>
     fcc:	24 30       	cpi	r18, 0x04	; 4
     fce:	d0 f0       	brcs	.+52     	; 0x1004 <Pwm_Start+0x122>
     fd0:	25 30       	cpi	r18, 0x05	; 5
     fd2:	51 f5       	brne	.+84     	; 0x1028 <Pwm_Start+0x146>
     fd4:	23 c0       	rjmp	.+70     	; 0x101c <Pwm_Start+0x13a>
{
  case PWM_PRESCALER_NO:
  {
    switch(Channel)
     fd6:	88 23       	and	r24, r24
     fd8:	39 f5       	brne	.+78     	; 0x1028 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B |= PWM_PRESCALER_NO_CONFIG;
     fda:	85 b5       	in	r24, 0x25	; 37
     fdc:	81 60       	ori	r24, 0x01	; 1
     fde:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     fe0:	25 c0       	rjmp	.+74     	; 0x102c <Pwm_Start+0x14a>
  }


  case PWM_PRESCALER_8:
  {
    switch(Channel)
     fe2:	88 23       	and	r24, r24
     fe4:	09 f5       	brne	.+66     	; 0x1028 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_8_CONFIG;
     fe6:	85 b5       	in	r24, 0x25	; 37
     fe8:	82 60       	ori	r24, 0x02	; 2
     fea:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     fec:	1f c0       	rjmp	.+62     	; 0x102c <Pwm_Start+0x14a>
    break;
  }

  case PWM_PRESCALER_32:
  {
    switch(Channel)
     fee:	83 30       	cpi	r24, 0x03	; 3
     ff0:	d9 f4       	brne	.+54     	; 0x1028 <Pwm_Start+0x146>
    {
      case PWM_CH2:
      {TCCR2|=PWM_PRESCALER_32_CONFIG_T2;
     ff2:	e0 eb       	ldi	r30, 0xB0	; 176
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	91 81       	ldd	r25, Z+1	; 0x01
     ffa:	83 60       	ori	r24, 0x03	; 3
     ffc:	91 83       	std	Z+1, r25	; 0x01
     ffe:	80 83       	st	Z, r24
      Ret=E_OK;
      }
      break;
  */
      default:
      Ret=E_NOK;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	2f c0       	rjmp	.+94     	; 0x1062 <Pwm_Start+0x180>
    break;
  }

  case PWM_PRESCALER_64:
  {
    switch(Channel)
    1004:	88 23       	and	r24, r24
    1006:	81 f4       	brne	.+32     	; 0x1028 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_64_CONFIG;
    1008:	85 b5       	in	r24, 0x25	; 37
    100a:	83 60       	ori	r24, 0x03	; 3
    100c:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
    100e:	0e c0       	rjmp	.+28     	; 0x102c <Pwm_Start+0x14a>
    break;
  }

  case PWM_PRESCALER_256:
  {
    switch(Channel)
    1010:	88 23       	and	r24, r24
    1012:	51 f4       	brne	.+20     	; 0x1028 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_64_CONFIG;
    1014:	85 b5       	in	r24, 0x25	; 37
    1016:	83 60       	ori	r24, 0x03	; 3
    1018:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
    101a:	08 c0       	rjmp	.+16     	; 0x102c <Pwm_Start+0x14a>
  }

 
  case PWM_PRESCALER_1024:
  {
    switch(Channel)
    101c:	88 23       	and	r24, r24
    101e:	21 f4       	brne	.+8      	; 0x1028 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_1024_CONFIG;
    1020:	85 b5       	in	r24, 0x25	; 37
    1022:	85 60       	ori	r24, 0x05	; 5
    1024:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
    1026:	02 c0       	rjmp	.+4      	; 0x102c <Pwm_Start+0x14a>



}

switch(Channel)
    1028:	88 23       	and	r24, r24
    102a:	d1 f4       	brne	.+52     	; 0x1060 <Pwm_Start+0x17e>
    {
      case PWM_CH0:{
      pwm_time_on=MAX_HOLD;
      dutyReal=((float)Duty/(float)FULL_SPEED);
    102c:	69 2f       	mov	r22, r25
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	0e 94 96 0c 	call	0x192c	; 0x192c <__floatunsisf>
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	48 ec       	ldi	r20, 0xC8	; 200
    103e:	52 e4       	ldi	r21, 0x42	; 66
    1040:	0e 94 02 0c 	call	0x1804	; 0x1804 <__divsf3>
      pwm_time_on=(float)pwm_time_on*dutyReal;
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	4f e7       	ldi	r20, 0x7F	; 127
    104a:	53 e4       	ldi	r21, 0x43	; 67
    104c:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__mulsf3>
    1050:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__fixunssfsi>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
      OCR0=pwm_time_on;
    1058:	98 bd       	out	0x28, r25	; 40
    105a:	87 bd       	out	0x27, r24	; 39
      Ret=E_OK;
    105c:	80 e0       	ldi	r24, 0x00	; 0
      break;
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <Pwm_Start+0x180>
      Ret=E_OK;
      }
      break;
  */
      default:
      Ret=E_NOK;
    1060:	81 e0       	ldi	r24, 0x01	; 1
      break;
    }
sgl_is_started=1;
    1062:	91 e0       	ldi	r25, 0x01	; 1
    1064:	90 93 46 01 	sts	0x0146, r25
return Ret;
}
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	08 95       	ret

0000106e <Pwm_Update>:


ERROR_STATUS Pwm_Update(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
uint8_t Ret=0;
if (sgl_is_started == 1)
    106e:	90 91 46 01 	lds	r25, 0x0146
    1072:	91 30       	cpi	r25, 0x01	; 1
    1074:	21 f4       	brne	.+8      	; 0x107e <Pwm_Update+0x10>
{
  Pwm_Start( Channel,Duty,Frequncy);
    1076:	0e 94 71 07 	call	0xee2	; 0xee2 <Pwm_Start>
Ret=E_OK;
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	08 95       	ret
}else{Ret=E_NOK;}
    107e:	81 e0       	ldi	r24, 0x01	; 1


return Ret;
}
    1080:	08 95       	ret

00001082 <Pwm_Stop>:
/*********************************************************************************/

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
uint8_t Ret=0;
switch(Channel)
    1082:	83 30       	cpi	r24, 0x03	; 3
    1084:	18 f4       	brcc	.+6      	; 0x108c <Pwm_Stop+0xa>
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	60 f4       	brcc	.+24     	; 0x10a2 <Pwm_Stop+0x20>
    108a:	03 c0       	rjmp	.+6      	; 0x1092 <Pwm_Stop+0x10>
    108c:	83 30       	cpi	r24, 0x03	; 3
    108e:	d1 f4       	brne	.+52     	; 0x10c4 <Pwm_Stop+0x42>
    1090:	0f c0       	rjmp	.+30     	; 0x10b0 <Pwm_Stop+0x2e>
{
  case PWM_CH0:
  TCCR0 &=TIMER_STOPT02;
    1092:	84 b5       	in	r24, 0x24	; 36
    1094:	95 b5       	in	r25, 0x25	; 37
    1096:	88 7f       	andi	r24, 0xF8	; 248
    1098:	90 70       	andi	r25, 0x00	; 0
    109a:	95 bd       	out	0x25, r25	; 37
    109c:	84 bd       	out	0x24, r24	; 36
  Ret=E_OK;
    109e:	80 e0       	ldi	r24, 0x00	; 0
  break;
    10a0:	08 95       	ret

  case PWM_CH1A:
  case PWM_CH1B:
  TCCR0 &=TIMER_STOPT1;
    10a2:	84 b5       	in	r24, 0x24	; 36
    10a4:	95 b5       	in	r25, 0x25	; 37
    10a6:	98 7f       	andi	r25, 0xF8	; 248
    10a8:	95 bd       	out	0x25, r25	; 37
    10aa:	84 bd       	out	0x24, r24	; 36
  Ret=E_OK;
    10ac:	80 e0       	ldi	r24, 0x00	; 0
  break;
    10ae:	08 95       	ret


  case PWM_CH2:
  TCCR2 &=TIMER_STOPT02;
    10b0:	e0 eb       	ldi	r30, 0xB0	; 176
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	91 81       	ldd	r25, Z+1	; 0x01
    10b8:	88 7f       	andi	r24, 0xF8	; 248
    10ba:	90 70       	andi	r25, 0x00	; 0
    10bc:	91 83       	std	Z+1, r25	; 0x01
    10be:	80 83       	st	Z, r24
  Ret=E_OK;
    10c0:	80 e0       	ldi	r24, 0x00	; 0
  break;
    10c2:	08 95       	ret
  default:
  Ret=E_NOK;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
  break;
}

return Ret;
}
    10c6:	08 95       	ret

000010c8 <speaker_init>:


ERROR_STATUS speaker_init(void)
{
  uint8_t ret =E_OK;
  	ret=DIO_init(&speaker_Configuration_0);
    10c8:	83 e0       	ldi	r24, 0x03	; 3
    10ca:	91 e0       	ldi	r25, 0x01	; 1
    10cc:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_init>
  return ret;
}
    10d0:	08 95       	ret

000010d2 <speaker_start_sm>:

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
  static uint16_t counter=0;
  if (timer2_interrupt_raised)
    10d2:	90 91 4b 01 	lds	r25, 0x014B
    10d6:	99 23       	and	r25, r25
    10d8:	51 f0       	breq	.+20     	; 0x10ee <speaker_start_sm+0x1c>
  {
	  counter++;
    10da:	20 91 47 01 	lds	r18, 0x0147
    10de:	30 91 48 01 	lds	r19, 0x0148
    10e2:	2f 5f       	subi	r18, 0xFF	; 255
    10e4:	3f 4f       	sbci	r19, 0xFF	; 255
    10e6:	30 93 48 01 	sts	0x0148, r19
    10ea:	20 93 47 01 	sts	0x0147, r18
  }
switch (state) {
    10ee:	83 30       	cpi	r24, 0x03	; 3
    10f0:	c9 f1       	breq	.+114    	; 0x1164 <speaker_start_sm+0x92>
    10f2:	84 30       	cpi	r24, 0x04	; 4
    10f4:	28 f4       	brcc	.+10     	; 0x1100 <speaker_start_sm+0x2e>
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	99 f0       	breq	.+38     	; 0x1120 <speaker_start_sm+0x4e>
    10fa:	82 30       	cpi	r24, 0x02	; 2
    10fc:	10 f5       	brcc	.+68     	; 0x1142 <speaker_start_sm+0x70>
    10fe:	09 c0       	rjmp	.+18     	; 0x1112 <speaker_start_sm+0x40>
    1100:	85 30       	cpi	r24, 0x05	; 5
    1102:	09 f4       	brne	.+2      	; 0x1106 <speaker_start_sm+0x34>
    1104:	50 c0       	rjmp	.+160    	; 0x11a6 <speaker_start_sm+0xd4>
    1106:	85 30       	cpi	r24, 0x05	; 5
    1108:	f0 f1       	brcs	.+124    	; 0x1186 <speaker_start_sm+0xb4>
    110a:	86 30       	cpi	r24, 0x06	; 6
    110c:	09 f0       	breq	.+2      	; 0x1110 <speaker_start_sm+0x3e>
    110e:	6b c0       	rjmp	.+214    	; 0x11e6 <speaker_start_sm+0x114>
    1110:	5a c0       	rjmp	.+180    	; 0x11c6 <speaker_start_sm+0xf4>
  case SPEAKER_STOP:
  DIO_Write(GPIOC,BIT3,LOW);
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	68 e0       	ldi	r22, 0x08	; 8
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    111c:	80 e0       	ldi	r24, 0x00	; 0
	  counter++;
  }
switch (state) {
  case SPEAKER_STOP:
  DIO_Write(GPIOC,BIT3,LOW);
  break;
    111e:	08 95       	ret
  case SPEAKER_TWO_M:
  if(counter==100){
    1120:	80 91 47 01 	lds	r24, 0x0147
    1124:	90 91 48 01 	lds	r25, 0x0148
    1128:	84 36       	cpi	r24, 0x64	; 100
    112a:	91 05       	cpc	r25, r1
    112c:	09 f0       	breq	.+2      	; 0x1130 <speaker_start_sm+0x5e>
    112e:	5d c0       	rjmp	.+186    	; 0x11ea <speaker_start_sm+0x118>
  counter=0;
    1130:	10 92 48 01 	sts	0x0148, r1
    1134:	10 92 47 01 	sts	0x0147, r1
  ret=DIO_Toggle(GPIOC,BIT3);
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	68 e0       	ldi	r22, 0x08	; 8
    113c:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    1140:	08 95       	ret
}
  break;
  case SPEAKER_ONE_HALF_M:
  if(counter==50){
    1142:	80 91 47 01 	lds	r24, 0x0147
    1146:	90 91 48 01 	lds	r25, 0x0148
    114a:	82 33       	cpi	r24, 0x32	; 50
    114c:	91 05       	cpc	r25, r1
    114e:	09 f0       	breq	.+2      	; 0x1152 <speaker_start_sm+0x80>
    1150:	4e c0       	rjmp	.+156    	; 0x11ee <speaker_start_sm+0x11c>
  counter=0;
    1152:	10 92 48 01 	sts	0x0148, r1
    1156:	10 92 47 01 	sts	0x0147, r1
  ret=DIO_Toggle(GPIOC,BIT3);
    115a:	82 e0       	ldi	r24, 0x02	; 2
    115c:	68 e0       	ldi	r22, 0x08	; 8
    115e:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    1162:	08 95       	ret
}
  break;
  case SPEAKER_ONE_M:
  if(counter==25){
    1164:	80 91 47 01 	lds	r24, 0x0147
    1168:	90 91 48 01 	lds	r25, 0x0148
    116c:	89 31       	cpi	r24, 0x19	; 25
    116e:	91 05       	cpc	r25, r1
    1170:	09 f0       	breq	.+2      	; 0x1174 <speaker_start_sm+0xa2>
    1172:	3f c0       	rjmp	.+126    	; 0x11f2 <speaker_start_sm+0x120>
  counter=0;
    1174:	10 92 48 01 	sts	0x0148, r1
    1178:	10 92 47 01 	sts	0x0147, r1
  ret=DIO_Toggle(GPIOC,BIT3);
    117c:	82 e0       	ldi	r24, 0x02	; 2
    117e:	68 e0       	ldi	r22, 0x08	; 8
    1180:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    1184:	08 95       	ret
}
  break;
  case SPEAKER_HALF_M:
  if(counter==12){
    1186:	80 91 47 01 	lds	r24, 0x0147
    118a:	90 91 48 01 	lds	r25, 0x0148
    118e:	8c 30       	cpi	r24, 0x0C	; 12
    1190:	91 05       	cpc	r25, r1
    1192:	89 f5       	brne	.+98     	; 0x11f6 <speaker_start_sm+0x124>
  counter=0;
    1194:	10 92 48 01 	sts	0x0148, r1
    1198:	10 92 47 01 	sts	0x0147, r1
  ret=DIO_Toggle(GPIOC,BIT3);
    119c:	82 e0       	ldi	r24, 0x02	; 2
    119e:	68 e0       	ldi	r22, 0x08	; 8
    11a0:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    11a4:	08 95       	ret
}
  break;
  case SPEAKER_30_CM:
  if(counter==7){
    11a6:	80 91 47 01 	lds	r24, 0x0147
    11aa:	90 91 48 01 	lds	r25, 0x0148
    11ae:	87 30       	cpi	r24, 0x07	; 7
    11b0:	91 05       	cpc	r25, r1
    11b2:	19 f5       	brne	.+70     	; 0x11fa <speaker_start_sm+0x128>
  counter=0;
    11b4:	10 92 48 01 	sts	0x0148, r1
    11b8:	10 92 47 01 	sts	0x0147, r1
  ret=DIO_Toggle(GPIOC,BIT3);
    11bc:	82 e0       	ldi	r24, 0x02	; 2
    11be:	68 e0       	ldi	r22, 0x08	; 8
    11c0:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    11c4:	08 95       	ret
}
break;
  case SPEAKER_20_CM:
  if(counter==2){
    11c6:	80 91 47 01 	lds	r24, 0x0147
    11ca:	90 91 48 01 	lds	r25, 0x0148
    11ce:	82 30       	cpi	r24, 0x02	; 2
    11d0:	91 05       	cpc	r25, r1
    11d2:	a9 f4       	brne	.+42     	; 0x11fe <speaker_start_sm+0x12c>
  counter=0;
    11d4:	10 92 48 01 	sts	0x0148, r1
    11d8:	10 92 47 01 	sts	0x0147, r1
  ret=DIO_Toggle(GPIOC,BIT3);
    11dc:	82 e0       	ldi	r24, 0x02	; 2
    11de:	68 e0       	ldi	r22, 0x08	; 8
    11e0:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    11e4:	08 95       	ret
}
break;
  default:
ret=E_NOK;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	08 95       	ret
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	08 95       	ret
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	08 95       	ret
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	08 95       	ret
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	08 95       	ret
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	08 95       	ret
    11fe:	80 e0       	ldi	r24, 0x00	; 0
ret=E_NOK;
  break;
}

return ret;
}
    1200:	08 95       	ret

00001202 <timer0Set>:
}

}
void timer0Set(uint8_t u8_value)
{
TCNT0 =	u8_value;
    1202:	86 bd       	out	0x26, r24	; 38
}
    1204:	08 95       	ret

00001206 <timer0Read>:

uint8_t timer0Read(void)
{
	 return TCNT0;
    1206:	86 b5       	in	r24, 0x26	; 38
}
    1208:	08 95       	ret

0000120a <timer0Start>:
Depending on prescaler	x     X    X

*/
void timer0Start(void)
{
	 TCCR0 &= (0xF8);
    120a:	84 b5       	in	r24, 0x24	; 36
    120c:	95 b5       	in	r25, 0x25	; 37
    120e:	88 7f       	andi	r24, 0xF8	; 248
    1210:	90 70       	andi	r25, 0x00	; 0
    1212:	95 bd       	out	0x25, r25	; 37
    1214:	84 bd       	out	0x24, r24	; 36
	 TCCR0 |= Prescaler_Value;
    1216:	24 b5       	in	r18, 0x24	; 36
    1218:	35 b5       	in	r19, 0x25	; 37
    121a:	80 91 52 01 	lds	r24, 0x0152
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	82 2b       	or	r24, r18
    1222:	93 2b       	or	r25, r19
    1224:	95 bd       	out	0x25, r25	; 37
    1226:	84 bd       	out	0x24, r24	; 36
}
    1228:	08 95       	ret

0000122a <timer0Stop>:
						      0     0    0
*/
void timer0Stop(void)
 {

TCCR0 &= (0xF8);
    122a:	84 b5       	in	r24, 0x24	; 36
    122c:	95 b5       	in	r25, 0x25	; 37
    122e:	88 7f       	andi	r24, 0xF8	; 248
    1230:	90 70       	andi	r25, 0x00	; 0
    1232:	95 bd       	out	0x25, r25	; 37
    1234:	84 bd       	out	0x24, r24	; 36

 }
    1236:	08 95       	ret

00001238 <timer0Init>:
uint8_t u8g_T1_Prescaler=0;
volatile uint8_t pwm_time_on=0,flag=0;
volatile uint8_t timer2_interrupt_raised = 0;
volatile uint16_t timer2_interrupt_counter =0;
void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal,uint8_t u8_initialValue, uint8_t u8_outputCompare,En_timer0Interrupt_t en_interruptMask)
{
    1238:	ef 92       	push	r14
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
if(en_prescal == T0_NO_CLOCK)
    123e:	44 23       	and	r20, r20
    1240:	19 f4       	brne	.+6      	; 0x1248 <timer0Init+0x10>
{/*
if there is no clock the timer will be disabled
*/
timer0Stop();
    1242:	0e 94 15 09 	call	0x122a	; 0x122a <timer0Stop>
    1246:	5d c0       	rjmp	.+186    	; 0x1302 <timer0Init+0xca>
}
else
{
TCCR0 |= en_mode|en_prescal;
    1248:	e4 b5       	in	r30, 0x24	; 36
    124a:	f5 b5       	in	r31, 0x25	; 37
    124c:	84 2b       	or	r24, r20
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	8e 2b       	or	r24, r30
    1252:	9f 2b       	or	r25, r31
    1254:	95 bd       	out	0x25, r25	; 37
    1256:	84 bd       	out	0x24, r24	; 36
Prescaler_Value=en_prescal;
    1258:	40 93 52 01 	sts	0x0152, r20
TCNT0 = u8_initialValue;
    125c:	26 bd       	out	0x26, r18	; 38
switch(en_OC0){
    125e:	60 31       	cpi	r22, 0x10	; 16
    1260:	89 f0       	breq	.+34     	; 0x1284 <timer0Init+0x4c>
    1262:	61 31       	cpi	r22, 0x11	; 17
    1264:	18 f4       	brcc	.+6      	; 0x126c <timer0Init+0x34>
    1266:	66 23       	and	r22, r22
    1268:	31 f0       	breq	.+12     	; 0x1276 <timer0Init+0x3e>
    126a:	1d c0       	rjmp	.+58     	; 0x12a6 <timer0Init+0x6e>
    126c:	60 32       	cpi	r22, 0x20	; 32
    126e:	81 f0       	breq	.+32     	; 0x1290 <timer0Init+0x58>
    1270:	60 33       	cpi	r22, 0x30	; 48
    1272:	c9 f4       	brne	.+50     	; 0x12a6 <timer0Init+0x6e>
    1274:	13 c0       	rjmp	.+38     	; 0x129c <timer0Init+0x64>
	case  T0_OC0_DIS:
	{
	TCCR0 &= 0xCF;
    1276:	84 b5       	in	r24, 0x24	; 36
    1278:	95 b5       	in	r25, 0x25	; 37
    127a:	8f 7c       	andi	r24, 0xCF	; 207
    127c:	90 70       	andi	r25, 0x00	; 0
    127e:	95 bd       	out	0x25, r25	; 37
    1280:	84 bd       	out	0x24, r24	; 36
		break;
    1282:	11 c0       	rjmp	.+34     	; 0x12a6 <timer0Init+0x6e>
	}
	case T0_OC0_TOGGLE:
	{
		TCCR0|=T0_OC0_TOGGLE;
    1284:	84 b5       	in	r24, 0x24	; 36
    1286:	95 b5       	in	r25, 0x25	; 37
    1288:	80 61       	ori	r24, 0x10	; 16
    128a:	95 bd       	out	0x25, r25	; 37
    128c:	84 bd       	out	0x24, r24	; 36
		break;
    128e:	0b c0       	rjmp	.+22     	; 0x12a6 <timer0Init+0x6e>
	}
	case  T0_OC0_CLEAR:
	{
	TCCR0 |= T0_OC0_CLEAR;
    1290:	84 b5       	in	r24, 0x24	; 36
    1292:	95 b5       	in	r25, 0x25	; 37
    1294:	80 62       	ori	r24, 0x20	; 32
    1296:	95 bd       	out	0x25, r25	; 37
    1298:	84 bd       	out	0x24, r24	; 36

		break;
    129a:	05 c0       	rjmp	.+10     	; 0x12a6 <timer0Init+0x6e>
	}
	case T0_OC0_SET:
	{
		TCCR0 |=T0_OC0_SET;
    129c:	84 b5       	in	r24, 0x24	; 36
    129e:	95 b5       	in	r25, 0x25	; 37
    12a0:	80 63       	ori	r24, 0x30	; 48
    12a2:	95 bd       	out	0x25, r25	; 37
    12a4:	84 bd       	out	0x24, r24	; 36
		break;
	}

}
OCR0  =u8_outputCompare;
    12a6:	10 e0       	ldi	r17, 0x00	; 0
    12a8:	18 bd       	out	0x28, r17	; 40
    12aa:	07 bd       	out	0x27, r16	; 39
switch(en_interruptMask){
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	e8 16       	cp	r14, r24
    12b0:	79 f0       	breq	.+30     	; 0x12d0 <timer0Init+0x98>
    12b2:	e8 16       	cp	r14, r24
    12b4:	20 f0       	brcs	.+8      	; 0x12be <timer0Init+0x86>
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	e8 16       	cp	r14, r24
    12ba:	19 f5       	brne	.+70     	; 0x1302 <timer0Init+0xca>
    12bc:	14 c0       	rjmp	.+40     	; 0x12e6 <timer0Init+0xae>
case  T0_POLLING:{
pooling=0;
    12be:	10 92 51 01 	sts	0x0151, r1
G_interrupt_Disable();
    12c2:	0e 94 bd 02 	call	0x57a	; 0x57a <G_interrupt_Disable>
TIMSK0 &= T0_POLLING;
    12c6:	ee e6       	ldi	r30, 0x6E	; 110
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	10 82       	st	Z, r1
break;
    12ce:	19 c0       	rjmp	.+50     	; 0x1302 <timer0Init+0xca>
}
case T0_INTERRUPT_NORMAL :
{pooling=1;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	80 93 51 01 	sts	0x0151, r24
G_interrupt_Enable();
    12d6:	0e 94 a2 02 	call	0x544	; 0x544 <G_interrupt_Enable>
TIMSK0 |= T0_INTERRUPT_NORMAL;
    12da:	ee e6       	ldi	r30, 0x6E	; 110
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	81 60       	ori	r24, 0x01	; 1
    12e2:	80 83       	st	Z, r24
break;
    12e4:	0e c0       	rjmp	.+28     	; 0x1302 <timer0Init+0xca>
}
case T0_INTERRUPT_CMP:
{pooling=1;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	80 93 51 01 	sts	0x0151, r24
//G_interrupt_Enable();
SET_BIT(SREG,7);
    12ec:	8f b7       	in	r24, 0x3f	; 63
    12ee:	80 68       	ori	r24, 0x80	; 128
    12f0:	8f bf       	out	0x3f, r24	; 63
TIMSK0 |= T0_INTERRUPT_NORMAL;
    12f2:	ee e6       	ldi	r30, 0x6E	; 110
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	81 60       	ori	r24, 0x01	; 1
    12fa:	80 83       	st	Z, r24
TIMSK0 |=T0_INTERRUPT_CMP;
    12fc:	80 81       	ld	r24, Z
    12fe:	82 60       	ori	r24, 0x02	; 2
    1300:	80 83       	st	Z, r24
}
}

}

}
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	ef 90       	pop	r14
    1308:	08 95       	ret

0000130a <timer0DelayMs>:
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
    130a:	ac 01       	movw	r20, r24
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	41 15       	cp	r20, r1
    1312:	51 05       	cpc	r21, r1
    1314:	61 05       	cpc	r22, r1
    1316:	71 05       	cpc	r23, r1
    1318:	71 f0       	breq	.+28     	; 0x1336 <timer0DelayMs+0x2c>
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	dc 01       	movw	r26, r24
{
	while ((TIFR0&0x01)==0);
    1320:	a8 9b       	sbis	0x15, 0	; 21
    1322:	fe cf       	rjmp	.-4      	; 0x1320 <timer0DelayMs+0x16>
	TIFR0 |=0x01;
    1324:	a8 9a       	sbi	0x15, 0	; 21
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
    1326:	01 96       	adiw	r24, 0x01	; 1
    1328:	a1 1d       	adc	r26, r1
    132a:	b1 1d       	adc	r27, r1
    132c:	84 17       	cp	r24, r20
    132e:	95 07       	cpc	r25, r21
    1330:	a6 07       	cpc	r26, r22
    1332:	b7 07       	cpc	r27, r23
    1334:	a8 f3       	brcs	.-22     	; 0x1320 <timer0DelayMs+0x16>
    1336:	08 95       	ret

00001338 <timer0DelayUs>:
 at pooling _no prescaling
 240at TCNT0

 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	a1 05       	cpc	r26, r1
    1340:	b1 05       	cpc	r27, r1
    1342:	31 f0       	breq	.+12     	; 0x1350 <timer0DelayUs+0x18>
	{
	timer0Set(240);
    1344:	80 ef       	ldi	r24, 0xF0	; 240
    1346:	0e 94 01 09 	call	0x1202	; 0x1202 <timer0Set>
	while(timer0Read()<=255);
    134a:	0e 94 03 09 	call	0x1206	; 0x1206 <timer0Read>
    134e:	fd cf       	rjmp	.-6      	; 0x134a <timer0DelayUs+0x12>
	//while(u32_ovf_counter <= (8*u32_delay_in_us/1000));
	}
	TIFR0 |=(1<<TOV0);/*Clear the flag*/
    1350:	a8 9a       	sbi	0x15, 0	; 21
}/*1*/
    1352:	08 95       	ret

00001354 <timer0SwPWM>:
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    1354:	cf 92       	push	r12
    1356:	df 92       	push	r13
    1358:	ef 92       	push	r14
    135a:	ff 92       	push	r15
    135c:	cf 93       	push	r28
    135e:	c8 2f       	mov	r28, r24
float dutyReal;
pwm_time_on=MAX_HOLD;
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	80 93 4d 01 	sts	0x014D, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
    1366:	60 91 4d 01 	lds	r22, 0x014D
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 96 0c 	call	0x192c	; 0x192c <__floatunsisf>
    1374:	6b 01       	movw	r12, r22
    1376:	7c 01       	movw	r14, r24
}/*1*/
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
    1378:	6c 2f       	mov	r22, r28
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 96 0c 	call	0x192c	; 0x192c <__floatunsisf>
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	48 ec       	ldi	r20, 0xC8	; 200
    138a:	52 e4       	ldi	r21, 0x42	; 66
    138c:	0e 94 02 0c 	call	0x1804	; 0x1804 <__divsf3>
    1390:	9b 01       	movw	r18, r22
    1392:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
    1394:	c7 01       	movw	r24, r14
    1396:	b6 01       	movw	r22, r12
    1398:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__mulsf3>
    139c:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__fixunssfsi>
    13a0:	60 93 4d 01 	sts	0x014D, r22
switch(pooling)
    13a4:	80 91 51 01 	lds	r24, 0x0151
    13a8:	88 23       	and	r24, r24
    13aa:	19 f0       	breq	.+6      	; 0x13b2 <timer0SwPWM+0x5e>
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	09 f5       	brne	.+66     	; 0x13f2 <timer0SwPWM+0x9e>
    13b0:	19 c0       	rjmp	.+50     	; 0x13e4 <timer0SwPWM+0x90>
{
	case 0:
	{
	timer0Start();
    13b2:	0e 94 05 09 	call	0x120a	; 0x120a <timer0Start>
	timer0Set(pwm_time_on);
    13b6:	80 91 4d 01 	lds	r24, 0x014D
    13ba:	0e 94 01 09 	call	0x1202	; 0x1202 <timer0Set>
	//freq 50KHZ is the Max frequency possible
	while ((TIFR0 &0x01)==0);
    13be:	a8 9b       	sbis	0x15, 0	; 21
    13c0:	fe cf       	rjmp	.-4      	; 0x13be <timer0SwPWM+0x6a>
	TIFR0 |=0x01;
    13c2:	a8 9a       	sbi	0x15, 0	; 21
	PORTC_DATA |=0xff;
    13c4:	88 b1       	in	r24, 0x08	; 8
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	88 b9       	out	0x08, r24	; 8
	timer0Start();
    13ca:	0e 94 05 09 	call	0x120a	; 0x120a <timer0Start>
	timer0Set(MAX_HOLD-pwm_time_on);
    13ce:	80 91 4d 01 	lds	r24, 0x014D
    13d2:	80 95       	com	r24
    13d4:	0e 94 01 09 	call	0x1202	; 0x1202 <timer0Set>
	//freq
	while ((TIFR0 & 0x01)==0);
    13d8:	a8 9b       	sbis	0x15, 0	; 21
    13da:	fe cf       	rjmp	.-4      	; 0x13d8 <timer0SwPWM+0x84>
	TIFR0 |=0x01;
    13dc:	a8 9a       	sbi	0x15, 0	; 21
	PORTC_DATA &=0x00;
    13de:	88 b1       	in	r24, 0x08	; 8
    13e0:	18 b8       	out	0x08, r1	; 8

break;
    13e2:	07 c0       	rjmp	.+14     	; 0x13f2 <timer0SwPWM+0x9e>
}
case 1:
{
timer0Start();
    13e4:	0e 94 05 09 	call	0x120a	; 0x120a <timer0Start>
OCR0=pwm_time_on;
    13e8:	80 91 4d 01 	lds	r24, 0x014D
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	98 bd       	out	0x28, r25	; 40
    13f0:	87 bd       	out	0x27, r24	; 39
break;
}

}

}
    13f2:	cf 91       	pop	r28
    13f4:	ff 90       	pop	r15
    13f6:	ef 90       	pop	r14
    13f8:	df 90       	pop	r13
    13fa:	cf 90       	pop	r12
    13fc:	08 95       	ret

000013fe <Timer_interrupt_COMP_routine>:



void Timer_interrupt_COMP_routine(void)
{
	PORTD_DATA ^=0xff;
    13fe:	8b b1       	in	r24, 0x0b	; 11
    1400:	80 95       	com	r24
    1402:	8b b9       	out	0x0b, r24	; 11

}
    1404:	08 95       	ret

00001406 <timer1Set>:
	}

*/
void timer1Set(uint16_t u16_value)
{
TCNT1=u16_value;
    1406:	90 93 85 00 	sts	0x0085, r25
    140a:	80 93 84 00 	sts	0x0084, r24
}
    140e:	08 95       	ret

00001410 <timer1Read>:
 * Description:
 * @return TCNT1
 */
uint16_t timer1Read(void)
{
return TCNT1;
    1410:	80 91 84 00 	lds	r24, 0x0084
    1414:	90 91 85 00 	lds	r25, 0x0085
}
    1418:	08 95       	ret

0000141a <timer1Start>:
 * Description:
 * @param
 */
void timer1Start(void)
{
TCCR1B |=u8g_T1_Prescaler;
    141a:	e1 e8       	ldi	r30, 0x81	; 129
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	90 81       	ld	r25, Z
    1420:	80 91 4e 01 	lds	r24, 0x014E
    1424:	89 2b       	or	r24, r25
    1426:	80 83       	st	Z, r24
}
    1428:	08 95       	ret

0000142a <timer1Stop>:
 * Description:
 * @param
 */
void timer1Stop(void)
{
TCCR1B &=0xfff8;
    142a:	e1 e8       	ldi	r30, 0x81	; 129
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	88 7f       	andi	r24, 0xF8	; 248
    1432:	80 83       	st	Z, r24
/*Keep all sittings as it is and put zeros in cs10,cs11,cs12*/
}
    1434:	08 95       	ret

00001436 <timer1DelayMs>:
 */
void timer1DelayMs(uint16_t u16_delay_in_ms)
{


}
    1436:	08 95       	ret

00001438 <timer1DelayUs>:
 */
void timer1DelayUs(uint32_t u32_delay_in_us)
{


}
    1438:	08 95       	ret

0000143a <timer1SwPWM>:
 */
void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{


}
    143a:	08 95       	ret

0000143c <timer2Set>:
* Description:
* @param value
*/
void timer2Set(uint8_t u8_a_value)
{
TCNT2=u8_a_value;
    143c:	80 93 b2 00 	sts	0x00B2, r24
}
    1440:	08 95       	ret

00001442 <timer2Read>:
/**
* Description:
* @return
*/
uint8_t timer2Read(void){
return TCNT2;
    1442:	80 91 b2 00 	lds	r24, 0x00B2
}
    1446:	08 95       	ret

00001448 <timer2Start>:
/**
* Description:
*/
void timer2Start(void)
{
TCCR2B &= 0xf8;
    1448:	e1 eb       	ldi	r30, 0xB1	; 177
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	88 7f       	andi	r24, 0xF8	; 248
    1450:	80 83       	st	Z, r24
TCCR2B |= Prescaler_Value2;
    1452:	90 81       	ld	r25, Z
    1454:	80 91 4f 01 	lds	r24, 0x014F
    1458:	89 2b       	or	r24, r25
    145a:	80 83       	st	Z, r24
}
    145c:	08 95       	ret

0000145e <timer2Stop>:
/**
* Description:
*/
void timer2Stop(void)
{
TCCR2B &= 0xf8;
    145e:	e1 eb       	ldi	r30, 0xB1	; 177
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	88 7f       	andi	r24, 0xF8	; 248
    1466:	80 83       	st	Z, r24

}
    1468:	08 95       	ret

0000146a <timer2Init>:


}

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC,En_timer2perscaler_t en_prescal2, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
    146a:	cf 92       	push	r12
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
if(en_prescal2 == T2_NO_CLOCK)
    1470:	44 23       	and	r20, r20
    1472:	19 f4       	brne	.+6      	; 0x147a <timer2Init+0x10>
{/*
if there is no clock the timer will be disabled
*/
timer2Stop();
    1474:	0e 94 2f 0a 	call	0x145e	; 0x145e <timer2Stop>
    1478:	5e c0       	rjmp	.+188    	; 0x1536 <timer2Init+0xcc>
}
else
{
TCCR2A |= en_mode;
    147a:	e0 eb       	ldi	r30, 0xB0	; 176
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	90 81       	ld	r25, Z
    1480:	89 2b       	or	r24, r25
    1482:	80 83       	st	Z, r24
TCCR2B |= en_prescal2 ;
    1484:	e1 eb       	ldi	r30, 0xB1	; 177
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	84 2b       	or	r24, r20
    148c:	80 83       	st	Z, r24

Prescaler_Value2=en_prescal2;
    148e:	40 93 4f 01 	sts	0x014F, r20
TCNT2 = u8_initialValue;
    1492:	20 93 b2 00 	sts	0x00B2, r18
switch(en_OC){
    1496:	60 34       	cpi	r22, 0x40	; 64
    1498:	81 f0       	breq	.+32     	; 0x14ba <timer2Init+0x50>
    149a:	61 34       	cpi	r22, 0x41	; 65
    149c:	18 f4       	brcc	.+6      	; 0x14a4 <timer2Init+0x3a>
    149e:	66 23       	and	r22, r22
    14a0:	31 f0       	breq	.+12     	; 0x14ae <timer2Init+0x44>
    14a2:	1c c0       	rjmp	.+56     	; 0x14dc <timer2Init+0x72>
    14a4:	60 38       	cpi	r22, 0x80	; 128
    14a6:	79 f0       	breq	.+30     	; 0x14c6 <timer2Init+0x5c>
    14a8:	60 3a       	cpi	r22, 0xA0	; 160
    14aa:	c1 f4       	brne	.+48     	; 0x14dc <timer2Init+0x72>
    14ac:	12 c0       	rjmp	.+36     	; 0x14d2 <timer2Init+0x68>
	case  T2_OC2A_DIS:
	{
	TCCR2B &= 0xFC;
    14ae:	e1 eb       	ldi	r30, 0xB1	; 177
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8c 7f       	andi	r24, 0xFC	; 252
    14b6:	80 83       	st	Z, r24
		break;
    14b8:	11 c0       	rjmp	.+34     	; 0x14dc <timer2Init+0x72>
	}
	case T2_OC2A_TOGGLE:
	{
		TCCR2A |=T2_OC2A_TOGGLE;
    14ba:	e0 eb       	ldi	r30, 0xB0	; 176
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	80 64       	ori	r24, 0x40	; 64
    14c2:	80 83       	st	Z, r24
		break;
    14c4:	0b c0       	rjmp	.+22     	; 0x14dc <timer2Init+0x72>
	}
	case  T2_OC2A_CLEAR:
	{
	TCCR2A |= T2_OC2A_CLEAR;
    14c6:	e0 eb       	ldi	r30, 0xB0	; 176
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	80 68       	ori	r24, 0x80	; 128
    14ce:	80 83       	st	Z, r24

		break;
    14d0:	05 c0       	rjmp	.+10     	; 0x14dc <timer2Init+0x72>
	}
	case T2_OC2A_SET:
	{
		TCCR2A |=T2_OC2A_SET;
    14d2:	e0 eb       	ldi	r30, 0xB0	; 176
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	80 6a       	ori	r24, 0xA0	; 160
    14da:	80 83       	st	Z, r24
		break;
	}

}
OCR2  = u8_outputCompare;
    14dc:	10 e0       	ldi	r17, 0x00	; 0
    14de:	10 93 b4 00 	sts	0x00B4, r17
    14e2:	00 93 b3 00 	sts	0x00B3, r16
switch(en_interruptMask){
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	c8 16       	cp	r12, r24
    14ea:	69 f0       	breq	.+26     	; 0x1506 <timer2Init+0x9c>
    14ec:	c8 16       	cp	r12, r24
    14ee:	20 f0       	brcs	.+8      	; 0x14f8 <timer2Init+0x8e>
    14f0:	83 e0       	ldi	r24, 0x03	; 3
    14f2:	c8 16       	cp	r12, r24
    14f4:	01 f5       	brne	.+64     	; 0x1536 <timer2Init+0xcc>
    14f6:	12 c0       	rjmp	.+36     	; 0x151c <timer2Init+0xb2>
case  T2_POLLING:
pooling_2=0;
    14f8:	10 92 50 01 	sts	0x0150, r1
TIMSK2 &= T2_POLLING;
    14fc:	e0 e7       	ldi	r30, 0x70	; 112
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	10 82       	st	Z, r1
break;
    1504:	18 c0       	rjmp	.+48     	; 0x1536 <timer2Init+0xcc>
case T2_INTERRUPT_NORMAL :
{
	pooling_2=1;
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	80 93 50 01 	sts	0x0150, r24
G_interrupt_Enable();
    150c:	0e 94 a2 02 	call	0x544	; 0x544 <G_interrupt_Enable>
TIMSK2 |= T2_INTERRUPT_NORMAL;
    1510:	e0 e7       	ldi	r30, 0x70	; 112
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	81 60       	ori	r24, 0x01	; 1
    1518:	80 83       	st	Z, r24

break;
    151a:	0d c0       	rjmp	.+26     	; 0x1536 <timer2Init+0xcc>
}
case T2_INTERRUPT_CMP:
{
	pooling_2=1;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	80 93 50 01 	sts	0x0150, r24
G_interrupt_Enable();
    1522:	0e 94 a2 02 	call	0x544	; 0x544 <G_interrupt_Enable>
//SET_BIT(SREG,7);
TIMSK2 |=T2_INTERRUPT_NORMAL;
    1526:	e0 e7       	ldi	r30, 0x70	; 112
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	81 60       	ori	r24, 0x01	; 1
    152e:	80 83       	st	Z, r24
TIMSK2 |=T2_INTERRUPT_CMP;
    1530:	80 81       	ld	r24, Z
    1532:	83 60       	ori	r24, 0x03	; 3
    1534:	80 83       	st	Z, r24

}



}
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	cf 90       	pop	r12
    153c:	08 95       	ret

0000153e <timer2DelayMs>:
		Prescalercounst=1;
		break;

		}*/
void timer2DelayMs(uint16_t u16_delay_in_ms)
{
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	00 d0       	rcall	.+0      	; 0x1548 <timer2DelayMs+0xa>
    1548:	00 d0       	rcall	.+0      	; 0x154a <timer2DelayMs+0xc>
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	8c 01       	movw	r16, r24
	volatile uint16_t count=0;
    1550:	1a 82       	std	Y+2, r1	; 0x02
    1552:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t Prescalercounst=0,set_timer2=0;
    1554:	1b 82       	std	Y+3, r1	; 0x03
    1556:	1c 82       	std	Y+4, r1	; 0x04
	switch(Prescaler_Value2)
    1558:	80 91 4f 01 	lds	r24, 0x014F
    155c:	84 30       	cpi	r24, 0x04	; 4
    155e:	f9 f0       	breq	.+62     	; 0x159e <timer2DelayMs+0x60>
    1560:	85 30       	cpi	r24, 0x05	; 5
    1562:	38 f4       	brcc	.+14     	; 0x1572 <timer2DelayMs+0x34>
    1564:	82 30       	cpi	r24, 0x02	; 2
    1566:	89 f0       	breq	.+34     	; 0x158a <timer2DelayMs+0x4c>
    1568:	83 30       	cpi	r24, 0x03	; 3
    156a:	a0 f4       	brcc	.+40     	; 0x1594 <timer2DelayMs+0x56>
    156c:	81 30       	cpi	r24, 0x01	; 1
    156e:	51 f5       	brne	.+84     	; 0x15c4 <timer2DelayMs+0x86>
    1570:	07 c0       	rjmp	.+14     	; 0x1580 <timer2DelayMs+0x42>
    1572:	86 30       	cpi	r24, 0x06	; 6
    1574:	f1 f0       	breq	.+60     	; 0x15b2 <timer2DelayMs+0x74>
    1576:	86 30       	cpi	r24, 0x06	; 6
    1578:	b8 f0       	brcs	.+46     	; 0x15a8 <timer2DelayMs+0x6a>
    157a:	87 30       	cpi	r24, 0x07	; 7
    157c:	19 f5       	brne	.+70     	; 0x15c4 <timer2DelayMs+0x86>
    157e:	1e c0       	rjmp	.+60     	; 0x15bc <timer2DelayMs+0x7e>
	{
		case T2_PRESCALER_NO:{
		Prescalercounst=58;
    1580:	8a e3       	ldi	r24, 0x3A	; 58
    1582:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=10;
    1584:	8a e0       	ldi	r24, 0x0A	; 10
    1586:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    1588:	1d c0       	rjmp	.+58     	; 0x15c4 <timer2DelayMs+0x86>
		case T2_PRESCALER_8:
		{Prescalercounst=8;
    158a:	88 e0       	ldi	r24, 0x08	; 8
    158c:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=12;
    158e:	8c e0       	ldi	r24, 0x0C	; 12
    1590:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    1592:	18 c0       	rjmp	.+48     	; 0x15c4 <timer2DelayMs+0x86>
		case T2_PRESCALER_32:
		{Prescalercounst=2;
    1594:	82 e0       	ldi	r24, 0x02	; 2
    1596:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=8;
    1598:	88 e0       	ldi	r24, 0x08	; 8
    159a:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    159c:	13 c0       	rjmp	.+38     	; 0x15c4 <timer2DelayMs+0x86>
		case T2_PRESCALER_64:
		{Prescalercounst=1;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=6;
    15a2:	86 e0       	ldi	r24, 0x06	; 6
    15a4:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    15a6:	0e c0       	rjmp	.+28     	; 0x15c4 <timer2DelayMs+0x86>
		case T2_PRESCALER_128:
		{Prescalercounst=1;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=131;
    15ac:	83 e8       	ldi	r24, 0x83	; 131
    15ae:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    15b0:	09 c0       	rjmp	.+18     	; 0x15c4 <timer2DelayMs+0x86>
		case T2_PRESCALER_256:
		{Prescalercounst=1;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=194;
    15b6:	82 ec       	ldi	r24, 0xC2	; 194
    15b8:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    15ba:	04 c0       	rjmp	.+8      	; 0x15c4 <timer2DelayMs+0x86>
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=240;
    15c0:	80 ef       	ldi	r24, 0xF0	; 240
    15c2:	8c 83       	std	Y+4, r24	; 0x04
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
    15c4:	1a 82       	std	Y+2, r1	; 0x02
    15c6:	19 82       	std	Y+1, r1	; 0x01
    15c8:	2b 81       	ldd	r18, Y+3	; 0x03
    15ca:	49 81       	ldd	r20, Y+1	; 0x01
    15cc:	5a 81       	ldd	r21, Y+2	; 0x02
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	02 9f       	mul	r16, r18
    15d2:	c0 01       	movw	r24, r0
    15d4:	03 9f       	mul	r16, r19
    15d6:	90 0d       	add	r25, r0
    15d8:	12 9f       	mul	r17, r18
    15da:	90 0d       	add	r25, r0
    15dc:	11 24       	eor	r1, r1
    15de:	48 17       	cp	r20, r24
    15e0:	59 07       	cpc	r21, r25
    15e2:	c8 f4       	brcc	.+50     	; 0x1616 <timer2DelayMs+0xd8>
	{
		timer2Set(set_timer2);//10 for no prescaler....12 for 8 prescaler .... 8 for 32 prescaler ....6 for prescaler 64 .....
    15e4:	8c 81       	ldd	r24, Y+4	; 0x04
    15e6:	0e 94 1e 0a 	call	0x143c	; 0x143c <timer2Set>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR2 & 0x01)==0);
    15ea:	b8 9b       	sbis	0x17, 0	; 23
    15ec:	fe cf       	rjmp	.-4      	; 0x15ea <timer2DelayMs+0xac>
		TIFR2 |=0x01;
    15ee:	b8 9a       	sbi	0x17, 0	; 23
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
		set_timer2=240;
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	9a 81       	ldd	r25, Y+2	; 0x02
    15f4:	01 96       	adiw	r24, 0x01	; 1
    15f6:	9a 83       	std	Y+2, r25	; 0x02
    15f8:	89 83       	std	Y+1, r24	; 0x01
    15fa:	2b 81       	ldd	r18, Y+3	; 0x03
    15fc:	49 81       	ldd	r20, Y+1	; 0x01
    15fe:	5a 81       	ldd	r21, Y+2	; 0x02
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	02 9f       	mul	r16, r18
    1604:	c0 01       	movw	r24, r0
    1606:	03 9f       	mul	r16, r19
    1608:	90 0d       	add	r25, r0
    160a:	12 9f       	mul	r17, r18
    160c:	90 0d       	add	r25, r0
    160e:	11 24       	eor	r1, r1
    1610:	48 17       	cp	r20, r24
    1612:	59 07       	cpc	r21, r25
    1614:	38 f3       	brcs	.-50     	; 0x15e4 <timer2DelayMs+0xa6>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR2 & 0x01)==0);
		TIFR2 |=0x01;

	}
}
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	1f 91       	pop	r17
    1624:	0f 91       	pop	r16
    1626:	08 95       	ret

00001628 <timer2DelayUs>:

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
    1628:	cf 92       	push	r12
    162a:	df 92       	push	r13
    162c:	ef 92       	push	r14
    162e:	ff 92       	push	r15
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	00 d0       	rcall	.+0      	; 0x1636 <timer2DelayUs+0xe>
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	6b 01       	movw	r12, r22
    163c:	7c 01       	movw	r14, r24
	volatile uint16_t count =0;
    163e:	1a 82       	std	Y+2, r1	; 0x02
    1640:	19 82       	std	Y+1, r1	; 0x01
	for (count=0;count<u16_delay_in_us;count++)
    1642:	1a 82       	std	Y+2, r1	; 0x02
    1644:	19 82       	std	Y+1, r1	; 0x01
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	9a 81       	ldd	r25, Y+2	; 0x02
    164a:	a0 e0       	ldi	r26, 0x00	; 0
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	8c 15       	cp	r24, r12
    1650:	9d 05       	cpc	r25, r13
    1652:	ae 05       	cpc	r26, r14
    1654:	bf 05       	cpc	r27, r15
    1656:	a0 f4       	brcc	.+40     	; 0x1680 <timer2DelayUs+0x58>
	{
		timer2Set(254);//254 for no prescaler
    1658:	8e ef       	ldi	r24, 0xFE	; 254
    165a:	0e 94 1e 0a 	call	0x143c	; 0x143c <timer2Set>
		while ((TIFR2 & 0x01)==0);
    165e:	b8 9b       	sbis	0x17, 0	; 23
    1660:	fe cf       	rjmp	.-4      	; 0x165e <timer2DelayUs+0x36>
		TIFR2 |=0x01;
    1662:	b8 9a       	sbi	0x17, 0	; 23

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
	volatile uint16_t count =0;
	for (count=0;count<u16_delay_in_us;count++)
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	9a 81       	ldd	r25, Y+2	; 0x02
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	9a 83       	std	Y+2, r25	; 0x02
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	9a 81       	ldd	r25, Y+2	; 0x02
    1672:	a0 e0       	ldi	r26, 0x00	; 0
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	8c 15       	cp	r24, r12
    1678:	9d 05       	cpc	r25, r13
    167a:	ae 05       	cpc	r26, r14
    167c:	bf 05       	cpc	r27, r15
    167e:	60 f3       	brcs	.-40     	; 0x1658 <timer2DelayUs+0x30>
		while ((TIFR2 & 0x01)==0);
		TIFR2 |=0x01;

	}

}
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	ff 90       	pop	r15
    168a:	ef 90       	pop	r14
    168c:	df 90       	pop	r13
    168e:	cf 90       	pop	r12
    1690:	08 95       	ret

00001692 <timer2SwPWM>:
/**
* Description:
* @param dutyCycle
*/
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    1692:	cf 92       	push	r12
    1694:	df 92       	push	r13
    1696:	ef 92       	push	r14
    1698:	ff 92       	push	r15
    169a:	cf 93       	push	r28
    169c:	c8 2f       	mov	r28, r24

float dutyReal;
pwm_time_on=MAX_HOLD;
    169e:	8f ef       	ldi	r24, 0xFF	; 255
    16a0:	80 93 4d 01 	sts	0x014D, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
    16a4:	60 91 4d 01 	lds	r22, 0x014D
    16a8:	70 e0       	ldi	r23, 0x00	; 0
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	0e 94 96 0c 	call	0x192c	; 0x192c <__floatunsisf>
    16b2:	6b 01       	movw	r12, r22
    16b4:	7c 01       	movw	r14, r24
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{

float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
    16b6:	6c 2f       	mov	r22, r28
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 96 0c 	call	0x192c	; 0x192c <__floatunsisf>
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	48 ec       	ldi	r20, 0xC8	; 200
    16c8:	52 e4       	ldi	r21, 0x42	; 66
    16ca:	0e 94 02 0c 	call	0x1804	; 0x1804 <__divsf3>
    16ce:	9b 01       	movw	r18, r22
    16d0:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
    16d2:	c7 01       	movw	r24, r14
    16d4:	b6 01       	movw	r22, r12
    16d6:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <__mulsf3>
    16da:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__fixunssfsi>
    16de:	60 93 4d 01 	sts	0x014D, r22
switch(pooling_2)
    16e2:	80 91 50 01 	lds	r24, 0x0150
    16e6:	88 23       	and	r24, r24
    16e8:	19 f0       	breq	.+6      	; 0x16f0 <timer2SwPWM+0x5e>
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	19 f5       	brne	.+70     	; 0x1734 <timer2SwPWM+0xa2>
    16ee:	19 c0       	rjmp	.+50     	; 0x1722 <timer2SwPWM+0x90>
{
	case 0:
	{
		timer2Start();
    16f0:	0e 94 24 0a 	call	0x1448	; 0x1448 <timer2Start>
		timer2Set(pwm_time_on);
    16f4:	80 91 4d 01 	lds	r24, 0x014D
    16f8:	0e 94 1e 0a 	call	0x143c	; 0x143c <timer2Set>
		//freq 50KHZ is the Max frequency possible
		while ((TIFR2 & 0x01)==0);
    16fc:	b8 9b       	sbis	0x17, 0	; 23
    16fe:	fe cf       	rjmp	.-4      	; 0x16fc <timer2SwPWM+0x6a>
		TIFR2 |=0x01;
    1700:	b8 9a       	sbi	0x17, 0	; 23
		PORTC_DATA |=0xff;
    1702:	88 b1       	in	r24, 0x08	; 8
    1704:	8f ef       	ldi	r24, 0xFF	; 255
    1706:	88 b9       	out	0x08, r24	; 8
		timer2Start();
    1708:	0e 94 24 0a 	call	0x1448	; 0x1448 <timer2Start>
		timer2Set(MAX_HOLD-pwm_time_on);
    170c:	80 91 4d 01 	lds	r24, 0x014D
    1710:	80 95       	com	r24
    1712:	0e 94 1e 0a 	call	0x143c	; 0x143c <timer2Set>
		//freq
		while ((TIFR2 & 0x01)==0);
    1716:	b8 9b       	sbis	0x17, 0	; 23
    1718:	fe cf       	rjmp	.-4      	; 0x1716 <timer2SwPWM+0x84>
		TIFR2 |=0x01;
    171a:	b8 9a       	sbi	0x17, 0	; 23
		PORTC_DATA &=0x00;
    171c:	88 b1       	in	r24, 0x08	; 8
    171e:	18 b8       	out	0x08, r1	; 8

		break;
    1720:	09 c0       	rjmp	.+18     	; 0x1734 <timer2SwPWM+0xa2>
	}
	case 1:
	{
		timer2Start();
    1722:	0e 94 24 0a 	call	0x1448	; 0x1448 <timer2Start>
		OCR2=pwm_time_on;
    1726:	80 91 4d 01 	lds	r24, 0x014D
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	90 93 b4 00 	sts	0x00B4, r25
    1730:	80 93 b3 00 	sts	0x00B3, r24
	}

}


}
    1734:	cf 91       	pop	r28
    1736:	ff 90       	pop	r15
    1738:	ef 90       	pop	r14
    173a:	df 90       	pop	r13
    173c:	cf 90       	pop	r12
    173e:	08 95       	ret

00001740 <Timer2_interrupt_COMP_routine>:
void Timer2_interrupt_COMP_routine(void)
{



}
    1740:	08 95       	ret

00001742 <Timer2_interrupt_routine>:
void Timer2_interrupt_routine(void)
{
timer2_interrupt_raised=1;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	80 93 4b 01 	sts	0x014B, r24
timer2_interrupt_counter++;
    1748:	80 91 49 01 	lds	r24, 0x0149
    174c:	90 91 4a 01 	lds	r25, 0x014A
    1750:	01 96       	adiw	r24, 0x01	; 1
    1752:	90 93 4a 01 	sts	0x014A, r25
    1756:	80 93 49 01 	sts	0x0149, r24
}
    175a:	08 95       	ret

0000175c <Us_Init>:
 *                                                                                                  *
 *                                                                                                  *
 ***************************************************************************************************/

ERROR_STATUS Us_Init(void)
{uint8_t Ret;
    175c:	cf 92       	push	r12
    175e:	ef 92       	push	r14
    1760:	0f 93       	push	r16
    1762:	cf 93       	push	r28
Ret=DIO_init(&US_Configuration);
    1764:	81 e2       	ldi	r24, 0x21	; 33
    1766:	91 e0       	ldi	r25, 0x01	; 1
    1768:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_init>
Ret=Icu_Init(&ICU_Configuration);
    176c:	8c e0       	ldi	r24, 0x0C	; 12
    176e:	91 e0       	ldi	r25, 0x01	; 1
    1770:	0e 94 a3 01 	call	0x346	; 0x346 <Icu_Init>
    1774:	c8 2f       	mov	r28, r24
timer2Init(T2_NORMAL_MODE,T2_OC2B_CLEAR,T2_PRESCALER_1024,0,0,0,T2_INTERRUPT_NORMAL);
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	60 e2       	ldi	r22, 0x20	; 32
    177a:	47 e0       	ldi	r20, 0x07	; 7
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	00 e0       	ldi	r16, 0x00	; 0
    1780:	ee 24       	eor	r14, r14
    1782:	cc 24       	eor	r12, r12
    1784:	c3 94       	inc	r12
    1786:	0e 94 35 0a 	call	0x146a	; 0x146a <timer2Init>
return Ret;
}
    178a:	8c 2f       	mov	r24, r28
    178c:	cf 91       	pop	r28
    178e:	0f 91       	pop	r16
    1790:	ef 90       	pop	r14
    1792:	cf 90       	pop	r12
    1794:	08 95       	ret

00001796 <Us_Trigger>:
ERROR_STATUS Us_Trigger(void)
{uint8_t Ret=0;
if(timer2_interrupt_raised){
    1796:	80 91 4b 01 	lds	r24, 0x014B
    179a:	88 23       	and	r24, r24
    179c:	99 f0       	breq	.+38     	; 0x17c4 <Us_Trigger+0x2e>
timer2_interrupt_raised=0;
    179e:	10 92 4b 01 	sts	0x014B, r1
Ret=DIO_Toggle(GPIOD,BIT1);
    17a2:	83 e0       	ldi	r24, 0x03	; 3
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	62 e0       	ldi	r22, 0x02	; 2
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    17ae:	82 e3       	ldi	r24, 0x32	; 50
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	01 97       	sbiw	r24, 0x01	; 1
for (int i=0;i<50;i++)
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <Us_Trigger+0x1c>
{;/*a pulse for 10 Micro seconds*/
}
Ret=DIO_Toggle(GPIOD,BIT1);
    17b6:	83 e0       	ldi	r24, 0x03	; 3
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	62 e0       	ldi	r22, 0x02	; 2
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    17c2:	08 95       	ret
Ret=Icu_Init(&ICU_Configuration);
timer2Init(T2_NORMAL_MODE,T2_OC2B_CLEAR,T2_PRESCALER_1024,0,0,0,T2_INTERRUPT_NORMAL);
return Ret;
}
ERROR_STATUS Us_Trigger(void)
{uint8_t Ret=0;
    17c4:	80 e0       	ldi	r24, 0x00	; 0
{;/*a pulse for 10 Micro seconds*/
}
Ret=DIO_Toggle(GPIOD,BIT1);
}
return Ret;
}
    17c6:	08 95       	ret

000017c8 <Us_GetDistance>:


ERROR_STATUS Us_GetDistance(uint16_t *Distance)
{uint8_t Ret=0;
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	cf 93       	push	r28
    17ce:	df 93       	push	r29
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <Us_GetDistance+0xa>
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <Us_GetDistance+0xc>
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	8c 01       	movw	r16, r24
	uint32_t u32l_Time;
	Ret=Icu_ReadTime(ICU_CH2,ICU_RISE_TO_FALL,&u32l_Time);
    17da:	82 e0       	ldi	r24, 0x02	; 2
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	ae 01       	movw	r20, r28
    17e0:	4f 5f       	subi	r20, 0xFF	; 255
    17e2:	5f 4f       	sbci	r21, 0xFF	; 255
    17e4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <Icu_ReadTime>
	*Distance=u32l_Time;
    17e8:	29 81       	ldd	r18, Y+1	; 0x01
    17ea:	3a 81       	ldd	r19, Y+2	; 0x02
    17ec:	f8 01       	movw	r30, r16
    17ee:	31 83       	std	Z+1, r19	; 0x01
    17f0:	20 83       	st	Z, r18
	return Ret;
}
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	1f 91       	pop	r17
    1800:	0f 91       	pop	r16
    1802:	08 95       	ret

00001804 <__divsf3>:
    1804:	0c d0       	rcall	.+24     	; 0x181e <__divsf3x>
    1806:	e6 c0       	rjmp	.+460    	; 0x19d4 <__fp_round>
    1808:	de d0       	rcall	.+444    	; 0x19c6 <__fp_pscB>
    180a:	40 f0       	brcs	.+16     	; 0x181c <__divsf3+0x18>
    180c:	d5 d0       	rcall	.+426    	; 0x19b8 <__fp_pscA>
    180e:	30 f0       	brcs	.+12     	; 0x181c <__divsf3+0x18>
    1810:	21 f4       	brne	.+8      	; 0x181a <__divsf3+0x16>
    1812:	5f 3f       	cpi	r21, 0xFF	; 255
    1814:	19 f0       	breq	.+6      	; 0x181c <__divsf3+0x18>
    1816:	c7 c0       	rjmp	.+398    	; 0x19a6 <__fp_inf>
    1818:	51 11       	cpse	r21, r1
    181a:	10 c1       	rjmp	.+544    	; 0x1a3c <__fp_szero>
    181c:	ca c0       	rjmp	.+404    	; 0x19b2 <__fp_nan>

0000181e <__divsf3x>:
    181e:	eb d0       	rcall	.+470    	; 0x19f6 <__fp_split3>
    1820:	98 f3       	brcs	.-26     	; 0x1808 <__divsf3+0x4>

00001822 <__divsf3_pse>:
    1822:	99 23       	and	r25, r25
    1824:	c9 f3       	breq	.-14     	; 0x1818 <__divsf3+0x14>
    1826:	55 23       	and	r21, r21
    1828:	b1 f3       	breq	.-20     	; 0x1816 <__divsf3+0x12>
    182a:	95 1b       	sub	r25, r21
    182c:	55 0b       	sbc	r21, r21
    182e:	bb 27       	eor	r27, r27
    1830:	aa 27       	eor	r26, r26
    1832:	62 17       	cp	r22, r18
    1834:	73 07       	cpc	r23, r19
    1836:	84 07       	cpc	r24, r20
    1838:	38 f0       	brcs	.+14     	; 0x1848 <__divsf3_pse+0x26>
    183a:	9f 5f       	subi	r25, 0xFF	; 255
    183c:	5f 4f       	sbci	r21, 0xFF	; 255
    183e:	22 0f       	add	r18, r18
    1840:	33 1f       	adc	r19, r19
    1842:	44 1f       	adc	r20, r20
    1844:	aa 1f       	adc	r26, r26
    1846:	a9 f3       	breq	.-22     	; 0x1832 <__divsf3_pse+0x10>
    1848:	33 d0       	rcall	.+102    	; 0x18b0 <__divsf3_pse+0x8e>
    184a:	0e 2e       	mov	r0, r30
    184c:	3a f0       	brmi	.+14     	; 0x185c <__divsf3_pse+0x3a>
    184e:	e0 e8       	ldi	r30, 0x80	; 128
    1850:	30 d0       	rcall	.+96     	; 0x18b2 <__divsf3_pse+0x90>
    1852:	91 50       	subi	r25, 0x01	; 1
    1854:	50 40       	sbci	r21, 0x00	; 0
    1856:	e6 95       	lsr	r30
    1858:	00 1c       	adc	r0, r0
    185a:	ca f7       	brpl	.-14     	; 0x184e <__divsf3_pse+0x2c>
    185c:	29 d0       	rcall	.+82     	; 0x18b0 <__divsf3_pse+0x8e>
    185e:	fe 2f       	mov	r31, r30
    1860:	27 d0       	rcall	.+78     	; 0x18b0 <__divsf3_pse+0x8e>
    1862:	66 0f       	add	r22, r22
    1864:	77 1f       	adc	r23, r23
    1866:	88 1f       	adc	r24, r24
    1868:	bb 1f       	adc	r27, r27
    186a:	26 17       	cp	r18, r22
    186c:	37 07       	cpc	r19, r23
    186e:	48 07       	cpc	r20, r24
    1870:	ab 07       	cpc	r26, r27
    1872:	b0 e8       	ldi	r27, 0x80	; 128
    1874:	09 f0       	breq	.+2      	; 0x1878 <__divsf3_pse+0x56>
    1876:	bb 0b       	sbc	r27, r27
    1878:	80 2d       	mov	r24, r0
    187a:	bf 01       	movw	r22, r30
    187c:	ff 27       	eor	r31, r31
    187e:	93 58       	subi	r25, 0x83	; 131
    1880:	5f 4f       	sbci	r21, 0xFF	; 255
    1882:	2a f0       	brmi	.+10     	; 0x188e <__divsf3_pse+0x6c>
    1884:	9e 3f       	cpi	r25, 0xFE	; 254
    1886:	51 05       	cpc	r21, r1
    1888:	68 f0       	brcs	.+26     	; 0x18a4 <__divsf3_pse+0x82>
    188a:	8d c0       	rjmp	.+282    	; 0x19a6 <__fp_inf>
    188c:	d7 c0       	rjmp	.+430    	; 0x1a3c <__fp_szero>
    188e:	5f 3f       	cpi	r21, 0xFF	; 255
    1890:	ec f3       	brlt	.-6      	; 0x188c <__divsf3_pse+0x6a>
    1892:	98 3e       	cpi	r25, 0xE8	; 232
    1894:	dc f3       	brlt	.-10     	; 0x188c <__divsf3_pse+0x6a>
    1896:	86 95       	lsr	r24
    1898:	77 95       	ror	r23
    189a:	67 95       	ror	r22
    189c:	b7 95       	ror	r27
    189e:	f7 95       	ror	r31
    18a0:	9f 5f       	subi	r25, 0xFF	; 255
    18a2:	c9 f7       	brne	.-14     	; 0x1896 <__divsf3_pse+0x74>
    18a4:	88 0f       	add	r24, r24
    18a6:	91 1d       	adc	r25, r1
    18a8:	96 95       	lsr	r25
    18aa:	87 95       	ror	r24
    18ac:	97 f9       	bld	r25, 7
    18ae:	08 95       	ret
    18b0:	e1 e0       	ldi	r30, 0x01	; 1
    18b2:	66 0f       	add	r22, r22
    18b4:	77 1f       	adc	r23, r23
    18b6:	88 1f       	adc	r24, r24
    18b8:	bb 1f       	adc	r27, r27
    18ba:	62 17       	cp	r22, r18
    18bc:	73 07       	cpc	r23, r19
    18be:	84 07       	cpc	r24, r20
    18c0:	ba 07       	cpc	r27, r26
    18c2:	20 f0       	brcs	.+8      	; 0x18cc <__divsf3_pse+0xaa>
    18c4:	62 1b       	sub	r22, r18
    18c6:	73 0b       	sbc	r23, r19
    18c8:	84 0b       	sbc	r24, r20
    18ca:	ba 0b       	sbc	r27, r26
    18cc:	ee 1f       	adc	r30, r30
    18ce:	88 f7       	brcc	.-30     	; 0x18b2 <__divsf3_pse+0x90>
    18d0:	e0 95       	com	r30
    18d2:	08 95       	ret

000018d4 <__fixunssfsi>:
    18d4:	98 d0       	rcall	.+304    	; 0x1a06 <__fp_splitA>
    18d6:	88 f0       	brcs	.+34     	; 0x18fa <__fixunssfsi+0x26>
    18d8:	9f 57       	subi	r25, 0x7F	; 127
    18da:	90 f0       	brcs	.+36     	; 0x1900 <__fixunssfsi+0x2c>
    18dc:	b9 2f       	mov	r27, r25
    18de:	99 27       	eor	r25, r25
    18e0:	b7 51       	subi	r27, 0x17	; 23
    18e2:	a0 f0       	brcs	.+40     	; 0x190c <__fixunssfsi+0x38>
    18e4:	d1 f0       	breq	.+52     	; 0x191a <__fixunssfsi+0x46>
    18e6:	66 0f       	add	r22, r22
    18e8:	77 1f       	adc	r23, r23
    18ea:	88 1f       	adc	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	1a f0       	brmi	.+6      	; 0x18f6 <__fixunssfsi+0x22>
    18f0:	ba 95       	dec	r27
    18f2:	c9 f7       	brne	.-14     	; 0x18e6 <__fixunssfsi+0x12>
    18f4:	12 c0       	rjmp	.+36     	; 0x191a <__fixunssfsi+0x46>
    18f6:	b1 30       	cpi	r27, 0x01	; 1
    18f8:	81 f0       	breq	.+32     	; 0x191a <__fixunssfsi+0x46>
    18fa:	9f d0       	rcall	.+318    	; 0x1a3a <__fp_zero>
    18fc:	b1 e0       	ldi	r27, 0x01	; 1
    18fe:	08 95       	ret
    1900:	9c c0       	rjmp	.+312    	; 0x1a3a <__fp_zero>
    1902:	67 2f       	mov	r22, r23
    1904:	78 2f       	mov	r23, r24
    1906:	88 27       	eor	r24, r24
    1908:	b8 5f       	subi	r27, 0xF8	; 248
    190a:	39 f0       	breq	.+14     	; 0x191a <__fixunssfsi+0x46>
    190c:	b9 3f       	cpi	r27, 0xF9	; 249
    190e:	cc f3       	brlt	.-14     	; 0x1902 <__fixunssfsi+0x2e>
    1910:	86 95       	lsr	r24
    1912:	77 95       	ror	r23
    1914:	67 95       	ror	r22
    1916:	b3 95       	inc	r27
    1918:	d9 f7       	brne	.-10     	; 0x1910 <__fixunssfsi+0x3c>
    191a:	3e f4       	brtc	.+14     	; 0x192a <__fixunssfsi+0x56>
    191c:	90 95       	com	r25
    191e:	80 95       	com	r24
    1920:	70 95       	com	r23
    1922:	61 95       	neg	r22
    1924:	7f 4f       	sbci	r23, 0xFF	; 255
    1926:	8f 4f       	sbci	r24, 0xFF	; 255
    1928:	9f 4f       	sbci	r25, 0xFF	; 255
    192a:	08 95       	ret

0000192c <__floatunsisf>:
    192c:	e8 94       	clt
    192e:	09 c0       	rjmp	.+18     	; 0x1942 <__floatsisf+0x12>

00001930 <__floatsisf>:
    1930:	97 fb       	bst	r25, 7
    1932:	3e f4       	brtc	.+14     	; 0x1942 <__floatsisf+0x12>
    1934:	90 95       	com	r25
    1936:	80 95       	com	r24
    1938:	70 95       	com	r23
    193a:	61 95       	neg	r22
    193c:	7f 4f       	sbci	r23, 0xFF	; 255
    193e:	8f 4f       	sbci	r24, 0xFF	; 255
    1940:	9f 4f       	sbci	r25, 0xFF	; 255
    1942:	99 23       	and	r25, r25
    1944:	a9 f0       	breq	.+42     	; 0x1970 <__floatsisf+0x40>
    1946:	f9 2f       	mov	r31, r25
    1948:	96 e9       	ldi	r25, 0x96	; 150
    194a:	bb 27       	eor	r27, r27
    194c:	93 95       	inc	r25
    194e:	f6 95       	lsr	r31
    1950:	87 95       	ror	r24
    1952:	77 95       	ror	r23
    1954:	67 95       	ror	r22
    1956:	b7 95       	ror	r27
    1958:	f1 11       	cpse	r31, r1
    195a:	f8 cf       	rjmp	.-16     	; 0x194c <__floatsisf+0x1c>
    195c:	fa f4       	brpl	.+62     	; 0x199c <__floatsisf+0x6c>
    195e:	bb 0f       	add	r27, r27
    1960:	11 f4       	brne	.+4      	; 0x1966 <__floatsisf+0x36>
    1962:	60 ff       	sbrs	r22, 0
    1964:	1b c0       	rjmp	.+54     	; 0x199c <__floatsisf+0x6c>
    1966:	6f 5f       	subi	r22, 0xFF	; 255
    1968:	7f 4f       	sbci	r23, 0xFF	; 255
    196a:	8f 4f       	sbci	r24, 0xFF	; 255
    196c:	9f 4f       	sbci	r25, 0xFF	; 255
    196e:	16 c0       	rjmp	.+44     	; 0x199c <__floatsisf+0x6c>
    1970:	88 23       	and	r24, r24
    1972:	11 f0       	breq	.+4      	; 0x1978 <__floatsisf+0x48>
    1974:	96 e9       	ldi	r25, 0x96	; 150
    1976:	11 c0       	rjmp	.+34     	; 0x199a <__floatsisf+0x6a>
    1978:	77 23       	and	r23, r23
    197a:	21 f0       	breq	.+8      	; 0x1984 <__floatsisf+0x54>
    197c:	9e e8       	ldi	r25, 0x8E	; 142
    197e:	87 2f       	mov	r24, r23
    1980:	76 2f       	mov	r23, r22
    1982:	05 c0       	rjmp	.+10     	; 0x198e <__floatsisf+0x5e>
    1984:	66 23       	and	r22, r22
    1986:	71 f0       	breq	.+28     	; 0x19a4 <__floatsisf+0x74>
    1988:	96 e8       	ldi	r25, 0x86	; 134
    198a:	86 2f       	mov	r24, r22
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	2a f0       	brmi	.+10     	; 0x199c <__floatsisf+0x6c>
    1992:	9a 95       	dec	r25
    1994:	66 0f       	add	r22, r22
    1996:	77 1f       	adc	r23, r23
    1998:	88 1f       	adc	r24, r24
    199a:	da f7       	brpl	.-10     	; 0x1992 <__floatsisf+0x62>
    199c:	88 0f       	add	r24, r24
    199e:	96 95       	lsr	r25
    19a0:	87 95       	ror	r24
    19a2:	97 f9       	bld	r25, 7
    19a4:	08 95       	ret

000019a6 <__fp_inf>:
    19a6:	97 f9       	bld	r25, 7
    19a8:	9f 67       	ori	r25, 0x7F	; 127
    19aa:	80 e8       	ldi	r24, 0x80	; 128
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	60 e0       	ldi	r22, 0x00	; 0
    19b0:	08 95       	ret

000019b2 <__fp_nan>:
    19b2:	9f ef       	ldi	r25, 0xFF	; 255
    19b4:	80 ec       	ldi	r24, 0xC0	; 192
    19b6:	08 95       	ret

000019b8 <__fp_pscA>:
    19b8:	00 24       	eor	r0, r0
    19ba:	0a 94       	dec	r0
    19bc:	16 16       	cp	r1, r22
    19be:	17 06       	cpc	r1, r23
    19c0:	18 06       	cpc	r1, r24
    19c2:	09 06       	cpc	r0, r25
    19c4:	08 95       	ret

000019c6 <__fp_pscB>:
    19c6:	00 24       	eor	r0, r0
    19c8:	0a 94       	dec	r0
    19ca:	12 16       	cp	r1, r18
    19cc:	13 06       	cpc	r1, r19
    19ce:	14 06       	cpc	r1, r20
    19d0:	05 06       	cpc	r0, r21
    19d2:	08 95       	ret

000019d4 <__fp_round>:
    19d4:	09 2e       	mov	r0, r25
    19d6:	03 94       	inc	r0
    19d8:	00 0c       	add	r0, r0
    19da:	11 f4       	brne	.+4      	; 0x19e0 <__fp_round+0xc>
    19dc:	88 23       	and	r24, r24
    19de:	52 f0       	brmi	.+20     	; 0x19f4 <__fp_round+0x20>
    19e0:	bb 0f       	add	r27, r27
    19e2:	40 f4       	brcc	.+16     	; 0x19f4 <__fp_round+0x20>
    19e4:	bf 2b       	or	r27, r31
    19e6:	11 f4       	brne	.+4      	; 0x19ec <__fp_round+0x18>
    19e8:	60 ff       	sbrs	r22, 0
    19ea:	04 c0       	rjmp	.+8      	; 0x19f4 <__fp_round+0x20>
    19ec:	6f 5f       	subi	r22, 0xFF	; 255
    19ee:	7f 4f       	sbci	r23, 0xFF	; 255
    19f0:	8f 4f       	sbci	r24, 0xFF	; 255
    19f2:	9f 4f       	sbci	r25, 0xFF	; 255
    19f4:	08 95       	ret

000019f6 <__fp_split3>:
    19f6:	57 fd       	sbrc	r21, 7
    19f8:	90 58       	subi	r25, 0x80	; 128
    19fa:	44 0f       	add	r20, r20
    19fc:	55 1f       	adc	r21, r21
    19fe:	59 f0       	breq	.+22     	; 0x1a16 <__fp_splitA+0x10>
    1a00:	5f 3f       	cpi	r21, 0xFF	; 255
    1a02:	71 f0       	breq	.+28     	; 0x1a20 <__fp_splitA+0x1a>
    1a04:	47 95       	ror	r20

00001a06 <__fp_splitA>:
    1a06:	88 0f       	add	r24, r24
    1a08:	97 fb       	bst	r25, 7
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	61 f0       	breq	.+24     	; 0x1a26 <__fp_splitA+0x20>
    1a0e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a10:	79 f0       	breq	.+30     	; 0x1a30 <__fp_splitA+0x2a>
    1a12:	87 95       	ror	r24
    1a14:	08 95       	ret
    1a16:	12 16       	cp	r1, r18
    1a18:	13 06       	cpc	r1, r19
    1a1a:	14 06       	cpc	r1, r20
    1a1c:	55 1f       	adc	r21, r21
    1a1e:	f2 cf       	rjmp	.-28     	; 0x1a04 <__fp_split3+0xe>
    1a20:	46 95       	lsr	r20
    1a22:	f1 df       	rcall	.-30     	; 0x1a06 <__fp_splitA>
    1a24:	08 c0       	rjmp	.+16     	; 0x1a36 <__fp_splitA+0x30>
    1a26:	16 16       	cp	r1, r22
    1a28:	17 06       	cpc	r1, r23
    1a2a:	18 06       	cpc	r1, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	f1 cf       	rjmp	.-30     	; 0x1a12 <__fp_splitA+0xc>
    1a30:	86 95       	lsr	r24
    1a32:	71 05       	cpc	r23, r1
    1a34:	61 05       	cpc	r22, r1
    1a36:	08 94       	sec
    1a38:	08 95       	ret

00001a3a <__fp_zero>:
    1a3a:	e8 94       	clt

00001a3c <__fp_szero>:
    1a3c:	bb 27       	eor	r27, r27
    1a3e:	66 27       	eor	r22, r22
    1a40:	77 27       	eor	r23, r23
    1a42:	cb 01       	movw	r24, r22
    1a44:	97 f9       	bld	r25, 7
    1a46:	08 95       	ret

00001a48 <__mulsf3>:
    1a48:	0b d0       	rcall	.+22     	; 0x1a60 <__mulsf3x>
    1a4a:	c4 cf       	rjmp	.-120    	; 0x19d4 <__fp_round>
    1a4c:	b5 df       	rcall	.-150    	; 0x19b8 <__fp_pscA>
    1a4e:	28 f0       	brcs	.+10     	; 0x1a5a <__mulsf3+0x12>
    1a50:	ba df       	rcall	.-140    	; 0x19c6 <__fp_pscB>
    1a52:	18 f0       	brcs	.+6      	; 0x1a5a <__mulsf3+0x12>
    1a54:	95 23       	and	r25, r21
    1a56:	09 f0       	breq	.+2      	; 0x1a5a <__mulsf3+0x12>
    1a58:	a6 cf       	rjmp	.-180    	; 0x19a6 <__fp_inf>
    1a5a:	ab cf       	rjmp	.-170    	; 0x19b2 <__fp_nan>
    1a5c:	11 24       	eor	r1, r1
    1a5e:	ee cf       	rjmp	.-36     	; 0x1a3c <__fp_szero>

00001a60 <__mulsf3x>:
    1a60:	ca df       	rcall	.-108    	; 0x19f6 <__fp_split3>
    1a62:	a0 f3       	brcs	.-24     	; 0x1a4c <__mulsf3+0x4>

00001a64 <__mulsf3_pse>:
    1a64:	95 9f       	mul	r25, r21
    1a66:	d1 f3       	breq	.-12     	; 0x1a5c <__mulsf3+0x14>
    1a68:	95 0f       	add	r25, r21
    1a6a:	50 e0       	ldi	r21, 0x00	; 0
    1a6c:	55 1f       	adc	r21, r21
    1a6e:	62 9f       	mul	r22, r18
    1a70:	f0 01       	movw	r30, r0
    1a72:	72 9f       	mul	r23, r18
    1a74:	bb 27       	eor	r27, r27
    1a76:	f0 0d       	add	r31, r0
    1a78:	b1 1d       	adc	r27, r1
    1a7a:	63 9f       	mul	r22, r19
    1a7c:	aa 27       	eor	r26, r26
    1a7e:	f0 0d       	add	r31, r0
    1a80:	b1 1d       	adc	r27, r1
    1a82:	aa 1f       	adc	r26, r26
    1a84:	64 9f       	mul	r22, r20
    1a86:	66 27       	eor	r22, r22
    1a88:	b0 0d       	add	r27, r0
    1a8a:	a1 1d       	adc	r26, r1
    1a8c:	66 1f       	adc	r22, r22
    1a8e:	82 9f       	mul	r24, r18
    1a90:	22 27       	eor	r18, r18
    1a92:	b0 0d       	add	r27, r0
    1a94:	a1 1d       	adc	r26, r1
    1a96:	62 1f       	adc	r22, r18
    1a98:	73 9f       	mul	r23, r19
    1a9a:	b0 0d       	add	r27, r0
    1a9c:	a1 1d       	adc	r26, r1
    1a9e:	62 1f       	adc	r22, r18
    1aa0:	83 9f       	mul	r24, r19
    1aa2:	a0 0d       	add	r26, r0
    1aa4:	61 1d       	adc	r22, r1
    1aa6:	22 1f       	adc	r18, r18
    1aa8:	74 9f       	mul	r23, r20
    1aaa:	33 27       	eor	r19, r19
    1aac:	a0 0d       	add	r26, r0
    1aae:	61 1d       	adc	r22, r1
    1ab0:	23 1f       	adc	r18, r19
    1ab2:	84 9f       	mul	r24, r20
    1ab4:	60 0d       	add	r22, r0
    1ab6:	21 1d       	adc	r18, r1
    1ab8:	82 2f       	mov	r24, r18
    1aba:	76 2f       	mov	r23, r22
    1abc:	6a 2f       	mov	r22, r26
    1abe:	11 24       	eor	r1, r1
    1ac0:	9f 57       	subi	r25, 0x7F	; 127
    1ac2:	50 40       	sbci	r21, 0x00	; 0
    1ac4:	8a f0       	brmi	.+34     	; 0x1ae8 <__mulsf3_pse+0x84>
    1ac6:	e1 f0       	breq	.+56     	; 0x1b00 <__mulsf3_pse+0x9c>
    1ac8:	88 23       	and	r24, r24
    1aca:	4a f0       	brmi	.+18     	; 0x1ade <__mulsf3_pse+0x7a>
    1acc:	ee 0f       	add	r30, r30
    1ace:	ff 1f       	adc	r31, r31
    1ad0:	bb 1f       	adc	r27, r27
    1ad2:	66 1f       	adc	r22, r22
    1ad4:	77 1f       	adc	r23, r23
    1ad6:	88 1f       	adc	r24, r24
    1ad8:	91 50       	subi	r25, 0x01	; 1
    1ada:	50 40       	sbci	r21, 0x00	; 0
    1adc:	a9 f7       	brne	.-22     	; 0x1ac8 <__mulsf3_pse+0x64>
    1ade:	9e 3f       	cpi	r25, 0xFE	; 254
    1ae0:	51 05       	cpc	r21, r1
    1ae2:	70 f0       	brcs	.+28     	; 0x1b00 <__mulsf3_pse+0x9c>
    1ae4:	60 cf       	rjmp	.-320    	; 0x19a6 <__fp_inf>
    1ae6:	aa cf       	rjmp	.-172    	; 0x1a3c <__fp_szero>
    1ae8:	5f 3f       	cpi	r21, 0xFF	; 255
    1aea:	ec f3       	brlt	.-6      	; 0x1ae6 <__mulsf3_pse+0x82>
    1aec:	98 3e       	cpi	r25, 0xE8	; 232
    1aee:	dc f3       	brlt	.-10     	; 0x1ae6 <__mulsf3_pse+0x82>
    1af0:	86 95       	lsr	r24
    1af2:	77 95       	ror	r23
    1af4:	67 95       	ror	r22
    1af6:	b7 95       	ror	r27
    1af8:	f7 95       	ror	r31
    1afa:	e7 95       	ror	r30
    1afc:	9f 5f       	subi	r25, 0xFF	; 255
    1afe:	c1 f7       	brne	.-16     	; 0x1af0 <__mulsf3_pse+0x8c>
    1b00:	fe 2b       	or	r31, r30
    1b02:	88 0f       	add	r24, r24
    1b04:	91 1d       	adc	r25, r1
    1b06:	96 95       	lsr	r25
    1b08:	87 95       	ror	r24
    1b0a:	97 f9       	bld	r25, 7
    1b0c:	08 95       	ret

00001b0e <_exit>:
    1b0e:	f8 94       	cli

00001b10 <__stop_program>:
    1b10:	ff cf       	rjmp	.-2      	; 0x1b10 <__stop_program>
