
pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00001bcc  00001c60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000057  00800124  00800124  00001c84  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00001c84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00003850  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00003dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002356  00000000  00000000  00003f78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b35  00000000  00000000  000062ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a93  00000000  00000000  00006e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000db4  00000000  00000000  00007898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d40  00000000  00000000  0000864c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002169  00000000  00000000  0000938c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__vector_1>
       8:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__vector_2>
       c:	0c 94 04 03 	jmp	0x608	; 0x608 <__vector_3>
      10:	0c 94 2b 03 	jmp	0x656	; 0x656 <__vector_4>
      14:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__vector_5>
      18:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__vector_6>
      1c:	0c 94 a0 03 	jmp	0x740	; 0x740 <__vector_7>
      20:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__vector_8>
      24:	0c 94 ee 03 	jmp	0x7dc	; 0x7dc <__vector_9>
      28:	0c 94 15 04 	jmp	0x82a	; 0x82a <__vector_10>
      2c:	0c 94 3c 04 	jmp	0x878	; 0x878 <__vector_11>
      30:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__vector_12>
      34:	0c 94 8a 04 	jmp	0x914	; 0x914 <__vector_13>
      38:	0c 94 b1 04 	jmp	0x962	; 0x962 <__vector_14>
      3c:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__vector_15>
      40:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__vector_16>
      44:	0c 94 26 05 	jmp	0xa4c	; 0xa4c <__vector_17>
      48:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__vector_18>
      4c:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__vector_19>
      50:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__vector_20>
      54:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__vector_21>
      58:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__vector_22>
      5c:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__vector_23>
      60:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__vector_24>
      64:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__vector_25>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ec       	ldi	r30, 0xCC	; 204
      7c:	fb e1       	ldi	r31, 0x1B	; 27
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 32       	cpi	r26, 0x24	; 36
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a4 e2       	ldi	r26, 0x24	; 36
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 37       	cpi	r26, 0x7B	; 123
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 85 06 	call	0xd0a	; 0xd0a <main>
      9e:	0c 94 e4 0d 	jmp	0x1bc8	; 0x1bc8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DIO_init>:
*/


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
      a6:	fc 01       	movw	r30, r24
  uint8_t RET=0;
  static uint8_t Multiple_init=0;
  if (DIO_info == NULL)
      a8:	00 97       	sbiw	r24, 0x00	; 0
      aa:	09 f4       	brne	.+2      	; 0xae <DIO_init+0x8>
      ac:	5e c0       	rjmp	.+188    	; 0x16a <DIO_init+0xc4>
  {
    RET=NULL_PTR+DIO_MODULE;

  }else{
    u8_is_init=1;
      ae:	81 e0       	ldi	r24, 0x01	; 1
      b0:	80 93 24 01 	sts	0x0124, r24
    switch(DIO_info->dir)
      b4:	82 81       	ldd	r24, Z+2	; 0x02
      b6:	88 23       	and	r24, r24
      b8:	21 f0       	breq	.+8      	; 0xc2 <DIO_init+0x1c>
      ba:	8f 3f       	cpi	r24, 0xFF	; 255
      bc:	09 f0       	breq	.+2      	; 0xc0 <DIO_init+0x1a>
      be:	57 c0       	rjmp	.+174    	; 0x16e <DIO_init+0xc8>
      c0:	2c c0       	rjmp	.+88     	; 0x11a <DIO_init+0x74>
    {
    case INPUT:
      switch(DIO_info ->GPIO)
      c2:	80 81       	ld	r24, Z
      c4:	82 30       	cpi	r24, 0x02	; 2
      c6:	89 f0       	breq	.+34     	; 0xea <DIO_init+0x44>
      c8:	83 30       	cpi	r24, 0x03	; 3
      ca:	d9 f0       	breq	.+54     	; 0x102 <DIO_init+0x5c>
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	09 f0       	breq	.+2      	; 0xd2 <DIO_init+0x2c>
      d0:	50 c0       	rjmp	.+160    	; 0x172 <DIO_init+0xcc>
      {
      case GPIOB:
        PORTB_DIR &=(~(DIO_info->pins)) ;
      d2:	94 b1       	in	r25, 0x04	; 4
      d4:	81 81       	ldd	r24, Z+1	; 0x01
      d6:	80 95       	com	r24
      d8:	89 23       	and	r24, r25
      da:	84 b9       	out	0x04, r24	; 4
        Multiple_init+=2;
      dc:	80 91 25 01 	lds	r24, 0x0125
      e0:	8e 5f       	subi	r24, 0xFE	; 254
      e2:	80 93 25 01 	sts	0x0125, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
      e6:	80 e0       	ldi	r24, 0x00	; 0
      switch(DIO_info ->GPIO)
      {
      case GPIOB:
        PORTB_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=2;
        break;
      e8:	08 95       	ret
      case GPIOC:
        PORTC_DIR &=(~(DIO_info->pins)) ;
      ea:	97 b1       	in	r25, 0x07	; 7
      ec:	81 81       	ldd	r24, Z+1	; 0x01
      ee:	80 95       	com	r24
      f0:	89 23       	and	r24, r25
      f2:	87 b9       	out	0x07, r24	; 7
        Multiple_init+=3;
      f4:	80 91 25 01 	lds	r24, 0x0125
      f8:	8d 5f       	subi	r24, 0xFD	; 253
      fa:	80 93 25 01 	sts	0x0125, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
      fe:	80 e0       	ldi	r24, 0x00	; 0
        Multiple_init+=2;
        break;
      case GPIOC:
        PORTC_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=3;
        break;
     100:	08 95       	ret
      case GPIOD:
        PORTD_DIR &=(~(DIO_info->pins)) ;
     102:	9a b1       	in	r25, 0x0a	; 10
     104:	81 81       	ldd	r24, Z+1	; 0x01
     106:	80 95       	com	r24
     108:	89 23       	and	r24, r25
     10a:	8a b9       	out	0x0a, r24	; 10
        Multiple_init+=4;
     10c:	80 91 25 01 	lds	r24, 0x0125
     110:	8c 5f       	subi	r24, 0xFC	; 252
     112:	80 93 25 01 	sts	0x0125, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     116:	80 e0       	ldi	r24, 0x00	; 0
        Multiple_init+=3;
        break;
      case GPIOD:
        PORTD_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=4;
        break;
     118:	08 95       	ret
        break;
      }
      break;

      case OUTPUT:
        switch(DIO_info ->GPIO)
     11a:	80 81       	ld	r24, Z
     11c:	82 30       	cpi	r24, 0x02	; 2
     11e:	79 f0       	breq	.+30     	; 0x13e <DIO_init+0x98>
     120:	83 30       	cpi	r24, 0x03	; 3
     122:	c1 f0       	breq	.+48     	; 0x154 <DIO_init+0xae>
     124:	81 30       	cpi	r24, 0x01	; 1
     126:	39 f5       	brne	.+78     	; 0x176 <DIO_init+0xd0>
        {
        case GPIOB:
          PORTB_DIR |=(DIO_info->pins)  ;
     128:	94 b1       	in	r25, 0x04	; 4
     12a:	81 81       	ldd	r24, Z+1	; 0x01
     12c:	89 2b       	or	r24, r25
     12e:	84 b9       	out	0x04, r24	; 4
          Multiple_init+=2;
     130:	80 91 25 01 	lds	r24, 0x0125
     134:	8e 5f       	subi	r24, 0xFE	; 254
     136:	80 93 25 01 	sts	0x0125, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     13a:	80 e0       	ldi	r24, 0x00	; 0
        switch(DIO_info ->GPIO)
        {
        case GPIOB:
          PORTB_DIR |=(DIO_info->pins)  ;
          Multiple_init+=2;
          break;
     13c:	08 95       	ret
        case GPIOC:
          PORTC_DIR |=(DIO_info->pins)  ;
     13e:	97 b1       	in	r25, 0x07	; 7
     140:	81 81       	ldd	r24, Z+1	; 0x01
     142:	89 2b       	or	r24, r25
     144:	87 b9       	out	0x07, r24	; 7
          Multiple_init+=3;
     146:	80 91 25 01 	lds	r24, 0x0125
     14a:	8d 5f       	subi	r24, 0xFD	; 253
     14c:	80 93 25 01 	sts	0x0125, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     150:	80 e0       	ldi	r24, 0x00	; 0
          Multiple_init+=2;
          break;
        case GPIOC:
          PORTC_DIR |=(DIO_info->pins)  ;
          Multiple_init+=3;
          break;
     152:	08 95       	ret
        case GPIOD:
          PORTD_DIR |=(DIO_info->pins)  ;
     154:	9a b1       	in	r25, 0x0a	; 10
     156:	81 81       	ldd	r24, Z+1	; 0x01
     158:	89 2b       	or	r24, r25
     15a:	8a b9       	out	0x0a, r24	; 10
          Multiple_init+=4;
     15c:	80 91 25 01 	lds	r24, 0x0125
     160:	8c 5f       	subi	r24, 0xFC	; 252
     162:	80 93 25 01 	sts	0x0125, r24


static uint8_t u8_is_init=0;
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{
  uint8_t RET=0;
     166:	80 e0       	ldi	r24, 0x00	; 0
          Multiple_init+=3;
          break;
        case GPIOD:
          PORTD_DIR |=(DIO_info->pins)  ;
          Multiple_init+=4;
          break;
     168:	08 95       	ret
{
  uint8_t RET=0;
  static uint8_t Multiple_init=0;
  if (DIO_info == NULL)
  {
    RET=NULL_PTR+DIO_MODULE;
     16a:	86 e1       	ldi	r24, 0x16	; 22
     16c:	08 95       	ret
          break;
        }

        break;
        default:
          RET=E_NOK+DIO_MODULE+INVALID_DIRECTION;
     16e:	83 e2       	ldi	r24, 0x23	; 35
     170:	08 95       	ret
      case GPIOD:
        PORTD_DIR &=(~(DIO_info->pins)) ;
        Multiple_init+=4;
        break;
      default:
        RET=E_NOK+DIO_MODULE+INVALID_PORT;
     172:	85 e2       	ldi	r24, 0x25	; 37
     174:	08 95       	ret
        case GPIOD:
          PORTD_DIR |=(DIO_info->pins)  ;
          Multiple_init+=4;
          break;
        default:
          RET=E_NOK+DIO_MODULE+INVALID_PORT;
     176:	85 e2       	ldi	r24, 0x25	; 37
    }


  }
  return RET;
}
     178:	08 95       	ret

0000017a <DIO_deinit>:

void DIO_deinit(void){
  u8_is_init=0;
     17a:	10 92 24 01 	sts	0x0124, r1
}
     17e:	08 95       	ret

00000180 <DIO_is_init>:

void DIO_is_init(void){
  u8_is_init=1;
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	80 93 24 01 	sts	0x0124, r24
}
     186:	08 95       	ret

00000188 <DIO_Write>:

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;

if(u8_is_init==1){
     188:	90 91 24 01 	lds	r25, 0x0124
     18c:	91 30       	cpi	r25, 0x01	; 1
     18e:	91 f5       	brne	.+100    	; 0x1f4 <DIO_Write+0x6c>
switch(value){
     190:	44 23       	and	r20, r20
     192:	19 f0       	breq	.+6      	; 0x19a <DIO_Write+0x12>
     194:	4f 3f       	cpi	r20, 0xFF	; 255
     196:	81 f5       	brne	.+96     	; 0x1f8 <DIO_Write+0x70>
     198:	18 c0       	rjmp	.+48     	; 0x1ca <DIO_Write+0x42>
case LOW:
{
  switch (GPIO)
     19a:	82 30       	cpi	r24, 0x02	; 2
     19c:	51 f0       	breq	.+20     	; 0x1b2 <DIO_Write+0x2a>
     19e:	83 30       	cpi	r24, 0x03	; 3
     1a0:	71 f0       	breq	.+28     	; 0x1be <DIO_Write+0x36>
     1a2:	81 30       	cpi	r24, 0x01	; 1
     1a4:	59 f5       	brne	.+86     	; 0x1fc <DIO_Write+0x74>
  {
  case GPIOB:
    PORTB_DATA &= ~(pins);
     1a6:	85 b1       	in	r24, 0x05	; 5
     1a8:	60 95       	com	r22
     1aa:	68 23       	and	r22, r24
     1ac:	65 b9       	out	0x05, r22	; 5
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1ae:	84 e1       	ldi	r24, 0x14	; 20
{
  switch (GPIO)
  {
  case GPIOB:
    PORTB_DATA &= ~(pins);
    break;
     1b0:	08 95       	ret
  case GPIOC:
    PORTC_DATA &= ~(pins);
     1b2:	88 b1       	in	r24, 0x08	; 8
     1b4:	60 95       	com	r22
     1b6:	68 23       	and	r22, r24
     1b8:	68 b9       	out	0x08, r22	; 8
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1ba:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    PORTB_DATA &= ~(pins);
    break;
  case GPIOC:
    PORTC_DATA &= ~(pins);
    break;
     1bc:	08 95       	ret
  case GPIOD:
    PORTD_DATA &= ~(pins);
     1be:	8b b1       	in	r24, 0x0b	; 11
     1c0:	60 95       	com	r22
     1c2:	68 23       	and	r22, r24
     1c4:	6b b9       	out	0x0b, r22	; 11
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1c6:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    PORTC_DATA &= ~(pins);
    break;
  case GPIOD:
    PORTD_DATA &= ~(pins);
    break;
     1c8:	08 95       	ret
    break;
  }
  break;
}
case HIGH:{
  switch (GPIO)
     1ca:	82 30       	cpi	r24, 0x02	; 2
     1cc:	49 f0       	breq	.+18     	; 0x1e0 <DIO_Write+0x58>
     1ce:	83 30       	cpi	r24, 0x03	; 3
     1d0:	61 f0       	breq	.+24     	; 0x1ea <DIO_Write+0x62>
     1d2:	81 30       	cpi	r24, 0x01	; 1
     1d4:	a9 f4       	brne	.+42     	; 0x200 <DIO_Write+0x78>
  { 
  case GPIOB:
    PORTB_DATA |=(pins);
     1d6:	85 b1       	in	r24, 0x05	; 5
     1d8:	68 2b       	or	r22, r24
     1da:	65 b9       	out	0x05, r22	; 5
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1dc:	84 e1       	ldi	r24, 0x14	; 20
case HIGH:{
  switch (GPIO)
  { 
  case GPIOB:
    PORTB_DATA |=(pins);
    break;
     1de:	08 95       	ret
  case GPIOC:
    PORTC_DATA |=(pins);
     1e0:	88 b1       	in	r24, 0x08	; 8
     1e2:	68 2b       	or	r22, r24
     1e4:	68 b9       	out	0x08, r22	; 8
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1e6:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    PORTB_DATA |=(pins);
    break;
  case GPIOC:
    PORTC_DATA |=(pins);
    break;
     1e8:	08 95       	ret
  case GPIOD:
    PORTD_DATA |=(pins);
     1ea:	8b b1       	in	r24, 0x0b	; 11
     1ec:	68 2b       	or	r22, r24
     1ee:	6b b9       	out	0x0b, r22	; 11
void DIO_is_init(void){
  u8_is_init=1;
}

ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{uint8_t Ret=E_OK+DIO_MODULE;
     1f0:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    PORTC_DATA |=(pins);
    break;
  case GPIOD:
    PORTD_DATA |=(pins);
    break;
     1f2:	08 95       	ret
default:
  Ret+=INVALID_VALUE;
  break;
}

}else{Ret+=NOT_INIT;}
     1f4:	88 e1       	ldi	r24, 0x18	; 24
     1f6:	08 95       	ret
    break;
  }
  break;
}
default:
  Ret+=INVALID_VALUE;
     1f8:	86 e2       	ldi	r24, 0x26	; 38
     1fa:	08 95       	ret
    break;
  case GPIOD:
    PORTD_DATA &= ~(pins);
    break;
  default:
    Ret+=INVALID_PORT;
     1fc:	84 e2       	ldi	r24, 0x24	; 36
     1fe:	08 95       	ret
    break;
  case GPIOD:
    PORTD_DATA |=(pins);
    break;
  default:
    Ret+=INVALID_PORT;
     200:	84 e2       	ldi	r24, 0x24	; 36
  break;
}

}else{Ret+=NOT_INIT;}
return Ret;
}
     202:	08 95       	ret

00000204 <DIO_Read>:


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
if(u8_is_init==1){
     204:	90 91 24 01 	lds	r25, 0x0124
     208:	91 30       	cpi	r25, 0x01	; 1
     20a:	01 f5       	brne	.+64     	; 0x24c <DIO_Read+0x48>
  switch (GPIO)
     20c:	82 30       	cpi	r24, 0x02	; 2
     20e:	51 f0       	breq	.+20     	; 0x224 <DIO_Read+0x20>
     210:	83 30       	cpi	r24, 0x03	; 3
     212:	71 f0       	breq	.+28     	; 0x230 <DIO_Read+0x2c>
     214:	81 30       	cpi	r24, 0x01	; 1
     216:	91 f4       	brne	.+36     	; 0x23c <DIO_Read+0x38>
  { 
  case GPIOB:
    *data=(PORTB_PIN & pins);
     218:	83 b1       	in	r24, 0x03	; 3
     21a:	68 23       	and	r22, r24
     21c:	fa 01       	movw	r30, r20
     21e:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
     220:	84 e1       	ldi	r24, 0x14	; 20
if(u8_is_init==1){
  switch (GPIO)
  { 
  case GPIOB:
    *data=(PORTB_PIN & pins);
    break;
     222:	0d c0       	rjmp	.+26     	; 0x23e <DIO_Read+0x3a>
  case GPIOC:
    *data=(PORTC_PIN & pins);
     224:	86 b1       	in	r24, 0x06	; 6
     226:	68 23       	and	r22, r24
     228:	fa 01       	movw	r30, r20
     22a:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
     22c:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    *data=(PORTB_PIN & pins);
    break;
  case GPIOC:
    *data=(PORTC_PIN & pins);
    break;
     22e:	07 c0       	rjmp	.+14     	; 0x23e <DIO_Read+0x3a>
  case GPIOD:
    *data=(PORTD_PIN & pins);
     230:	89 b1       	in	r24, 0x09	; 9
     232:	68 23       	and	r22, r24
     234:	fa 01       	movw	r30, r20
     236:	60 83       	st	Z, r22
return Ret;
}


ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{uint8_t ret=E_OK+DIO_MODULE;
     238:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    *data=(PORTC_PIN & pins);
    break;
  case GPIOD:
    *data=(PORTD_PIN & pins);
    break;
     23a:	01 c0       	rjmp	.+2      	; 0x23e <DIO_Read+0x3a>
    default:
    ret+=INVALID_PORT;
     23c:	84 e2       	ldi	r24, 0x24	; 36
    break;
  }
  if(*data > 0)
     23e:	fa 01       	movw	r30, r20
     240:	90 81       	ld	r25, Z
     242:	99 23       	and	r25, r25
     244:	21 f0       	breq	.+8      	; 0x24e <DIO_Read+0x4a>
  {
    *data = 1;
     246:	91 e0       	ldi	r25, 0x01	; 1
     248:	90 83       	st	Z, r25
     24a:	08 95       	ret
  }
}else{ret+=NOT_INIT;}
     24c:	88 e1       	ldi	r24, 0x18	; 24
return ret;
}
     24e:	08 95       	ret

00000250 <DIO_Toggle>:
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
if(u8_is_init==1){
     250:	90 91 24 01 	lds	r25, 0x0124
     254:	91 30       	cpi	r25, 0x01	; 1
     256:	a9 f4       	brne	.+42     	; 0x282 <DIO_Toggle+0x32>
  switch (GPIO)
     258:	82 30       	cpi	r24, 0x02	; 2
     25a:	49 f0       	breq	.+18     	; 0x26e <DIO_Toggle+0x1e>
     25c:	83 30       	cpi	r24, 0x03	; 3
     25e:	61 f0       	breq	.+24     	; 0x278 <DIO_Toggle+0x28>
     260:	81 30       	cpi	r24, 0x01	; 1
     262:	89 f4       	brne	.+34     	; 0x286 <DIO_Toggle+0x36>
  {
  case GPIOB:
    PORTB_DATA ^=(pins);
     264:	85 b1       	in	r24, 0x05	; 5
     266:	68 27       	eor	r22, r24
     268:	65 b9       	out	0x05, r22	; 5
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
     26a:	84 e1       	ldi	r24, 0x14	; 20
if(u8_is_init==1){
  switch (GPIO)
  {
  case GPIOB:
    PORTB_DATA ^=(pins);
    break;
     26c:	08 95       	ret
  case GPIOC:
    PORTC_DATA ^=(pins);
     26e:	88 b1       	in	r24, 0x08	; 8
     270:	68 27       	eor	r22, r24
     272:	68 b9       	out	0x08, r22	; 8
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
     274:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOB:
    PORTB_DATA ^=(pins);
    break;
  case GPIOC:
    PORTC_DATA ^=(pins);
    break;
     276:	08 95       	ret
  case GPIOD:
    PORTD_DATA ^=(pins);
     278:	8b b1       	in	r24, 0x0b	; 11
     27a:	68 27       	eor	r22, r24
     27c:	6b b9       	out	0x0b, r22	; 11
}else{ret+=NOT_INIT;}
return ret;
}
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{
  uint8_t ret=E_OK+DIO_MODULE;
     27e:	84 e1       	ldi	r24, 0x14	; 20
  case GPIOC:
    PORTC_DATA ^=(pins);
    break;
  case GPIOD:
    PORTD_DATA ^=(pins);
    break;
     280:	08 95       	ret
  default:
    ret+=INVALID_PORT;
    break;
  }
}else{ret+=NOT_INIT;}
     282:	88 e1       	ldi	r24, 0x18	; 24
     284:	08 95       	ret
    break;
  case GPIOD:
    PORTD_DATA ^=(pins);
    break;
  default:
    ret+=INVALID_PORT;
     286:	84 e2       	ldi	r24, 0x24	; 36
    break;
  }
}else{ret+=NOT_INIT;}
  return ret;
}
     288:	08 95       	ret

0000028a <system_init>:
static uint8_t state_machine=0;

void system_init(void)
{

Us_Init();
     28a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <Us_Init>
motor_init();
     28e:	0e 94 8a 06 	call	0xd14	; 0xd14 <motor_init>
speaker_init();
     292:	0e 94 32 08 	call	0x1064	; 0x1064 <speaker_init>


}
     296:	08 95       	ret

00000298 <system_update>:


void system_update(void)
{
Us_Trigger();
     298:	0e 94 28 0c 	call	0x1850	; 0x1850 <Us_Trigger>
Us_GetDistance(&Distance);
     29c:	86 e2       	ldi	r24, 0x26	; 38
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	0e 94 41 0c 	call	0x1882	; 0x1882 <Us_GetDistance>
if (Distance>200)
     2a4:	80 91 26 01 	lds	r24, 0x0126
     2a8:	90 91 27 01 	lds	r25, 0x0127
     2ac:	89 3c       	cpi	r24, 0xC9	; 201
     2ae:	91 05       	cpc	r25, r1
     2b0:	10 f0       	brcs	.+4      	; 0x2b6 <system_update+0x1e>
{
	state_machine=0;
     2b2:	10 92 28 01 	sts	0x0128, r1
}
if (Distance <= 200 && Distance > 150)
     2b6:	9c 01       	movw	r18, r24
     2b8:	27 59       	subi	r18, 0x97	; 151
     2ba:	30 40       	sbci	r19, 0x00	; 0
     2bc:	22 33       	cpi	r18, 0x32	; 50
     2be:	31 05       	cpc	r19, r1
     2c0:	18 f4       	brcc	.+6      	; 0x2c8 <system_update+0x30>
{
	state_machine = 1;
     2c2:	21 e0       	ldi	r18, 0x01	; 1
     2c4:	20 93 28 01 	sts	0x0128, r18
}
if (Distance <= 150 && Distance > 100)
     2c8:	9c 01       	movw	r18, r24
     2ca:	25 56       	subi	r18, 0x65	; 101
     2cc:	30 40       	sbci	r19, 0x00	; 0
     2ce:	22 33       	cpi	r18, 0x32	; 50
     2d0:	31 05       	cpc	r19, r1
     2d2:	18 f4       	brcc	.+6      	; 0x2da <system_update+0x42>
{
	state_machine = 2;
     2d4:	22 e0       	ldi	r18, 0x02	; 2
     2d6:	20 93 28 01 	sts	0x0128, r18
}
if (Distance <= 100 && Distance > 50)
     2da:	9c 01       	movw	r18, r24
     2dc:	23 53       	subi	r18, 0x33	; 51
     2de:	30 40       	sbci	r19, 0x00	; 0
     2e0:	22 33       	cpi	r18, 0x32	; 50
     2e2:	31 05       	cpc	r19, r1
     2e4:	18 f4       	brcc	.+6      	; 0x2ec <system_update+0x54>
{
	state_machine = 3;
     2e6:	23 e0       	ldi	r18, 0x03	; 3
     2e8:	20 93 28 01 	sts	0x0128, r18
}
if (Distance <= 50 && Distance > 30)
     2ec:	9c 01       	movw	r18, r24
     2ee:	2f 51       	subi	r18, 0x1F	; 31
     2f0:	30 40       	sbci	r19, 0x00	; 0
     2f2:	24 31       	cpi	r18, 0x14	; 20
     2f4:	31 05       	cpc	r19, r1
     2f6:	18 f4       	brcc	.+6      	; 0x2fe <system_update+0x66>
{
	state_machine = 4;
     2f8:	24 e0       	ldi	r18, 0x04	; 4
     2fa:	20 93 28 01 	sts	0x0128, r18
}
if (Distance <= 30 && Distance > 20)
     2fe:	9c 01       	movw	r18, r24
     300:	25 51       	subi	r18, 0x15	; 21
     302:	30 40       	sbci	r19, 0x00	; 0
     304:	2a 30       	cpi	r18, 0x0A	; 10
     306:	31 05       	cpc	r19, r1
     308:	18 f4       	brcc	.+6      	; 0x310 <system_update+0x78>
{
	state_machine = 5;
     30a:	25 e0       	ldi	r18, 0x05	; 5
     30c:	20 93 28 01 	sts	0x0128, r18
}
if (Distance <= 20 && Distance > 0)
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	84 31       	cpi	r24, 0x14	; 20
     314:	91 05       	cpc	r25, r1
     316:	18 f4       	brcc	.+6      	; 0x31e <system_update+0x86>
{
	state_machine = 6;
     318:	86 e0       	ldi	r24, 0x06	; 6
     31a:	80 93 28 01 	sts	0x0128, r24
}

motor_start_sm(state_machine);
     31e:	80 91 28 01 	lds	r24, 0x0128
     322:	0e 94 98 06 	call	0xd30	; 0xd30 <motor_start_sm>
speaker_start_sm(state_machine);
     326:	80 91 28 01 	lds	r24, 0x0128
     32a:	0e 94 37 08 	call	0x106e	; 0x106e <speaker_start_sm>

}
     32e:	08 95       	ret

00000330 <Icu_Init>:
static volatile uint32_t u32_Time_rising_edge=0;
static volatile uint32_t u32_Time_faling_edge=0;
static volatile uint32_t Timer_High=0;
static volatile uint32_t Timer_Low=0;
ERROR_STATUS Icu_Init(Icu_cfg_s * Icu_Cfg)
{
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	ec 01       	movw	r28, r24
  uint8_t Ret=0;
//Enable Global int
G_interrupt_Enable();
     336:	0e 94 97 02 	call	0x52e	; 0x52e <G_interrupt_Enable>
//Enable EXTI
switch(Icu_Cfg->ICU_Ch_No)
     33a:	88 81       	ld	r24, Y
     33c:	88 23       	and	r24, r24
     33e:	19 f0       	breq	.+6      	; 0x346 <Icu_Init+0x16>
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	91 f4       	brne	.+36     	; 0x368 <Icu_Init+0x38>
     344:	09 c0       	rjmp	.+18     	; 0x358 <Icu_Init+0x28>
{
case ICU_CH0:
EX_interrupt0_enable0();
     346:	0e 94 a7 02 	call	0x54e	; 0x54e <EX_interrupt0_enable0>
INT0_external_interrupt = (Icu_Cfg->external_int);
     34a:	8a 81       	ldd	r24, Y+2	; 0x02
     34c:	9b 81       	ldd	r25, Y+3	; 0x03
     34e:	90 93 17 01 	sts	0x0117, r25
     352:	80 93 16 01 	sts	0x0116, r24

break;
     356:	08 c0       	rjmp	.+16     	; 0x368 <Icu_Init+0x38>
case ICU_CH1:
EX_interrupt1_enable1();
     358:	0e 94 9b 02 	call	0x536	; 0x536 <EX_interrupt1_enable1>
INT1_external_interrupt = (Icu_Cfg->external_int);
     35c:	8a 81       	ldd	r24, Y+2	; 0x02
     35e:	9b 81       	ldd	r25, Y+3	; 0x03
     360:	90 93 76 01 	sts	0x0176, r25
     364:	80 93 75 01 	sts	0x0175, r24

break;
}

switch(Icu_Cfg->ICU_Ch_Timer)
     368:	89 81       	ldd	r24, Y+1	; 0x01
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	61 f4       	brne	.+24     	; 0x386 <Icu_Init+0x56>
    TCCR0=0x05;
    TIMSK0=0x01;
    break;
    */
   case ICU_TIMER_CH1:
   TCCR1B=0x05;
     36e:	85 e0       	ldi	r24, 0x05	; 5
     370:	80 93 81 00 	sts	0x0081, r24
	TIMSK1=0x01;
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	80 93 6f 00 	sts	0x006F, r24
	TIMER1OVF=(Icu_Cfg->timer_int);
     37a:	8c 81       	ldd	r24, Y+4	; 0x04
     37c:	9d 81       	ldd	r25, Y+5	; 0x05
     37e:	90 93 13 01 	sts	0x0113, r25
     382:	80 93 12 01 	sts	0x0112, r24
 */
}


return Ret;
}
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	08 95       	ret

0000038e <Icu_ReadTime>:
 *          - E_NOK : not successful                   *
 * Description  : calculates the time between 2 edges              *
 ***************************************************************************/

ERROR_STATUS Icu_ReadTime(uint8_t Icu_Channel, uint8_t Icu_EdgeToEdge, uint32_t * Icu_Time)
{
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
uint8_t Ret=0;
switch(Icu_Channel)
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	29 f4       	brne	.+10     	; 0x3a0 <Icu_ReadTime+0x12>
 /* case ICU_TIMER_CH0:
  TCCR0|=0x03;
  Ret=E_OK;
  break;
 */ case ICU_TIMER_CH1:
  TCCR1B|=0x05;
     396:	e1 e8       	ldi	r30, 0x81	; 129
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	85 60       	ori	r24, 0x05	; 5
     39e:	80 83       	st	Z, r24
  default:
  Ret=E_NOK;
  break;
}

switch(Icu_EdgeToEdge)
     3a0:	61 30       	cpi	r22, 0x01	; 1
     3a2:	01 f1       	breq	.+64     	; 0x3e4 <Icu_ReadTime+0x56>
     3a4:	61 30       	cpi	r22, 0x01	; 1
     3a6:	18 f0       	brcs	.+6      	; 0x3ae <Icu_ReadTime+0x20>
     3a8:	62 30       	cpi	r22, 0x02	; 2
     3aa:	d1 f5       	brne	.+116    	; 0x420 <Icu_ReadTime+0x92>
     3ac:	2a c0       	rjmp	.+84     	; 0x402 <Icu_ReadTime+0x74>
{
  case ICU_RISE_TO_RISE:
  *Icu_Time=Timer_High+Timer_Low;
     3ae:	80 91 2d 01 	lds	r24, 0x012D
     3b2:	90 91 2e 01 	lds	r25, 0x012E
     3b6:	a0 91 2f 01 	lds	r26, 0x012F
     3ba:	b0 91 30 01 	lds	r27, 0x0130
     3be:	00 91 29 01 	lds	r16, 0x0129
     3c2:	10 91 2a 01 	lds	r17, 0x012A
     3c6:	20 91 2b 01 	lds	r18, 0x012B
     3ca:	30 91 2c 01 	lds	r19, 0x012C
     3ce:	80 0f       	add	r24, r16
     3d0:	91 1f       	adc	r25, r17
     3d2:	a2 1f       	adc	r26, r18
     3d4:	b3 1f       	adc	r27, r19
     3d6:	fa 01       	movw	r30, r20
     3d8:	80 83       	st	Z, r24
     3da:	91 83       	std	Z+1, r25	; 0x01
     3dc:	a2 83       	std	Z+2, r26	; 0x02
     3de:	b3 83       	std	Z+3, r27	; 0x03
  Ret=E_OK;
     3e0:	80 e0       	ldi	r24, 0x00	; 0
  break;
     3e2:	1f c0       	rjmp	.+62     	; 0x422 <Icu_ReadTime+0x94>
  case ICU_RISE_TO_FALL:
  *Icu_Time=Timer_High;
     3e4:	80 91 2d 01 	lds	r24, 0x012D
     3e8:	90 91 2e 01 	lds	r25, 0x012E
     3ec:	a0 91 2f 01 	lds	r26, 0x012F
     3f0:	b0 91 30 01 	lds	r27, 0x0130
     3f4:	fa 01       	movw	r30, r20
     3f6:	80 83       	st	Z, r24
     3f8:	91 83       	std	Z+1, r25	; 0x01
     3fa:	a2 83       	std	Z+2, r26	; 0x02
     3fc:	b3 83       	std	Z+3, r27	; 0x03
  Ret=E_OK;
     3fe:	80 e0       	ldi	r24, 0x00	; 0
  break;
     400:	10 c0       	rjmp	.+32     	; 0x422 <Icu_ReadTime+0x94>
  case ICU_FALE_TO_RISE:
  *Icu_Time=Timer_Low;
     402:	80 91 29 01 	lds	r24, 0x0129
     406:	90 91 2a 01 	lds	r25, 0x012A
     40a:	a0 91 2b 01 	lds	r26, 0x012B
     40e:	b0 91 2c 01 	lds	r27, 0x012C
     412:	fa 01       	movw	r30, r20
     414:	80 83       	st	Z, r24
     416:	91 83       	std	Z+1, r25	; 0x01
     418:	a2 83       	std	Z+2, r26	; 0x02
     41a:	b3 83       	std	Z+3, r27	; 0x03
  Ret=E_OK;
     41c:	80 e0       	ldi	r24, 0x00	; 0
  break;
     41e:	01 c0       	rjmp	.+2      	; 0x422 <Icu_ReadTime+0x94>

  default:
  Ret=E_NOK;
     420:	81 e0       	ldi	r24, 0x01	; 1
  break;
}

return Ret;
}
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	08 95       	ret

00000428 <EXTI0>:

void EXTI0(void)
{
  //u32_sgv_TimerVal=(uint32_t)TCNT1;
  u32_sgv_TimerVal=TCNT1;
     428:	80 91 84 00 	lds	r24, 0x0084
     42c:	90 91 85 00 	lds	r25, 0x0085
     430:	a0 e0       	ldi	r26, 0x00	; 0
     432:	b0 e0       	ldi	r27, 0x00	; 0
     434:	80 93 3a 01 	sts	0x013A, r24
     438:	90 93 3b 01 	sts	0x013B, r25
     43c:	a0 93 3c 01 	sts	0x013C, r26
     440:	b0 93 3d 01 	sts	0x013D, r27
  u8_ovf_happend=0;
     444:	10 92 39 01 	sts	0x0139, r1
//  if(READBIT(EXTERNAL_INTERRUPT_CONTROL,6))
    if(READBIT(EXTERNAL_INTERRUPT_CONTROL,ISC00) && READBIT(EXTERNAL_INTERRUPT_CONTROL,ISC01))
     448:	80 91 69 00 	lds	r24, 0x0069
     44c:	80 ff       	sbrs	r24, 0
     44e:	37 c0       	rjmp	.+110    	; 0x4be <EXTI0+0x96>
     450:	80 91 69 00 	lds	r24, 0x0069
     454:	86 95       	lsr	r24
     456:	80 ff       	sbrs	r24, 0
     458:	32 c0       	rjmp	.+100    	; 0x4be <EXTI0+0x96>
    {
		
    u32_Time_rising_edge=u32_sgv_TimerVal;
     45a:	80 91 3a 01 	lds	r24, 0x013A
     45e:	90 91 3b 01 	lds	r25, 0x013B
     462:	a0 91 3c 01 	lds	r26, 0x013C
     466:	b0 91 3d 01 	lds	r27, 0x013D
     46a:	80 93 35 01 	sts	0x0135, r24
     46e:	90 93 36 01 	sts	0x0136, r25
     472:	a0 93 37 01 	sts	0x0137, r26
     476:	b0 93 38 01 	sts	0x0138, r27
    Timer_Low = u32_Time_rising_edge - u32_Time_faling_edge;
     47a:	80 91 35 01 	lds	r24, 0x0135
     47e:	90 91 36 01 	lds	r25, 0x0136
     482:	a0 91 37 01 	lds	r26, 0x0137
     486:	b0 91 38 01 	lds	r27, 0x0138
     48a:	40 91 31 01 	lds	r20, 0x0131
     48e:	50 91 32 01 	lds	r21, 0x0132
     492:	60 91 33 01 	lds	r22, 0x0133
     496:	70 91 34 01 	lds	r23, 0x0134
     49a:	84 1b       	sub	r24, r20
     49c:	95 0b       	sbc	r25, r21
     49e:	a6 0b       	sbc	r26, r22
     4a0:	b7 0b       	sbc	r27, r23
     4a2:	80 93 29 01 	sts	0x0129, r24
     4a6:	90 93 2a 01 	sts	0x012A, r25
     4aa:	a0 93 2b 01 	sts	0x012B, r26
     4ae:	b0 93 2c 01 	sts	0x012C, r27
    /*****************************************/
    CLEAR_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC00);  /*Make it falling*/
     4b2:	e9 e6       	ldi	r30, 0x69	; 105
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	80 81       	ld	r24, Z
     4b8:	8e 7f       	andi	r24, 0xFE	; 254
     4ba:	80 83       	st	Z, r24
     4bc:	08 95       	ret
    /***************************************/
   }else{
      u32_Time_faling_edge=u32_sgv_TimerVal;
     4be:	80 91 3a 01 	lds	r24, 0x013A
     4c2:	90 91 3b 01 	lds	r25, 0x013B
     4c6:	a0 91 3c 01 	lds	r26, 0x013C
     4ca:	b0 91 3d 01 	lds	r27, 0x013D
     4ce:	80 93 31 01 	sts	0x0131, r24
     4d2:	90 93 32 01 	sts	0x0132, r25
     4d6:	a0 93 33 01 	sts	0x0133, r26
     4da:	b0 93 34 01 	sts	0x0134, r27
      Timer_High =u32_Time_faling_edge - u32_Time_rising_edge;
     4de:	80 91 31 01 	lds	r24, 0x0131
     4e2:	90 91 32 01 	lds	r25, 0x0132
     4e6:	a0 91 33 01 	lds	r26, 0x0133
     4ea:	b0 91 34 01 	lds	r27, 0x0134
     4ee:	40 91 35 01 	lds	r20, 0x0135
     4f2:	50 91 36 01 	lds	r21, 0x0136
     4f6:	60 91 37 01 	lds	r22, 0x0137
     4fa:	70 91 38 01 	lds	r23, 0x0138
     4fe:	84 1b       	sub	r24, r20
     500:	95 0b       	sbc	r25, r21
     502:	a6 0b       	sbc	r26, r22
     504:	b7 0b       	sbc	r27, r23
     506:	80 93 2d 01 	sts	0x012D, r24
     50a:	90 93 2e 01 	sts	0x012E, r25
     50e:	a0 93 2f 01 	sts	0x012F, r26
     512:	b0 93 30 01 	sts	0x0130, r27
   /*********************************/
      SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC00);    /*Make it Rising*/
     516:	e9 e6       	ldi	r30, 0x69	; 105
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	80 81       	ld	r24, Z
     51c:	81 60       	ori	r24, 0x01	; 1
     51e:	80 83       	st	Z, r24
     520:	08 95       	ret

00000522 <timer_interrupt1>:
 }

}
void timer_interrupt1(void)
{
  u8_ovf_happend=1;
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	80 93 39 01 	sts	0x0139, r24
Us_Trigger();
     528:	0e 94 28 0c 	call	0x1850	; 0x1850 <Us_Trigger>
}
     52c:	08 95       	ret

0000052e <G_interrupt_Enable>:
ptr_to_Fun ANA_COMP;
ptr_to_Fun TWI_I2C;
ptr_to_Fun SPM_RDY;
void G_interrupt_Enable(void)
{
 SREG |=(0x80);
     52e:	8f b7       	in	r24, 0x3f	; 63
     530:	80 68       	ori	r24, 0x80	; 128
     532:	8f bf       	out	0x3f, r24	; 63
}
     534:	08 95       	ret

00000536 <EX_interrupt1_enable1>:

void EX_interrupt1_enable1(void)
{
CLEAR_BIT(PORTD_DIR,3);/*Input*/
     536:	53 98       	cbi	0x0a, 3	; 10
SET_BIT(PORTD_DATA,3);/*Pullup*/
     538:	5b 9a       	sbi	0x0b, 3	; 11
SET_BIT(EXTERNAL_INTERRUPT_MASK_REG,INT1);/*EXT1*/
     53a:	e9 9a       	sbi	0x1d, 1	; 29
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC10);/*Rising*/
     53c:	e9 e6       	ldi	r30, 0x69	; 105
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 81       	ld	r24, Z
     542:	84 60       	ori	r24, 0x04	; 4
     544:	80 83       	st	Z, r24
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC11);/*Rising*/
     546:	80 81       	ld	r24, Z
     548:	88 60       	ori	r24, 0x08	; 8
     54a:	80 83       	st	Z, r24
}
     54c:	08 95       	ret

0000054e <EX_interrupt0_enable0>:
void EX_interrupt0_enable0(void)
{
CLEAR_BIT(PORTD_DIR,2);/*Input*/
     54e:	52 98       	cbi	0x0a, 2	; 10
//SET_BIT(PORTD_DATA,2);/*Pullup*/
SET_BIT(EXTERNAL_INTERRUPT_MASK_REG,INT0);/*EXT0*/
     550:	e8 9a       	sbi	0x1d, 0	; 29
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC00);/*Rising*/
     552:	e9 e6       	ldi	r30, 0x69	; 105
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	80 81       	ld	r24, Z
     558:	81 60       	ori	r24, 0x01	; 1
     55a:	80 83       	st	Z, r24
SET_BIT(EXTERNAL_INTERRUPT_CONTROL,ISC01);/*Rising*/
     55c:	80 81       	ld	r24, Z
     55e:	82 60       	ori	r24, 0x02	; 2
     560:	80 83       	st	Z, r24
}
     562:	08 95       	ret

00000564 <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
     564:	8f b7       	in	r24, 0x3f	; 63
     566:	8f 77       	andi	r24, 0x7F	; 127
     568:	8f bf       	out	0x3f, r24	; 63
}
     56a:	08 95       	ret

0000056c <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     56c:	1f 92       	push	r1
     56e:	0f 92       	push	r0
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	0f 92       	push	r0
     574:	11 24       	eor	r1, r1
     576:	2f 93       	push	r18
     578:	3f 93       	push	r19
     57a:	4f 93       	push	r20
     57c:	5f 93       	push	r21
     57e:	6f 93       	push	r22
     580:	7f 93       	push	r23
     582:	8f 93       	push	r24
     584:	9f 93       	push	r25
     586:	af 93       	push	r26
     588:	bf 93       	push	r27
     58a:	ef 93       	push	r30
     58c:	ff 93       	push	r31
  INT0_external_interrupt();
     58e:	e0 91 16 01 	lds	r30, 0x0116
     592:	f0 91 17 01 	lds	r31, 0x0117
     596:	09 95       	icall
}
     598:	ff 91       	pop	r31
     59a:	ef 91       	pop	r30
     59c:	bf 91       	pop	r27
     59e:	af 91       	pop	r26
     5a0:	9f 91       	pop	r25
     5a2:	8f 91       	pop	r24
     5a4:	7f 91       	pop	r23
     5a6:	6f 91       	pop	r22
     5a8:	5f 91       	pop	r21
     5aa:	4f 91       	pop	r20
     5ac:	3f 91       	pop	r19
     5ae:	2f 91       	pop	r18
     5b0:	0f 90       	pop	r0
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	0f 90       	pop	r0
     5b6:	1f 90       	pop	r1
     5b8:	18 95       	reti

000005ba <__vector_2>:


void __vector_2(void) __attribute__((signal));
void
 __vector_2(void)
{
     5ba:	1f 92       	push	r1
     5bc:	0f 92       	push	r0
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	0f 92       	push	r0
     5c2:	11 24       	eor	r1, r1
     5c4:	2f 93       	push	r18
     5c6:	3f 93       	push	r19
     5c8:	4f 93       	push	r20
     5ca:	5f 93       	push	r21
     5cc:	6f 93       	push	r22
     5ce:	7f 93       	push	r23
     5d0:	8f 93       	push	r24
     5d2:	9f 93       	push	r25
     5d4:	af 93       	push	r26
     5d6:	bf 93       	push	r27
     5d8:	ef 93       	push	r30
     5da:	ff 93       	push	r31
  INT1_external_interrupt();
     5dc:	e0 91 75 01 	lds	r30, 0x0175
     5e0:	f0 91 76 01 	lds	r31, 0x0176
     5e4:	09 95       	icall
}
     5e6:	ff 91       	pop	r31
     5e8:	ef 91       	pop	r30
     5ea:	bf 91       	pop	r27
     5ec:	af 91       	pop	r26
     5ee:	9f 91       	pop	r25
     5f0:	8f 91       	pop	r24
     5f2:	7f 91       	pop	r23
     5f4:	6f 91       	pop	r22
     5f6:	5f 91       	pop	r21
     5f8:	4f 91       	pop	r20
     5fa:	3f 91       	pop	r19
     5fc:	2f 91       	pop	r18
     5fe:	0f 90       	pop	r0
     600:	0f be       	out	0x3f, r0	; 63
     602:	0f 90       	pop	r0
     604:	1f 90       	pop	r1
     606:	18 95       	reti

00000608 <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     608:	1f 92       	push	r1
     60a:	0f 92       	push	r0
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	0f 92       	push	r0
     610:	11 24       	eor	r1, r1
     612:	2f 93       	push	r18
     614:	3f 93       	push	r19
     616:	4f 93       	push	r20
     618:	5f 93       	push	r21
     61a:	6f 93       	push	r22
     61c:	7f 93       	push	r23
     61e:	8f 93       	push	r24
     620:	9f 93       	push	r25
     622:	af 93       	push	r26
     624:	bf 93       	push	r27
     626:	ef 93       	push	r30
     628:	ff 93       	push	r31
  Pin_Change_Interrupt_Request_0();
     62a:	e0 91 5b 01 	lds	r30, 0x015B
     62e:	f0 91 5c 01 	lds	r31, 0x015C
     632:	09 95       	icall
}
     634:	ff 91       	pop	r31
     636:	ef 91       	pop	r30
     638:	bf 91       	pop	r27
     63a:	af 91       	pop	r26
     63c:	9f 91       	pop	r25
     63e:	8f 91       	pop	r24
     640:	7f 91       	pop	r23
     642:	6f 91       	pop	r22
     644:	5f 91       	pop	r21
     646:	4f 91       	pop	r20
     648:	3f 91       	pop	r19
     64a:	2f 91       	pop	r18
     64c:	0f 90       	pop	r0
     64e:	0f be       	out	0x3f, r0	; 63
     650:	0f 90       	pop	r0
     652:	1f 90       	pop	r1
     654:	18 95       	reti

00000656 <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     656:	1f 92       	push	r1
     658:	0f 92       	push	r0
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	0f 92       	push	r0
     65e:	11 24       	eor	r1, r1
     660:	2f 93       	push	r18
     662:	3f 93       	push	r19
     664:	4f 93       	push	r20
     666:	5f 93       	push	r21
     668:	6f 93       	push	r22
     66a:	7f 93       	push	r23
     66c:	8f 93       	push	r24
     66e:	9f 93       	push	r25
     670:	af 93       	push	r26
     672:	bf 93       	push	r27
     674:	ef 93       	push	r30
     676:	ff 93       	push	r31
Pin_Change_Interrupt_Request_1();
     678:	e0 91 6f 01 	lds	r30, 0x016F
     67c:	f0 91 70 01 	lds	r31, 0x0170
     680:	09 95       	icall
}
     682:	ff 91       	pop	r31
     684:	ef 91       	pop	r30
     686:	bf 91       	pop	r27
     688:	af 91       	pop	r26
     68a:	9f 91       	pop	r25
     68c:	8f 91       	pop	r24
     68e:	7f 91       	pop	r23
     690:	6f 91       	pop	r22
     692:	5f 91       	pop	r21
     694:	4f 91       	pop	r20
     696:	3f 91       	pop	r19
     698:	2f 91       	pop	r18
     69a:	0f 90       	pop	r0
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	0f 90       	pop	r0
     6a0:	1f 90       	pop	r1
     6a2:	18 95       	reti

000006a4 <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     6a4:	1f 92       	push	r1
     6a6:	0f 92       	push	r0
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	0f 92       	push	r0
     6ac:	11 24       	eor	r1, r1
     6ae:	2f 93       	push	r18
     6b0:	3f 93       	push	r19
     6b2:	4f 93       	push	r20
     6b4:	5f 93       	push	r21
     6b6:	6f 93       	push	r22
     6b8:	7f 93       	push	r23
     6ba:	8f 93       	push	r24
     6bc:	9f 93       	push	r25
     6be:	af 93       	push	r26
     6c0:	bf 93       	push	r27
     6c2:	ef 93       	push	r30
     6c4:	ff 93       	push	r31
  Pin_Change_Interrupt_Request_2();
     6c6:	e0 91 61 01 	lds	r30, 0x0161
     6ca:	f0 91 62 01 	lds	r31, 0x0162
     6ce:	09 95       	icall
}
     6d0:	ff 91       	pop	r31
     6d2:	ef 91       	pop	r30
     6d4:	bf 91       	pop	r27
     6d6:	af 91       	pop	r26
     6d8:	9f 91       	pop	r25
     6da:	8f 91       	pop	r24
     6dc:	7f 91       	pop	r23
     6de:	6f 91       	pop	r22
     6e0:	5f 91       	pop	r21
     6e2:	4f 91       	pop	r20
     6e4:	3f 91       	pop	r19
     6e6:	2f 91       	pop	r18
     6e8:	0f 90       	pop	r0
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	0f 90       	pop	r0
     6ee:	1f 90       	pop	r1
     6f0:	18 95       	reti

000006f2 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     6f2:	1f 92       	push	r1
     6f4:	0f 92       	push	r0
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	0f 92       	push	r0
     6fa:	11 24       	eor	r1, r1
     6fc:	2f 93       	push	r18
     6fe:	3f 93       	push	r19
     700:	4f 93       	push	r20
     702:	5f 93       	push	r21
     704:	6f 93       	push	r22
     706:	7f 93       	push	r23
     708:	8f 93       	push	r24
     70a:	9f 93       	push	r25
     70c:	af 93       	push	r26
     70e:	bf 93       	push	r27
     710:	ef 93       	push	r30
     712:	ff 93       	push	r31
  watch_dog_interrupt();
     714:	e0 91 53 01 	lds	r30, 0x0153
     718:	f0 91 54 01 	lds	r31, 0x0154
     71c:	09 95       	icall
}
     71e:	ff 91       	pop	r31
     720:	ef 91       	pop	r30
     722:	bf 91       	pop	r27
     724:	af 91       	pop	r26
     726:	9f 91       	pop	r25
     728:	8f 91       	pop	r24
     72a:	7f 91       	pop	r23
     72c:	6f 91       	pop	r22
     72e:	5f 91       	pop	r21
     730:	4f 91       	pop	r20
     732:	3f 91       	pop	r19
     734:	2f 91       	pop	r18
     736:	0f 90       	pop	r0
     738:	0f be       	out	0x3f, r0	; 63
     73a:	0f 90       	pop	r0
     73c:	1f 90       	pop	r1
     73e:	18 95       	reti

00000740 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
     740:	1f 92       	push	r1
     742:	0f 92       	push	r0
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	0f 92       	push	r0
     748:	11 24       	eor	r1, r1
     74a:	2f 93       	push	r18
     74c:	3f 93       	push	r19
     74e:	4f 93       	push	r20
     750:	5f 93       	push	r21
     752:	6f 93       	push	r22
     754:	7f 93       	push	r23
     756:	8f 93       	push	r24
     758:	9f 93       	push	r25
     75a:	af 93       	push	r26
     75c:	bf 93       	push	r27
     75e:	ef 93       	push	r30
     760:	ff 93       	push	r31
TIMER2COMPA();
     762:	e0 91 6d 01 	lds	r30, 0x016D
     766:	f0 91 6e 01 	lds	r31, 0x016E
     76a:	09 95       	icall
}
     76c:	ff 91       	pop	r31
     76e:	ef 91       	pop	r30
     770:	bf 91       	pop	r27
     772:	af 91       	pop	r26
     774:	9f 91       	pop	r25
     776:	8f 91       	pop	r24
     778:	7f 91       	pop	r23
     77a:	6f 91       	pop	r22
     77c:	5f 91       	pop	r21
     77e:	4f 91       	pop	r20
     780:	3f 91       	pop	r19
     782:	2f 91       	pop	r18
     784:	0f 90       	pop	r0
     786:	0f be       	out	0x3f, r0	; 63
     788:	0f 90       	pop	r0
     78a:	1f 90       	pop	r1
     78c:	18 95       	reti

0000078e <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
     78e:	1f 92       	push	r1
     790:	0f 92       	push	r0
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	0f 92       	push	r0
     796:	11 24       	eor	r1, r1
     798:	2f 93       	push	r18
     79a:	3f 93       	push	r19
     79c:	4f 93       	push	r20
     79e:	5f 93       	push	r21
     7a0:	6f 93       	push	r22
     7a2:	7f 93       	push	r23
     7a4:	8f 93       	push	r24
     7a6:	9f 93       	push	r25
     7a8:	af 93       	push	r26
     7aa:	bf 93       	push	r27
     7ac:	ef 93       	push	r30
     7ae:	ff 93       	push	r31
  TIMER2COMPB();
     7b0:	e0 91 5d 01 	lds	r30, 0x015D
     7b4:	f0 91 5e 01 	lds	r31, 0x015E
     7b8:	09 95       	icall
}
     7ba:	ff 91       	pop	r31
     7bc:	ef 91       	pop	r30
     7be:	bf 91       	pop	r27
     7c0:	af 91       	pop	r26
     7c2:	9f 91       	pop	r25
     7c4:	8f 91       	pop	r24
     7c6:	7f 91       	pop	r23
     7c8:	6f 91       	pop	r22
     7ca:	5f 91       	pop	r21
     7cc:	4f 91       	pop	r20
     7ce:	3f 91       	pop	r19
     7d0:	2f 91       	pop	r18
     7d2:	0f 90       	pop	r0
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	0f 90       	pop	r0
     7d8:	1f 90       	pop	r1
     7da:	18 95       	reti

000007dc <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
     7dc:	1f 92       	push	r1
     7de:	0f 92       	push	r0
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	0f 92       	push	r0
     7e4:	11 24       	eor	r1, r1
     7e6:	2f 93       	push	r18
     7e8:	3f 93       	push	r19
     7ea:	4f 93       	push	r20
     7ec:	5f 93       	push	r21
     7ee:	6f 93       	push	r22
     7f0:	7f 93       	push	r23
     7f2:	8f 93       	push	r24
     7f4:	9f 93       	push	r25
     7f6:	af 93       	push	r26
     7f8:	bf 93       	push	r27
     7fa:	ef 93       	push	r30
     7fc:	ff 93       	push	r31
  TIMER2OVF();
     7fe:	e0 91 14 01 	lds	r30, 0x0114
     802:	f0 91 15 01 	lds	r31, 0x0115
     806:	09 95       	icall
}
     808:	ff 91       	pop	r31
     80a:	ef 91       	pop	r30
     80c:	bf 91       	pop	r27
     80e:	af 91       	pop	r26
     810:	9f 91       	pop	r25
     812:	8f 91       	pop	r24
     814:	7f 91       	pop	r23
     816:	6f 91       	pop	r22
     818:	5f 91       	pop	r21
     81a:	4f 91       	pop	r20
     81c:	3f 91       	pop	r19
     81e:	2f 91       	pop	r18
     820:	0f 90       	pop	r0
     822:	0f be       	out	0x3f, r0	; 63
     824:	0f 90       	pop	r0
     826:	1f 90       	pop	r1
     828:	18 95       	reti

0000082a <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     82a:	1f 92       	push	r1
     82c:	0f 92       	push	r0
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	0f 92       	push	r0
     832:	11 24       	eor	r1, r1
     834:	2f 93       	push	r18
     836:	3f 93       	push	r19
     838:	4f 93       	push	r20
     83a:	5f 93       	push	r21
     83c:	6f 93       	push	r22
     83e:	7f 93       	push	r23
     840:	8f 93       	push	r24
     842:	9f 93       	push	r25
     844:	af 93       	push	r26
     846:	bf 93       	push	r27
     848:	ef 93       	push	r30
     84a:	ff 93       	push	r31

  TIMER1CAPT();
     84c:	e0 91 79 01 	lds	r30, 0x0179
     850:	f0 91 7a 01 	lds	r31, 0x017A
     854:	09 95       	icall
}
     856:	ff 91       	pop	r31
     858:	ef 91       	pop	r30
     85a:	bf 91       	pop	r27
     85c:	af 91       	pop	r26
     85e:	9f 91       	pop	r25
     860:	8f 91       	pop	r24
     862:	7f 91       	pop	r23
     864:	6f 91       	pop	r22
     866:	5f 91       	pop	r21
     868:	4f 91       	pop	r20
     86a:	3f 91       	pop	r19
     86c:	2f 91       	pop	r18
     86e:	0f 90       	pop	r0
     870:	0f be       	out	0x3f, r0	; 63
     872:	0f 90       	pop	r0
     874:	1f 90       	pop	r1
     876:	18 95       	reti

00000878 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     878:	1f 92       	push	r1
     87a:	0f 92       	push	r0
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	0f 92       	push	r0
     880:	11 24       	eor	r1, r1
     882:	2f 93       	push	r18
     884:	3f 93       	push	r19
     886:	4f 93       	push	r20
     888:	5f 93       	push	r21
     88a:	6f 93       	push	r22
     88c:	7f 93       	push	r23
     88e:	8f 93       	push	r24
     890:	9f 93       	push	r25
     892:	af 93       	push	r26
     894:	bf 93       	push	r27
     896:	ef 93       	push	r30
     898:	ff 93       	push	r31

  TIMER1COMPA();
     89a:	e0 91 59 01 	lds	r30, 0x0159
     89e:	f0 91 5a 01 	lds	r31, 0x015A
     8a2:	09 95       	icall
}
     8a4:	ff 91       	pop	r31
     8a6:	ef 91       	pop	r30
     8a8:	bf 91       	pop	r27
     8aa:	af 91       	pop	r26
     8ac:	9f 91       	pop	r25
     8ae:	8f 91       	pop	r24
     8b0:	7f 91       	pop	r23
     8b2:	6f 91       	pop	r22
     8b4:	5f 91       	pop	r21
     8b6:	4f 91       	pop	r20
     8b8:	3f 91       	pop	r19
     8ba:	2f 91       	pop	r18
     8bc:	0f 90       	pop	r0
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	0f 90       	pop	r0
     8c2:	1f 90       	pop	r1
     8c4:	18 95       	reti

000008c6 <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
     8c6:	1f 92       	push	r1
     8c8:	0f 92       	push	r0
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	0f 92       	push	r0
     8ce:	11 24       	eor	r1, r1
     8d0:	2f 93       	push	r18
     8d2:	3f 93       	push	r19
     8d4:	4f 93       	push	r20
     8d6:	5f 93       	push	r21
     8d8:	6f 93       	push	r22
     8da:	7f 93       	push	r23
     8dc:	8f 93       	push	r24
     8de:	9f 93       	push	r25
     8e0:	af 93       	push	r26
     8e2:	bf 93       	push	r27
     8e4:	ef 93       	push	r30
     8e6:	ff 93       	push	r31
  TIMER1COMPB();
     8e8:	e0 91 57 01 	lds	r30, 0x0157
     8ec:	f0 91 58 01 	lds	r31, 0x0158
     8f0:	09 95       	icall
}
     8f2:	ff 91       	pop	r31
     8f4:	ef 91       	pop	r30
     8f6:	bf 91       	pop	r27
     8f8:	af 91       	pop	r26
     8fa:	9f 91       	pop	r25
     8fc:	8f 91       	pop	r24
     8fe:	7f 91       	pop	r23
     900:	6f 91       	pop	r22
     902:	5f 91       	pop	r21
     904:	4f 91       	pop	r20
     906:	3f 91       	pop	r19
     908:	2f 91       	pop	r18
     90a:	0f 90       	pop	r0
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	0f 90       	pop	r0
     910:	1f 90       	pop	r1
     912:	18 95       	reti

00000914 <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     914:	1f 92       	push	r1
     916:	0f 92       	push	r0
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	0f 92       	push	r0
     91c:	11 24       	eor	r1, r1
     91e:	2f 93       	push	r18
     920:	3f 93       	push	r19
     922:	4f 93       	push	r20
     924:	5f 93       	push	r21
     926:	6f 93       	push	r22
     928:	7f 93       	push	r23
     92a:	8f 93       	push	r24
     92c:	9f 93       	push	r25
     92e:	af 93       	push	r26
     930:	bf 93       	push	r27
     932:	ef 93       	push	r30
     934:	ff 93       	push	r31
  TIMER1OVF();
     936:	e0 91 12 01 	lds	r30, 0x0112
     93a:	f0 91 13 01 	lds	r31, 0x0113
     93e:	09 95       	icall
}
     940:	ff 91       	pop	r31
     942:	ef 91       	pop	r30
     944:	bf 91       	pop	r27
     946:	af 91       	pop	r26
     948:	9f 91       	pop	r25
     94a:	8f 91       	pop	r24
     94c:	7f 91       	pop	r23
     94e:	6f 91       	pop	r22
     950:	5f 91       	pop	r21
     952:	4f 91       	pop	r20
     954:	3f 91       	pop	r19
     956:	2f 91       	pop	r18
     958:	0f 90       	pop	r0
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	0f 90       	pop	r0
     95e:	1f 90       	pop	r1
     960:	18 95       	reti

00000962 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
     962:	1f 92       	push	r1
     964:	0f 92       	push	r0
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	0f 92       	push	r0
     96a:	11 24       	eor	r1, r1
     96c:	2f 93       	push	r18
     96e:	3f 93       	push	r19
     970:	4f 93       	push	r20
     972:	5f 93       	push	r21
     974:	6f 93       	push	r22
     976:	7f 93       	push	r23
     978:	8f 93       	push	r24
     97a:	9f 93       	push	r25
     97c:	af 93       	push	r26
     97e:	bf 93       	push	r27
     980:	ef 93       	push	r30
     982:	ff 93       	push	r31
  TIMER0COMPA();
     984:	e0 91 77 01 	lds	r30, 0x0177
     988:	f0 91 78 01 	lds	r31, 0x0178
     98c:	09 95       	icall
}
     98e:	ff 91       	pop	r31
     990:	ef 91       	pop	r30
     992:	bf 91       	pop	r27
     994:	af 91       	pop	r26
     996:	9f 91       	pop	r25
     998:	8f 91       	pop	r24
     99a:	7f 91       	pop	r23
     99c:	6f 91       	pop	r22
     99e:	5f 91       	pop	r21
     9a0:	4f 91       	pop	r20
     9a2:	3f 91       	pop	r19
     9a4:	2f 91       	pop	r18
     9a6:	0f 90       	pop	r0
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	0f 90       	pop	r0
     9ac:	1f 90       	pop	r1
     9ae:	18 95       	reti

000009b0 <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
     9b0:	1f 92       	push	r1
     9b2:	0f 92       	push	r0
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	0f 92       	push	r0
     9b8:	11 24       	eor	r1, r1
     9ba:	2f 93       	push	r18
     9bc:	3f 93       	push	r19
     9be:	4f 93       	push	r20
     9c0:	5f 93       	push	r21
     9c2:	6f 93       	push	r22
     9c4:	7f 93       	push	r23
     9c6:	8f 93       	push	r24
     9c8:	9f 93       	push	r25
     9ca:	af 93       	push	r26
     9cc:	bf 93       	push	r27
     9ce:	ef 93       	push	r30
     9d0:	ff 93       	push	r31
  TIMER0COMPB();
     9d2:	e0 91 67 01 	lds	r30, 0x0167
     9d6:	f0 91 68 01 	lds	r31, 0x0168
     9da:	09 95       	icall
}
     9dc:	ff 91       	pop	r31
     9de:	ef 91       	pop	r30
     9e0:	bf 91       	pop	r27
     9e2:	af 91       	pop	r26
     9e4:	9f 91       	pop	r25
     9e6:	8f 91       	pop	r24
     9e8:	7f 91       	pop	r23
     9ea:	6f 91       	pop	r22
     9ec:	5f 91       	pop	r21
     9ee:	4f 91       	pop	r20
     9f0:	3f 91       	pop	r19
     9f2:	2f 91       	pop	r18
     9f4:	0f 90       	pop	r0
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	0f 90       	pop	r0
     9fa:	1f 90       	pop	r1
     9fc:	18 95       	reti

000009fe <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     9fe:	1f 92       	push	r1
     a00:	0f 92       	push	r0
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	0f 92       	push	r0
     a06:	11 24       	eor	r1, r1
     a08:	2f 93       	push	r18
     a0a:	3f 93       	push	r19
     a0c:	4f 93       	push	r20
     a0e:	5f 93       	push	r21
     a10:	6f 93       	push	r22
     a12:	7f 93       	push	r23
     a14:	8f 93       	push	r24
     a16:	9f 93       	push	r25
     a18:	af 93       	push	r26
     a1a:	bf 93       	push	r27
     a1c:	ef 93       	push	r30
     a1e:	ff 93       	push	r31
  TIMER0OVF_INT();
     a20:	e0 91 63 01 	lds	r30, 0x0163
     a24:	f0 91 64 01 	lds	r31, 0x0164
     a28:	09 95       	icall
}
     a2a:	ff 91       	pop	r31
     a2c:	ef 91       	pop	r30
     a2e:	bf 91       	pop	r27
     a30:	af 91       	pop	r26
     a32:	9f 91       	pop	r25
     a34:	8f 91       	pop	r24
     a36:	7f 91       	pop	r23
     a38:	6f 91       	pop	r22
     a3a:	5f 91       	pop	r21
     a3c:	4f 91       	pop	r20
     a3e:	3f 91       	pop	r19
     a40:	2f 91       	pop	r18
     a42:	0f 90       	pop	r0
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	0f 90       	pop	r0
     a48:	1f 90       	pop	r1
     a4a:	18 95       	reti

00000a4c <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
     a4c:	1f 92       	push	r1
     a4e:	0f 92       	push	r0
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	0f 92       	push	r0
     a54:	11 24       	eor	r1, r1
     a56:	2f 93       	push	r18
     a58:	3f 93       	push	r19
     a5a:	4f 93       	push	r20
     a5c:	5f 93       	push	r21
     a5e:	6f 93       	push	r22
     a60:	7f 93       	push	r23
     a62:	8f 93       	push	r24
     a64:	9f 93       	push	r25
     a66:	af 93       	push	r26
     a68:	bf 93       	push	r27
     a6a:	ef 93       	push	r30
     a6c:	ff 93       	push	r31
  SPI_STC();
     a6e:	e0 91 5f 01 	lds	r30, 0x015F
     a72:	f0 91 60 01 	lds	r31, 0x0160
     a76:	09 95       	icall
}
     a78:	ff 91       	pop	r31
     a7a:	ef 91       	pop	r30
     a7c:	bf 91       	pop	r27
     a7e:	af 91       	pop	r26
     a80:	9f 91       	pop	r25
     a82:	8f 91       	pop	r24
     a84:	7f 91       	pop	r23
     a86:	6f 91       	pop	r22
     a88:	5f 91       	pop	r21
     a8a:	4f 91       	pop	r20
     a8c:	3f 91       	pop	r19
     a8e:	2f 91       	pop	r18
     a90:	0f 90       	pop	r0
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	0f 90       	pop	r0
     a96:	1f 90       	pop	r1
     a98:	18 95       	reti

00000a9a <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
     a9a:	1f 92       	push	r1
     a9c:	0f 92       	push	r0
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	0f 92       	push	r0
     aa2:	11 24       	eor	r1, r1
     aa4:	2f 93       	push	r18
     aa6:	3f 93       	push	r19
     aa8:	4f 93       	push	r20
     aaa:	5f 93       	push	r21
     aac:	6f 93       	push	r22
     aae:	7f 93       	push	r23
     ab0:	8f 93       	push	r24
     ab2:	9f 93       	push	r25
     ab4:	af 93       	push	r26
     ab6:	bf 93       	push	r27
     ab8:	ef 93       	push	r30
     aba:	ff 93       	push	r31
  USART_RXC();
     abc:	e0 91 51 01 	lds	r30, 0x0151
     ac0:	f0 91 52 01 	lds	r31, 0x0152
     ac4:	09 95       	icall
}
     ac6:	ff 91       	pop	r31
     ac8:	ef 91       	pop	r30
     aca:	bf 91       	pop	r27
     acc:	af 91       	pop	r26
     ace:	9f 91       	pop	r25
     ad0:	8f 91       	pop	r24
     ad2:	7f 91       	pop	r23
     ad4:	6f 91       	pop	r22
     ad6:	5f 91       	pop	r21
     ad8:	4f 91       	pop	r20
     ada:	3f 91       	pop	r19
     adc:	2f 91       	pop	r18
     ade:	0f 90       	pop	r0
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	0f 90       	pop	r0
     ae4:	1f 90       	pop	r1
     ae6:	18 95       	reti

00000ae8 <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
     ae8:	1f 92       	push	r1
     aea:	0f 92       	push	r0
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	0f 92       	push	r0
     af0:	11 24       	eor	r1, r1
     af2:	2f 93       	push	r18
     af4:	3f 93       	push	r19
     af6:	4f 93       	push	r20
     af8:	5f 93       	push	r21
     afa:	6f 93       	push	r22
     afc:	7f 93       	push	r23
     afe:	8f 93       	push	r24
     b00:	9f 93       	push	r25
     b02:	af 93       	push	r26
     b04:	bf 93       	push	r27
     b06:	ef 93       	push	r30
     b08:	ff 93       	push	r31
  USART_UDRE();
     b0a:	e0 91 73 01 	lds	r30, 0x0173
     b0e:	f0 91 74 01 	lds	r31, 0x0174
     b12:	09 95       	icall
}
     b14:	ff 91       	pop	r31
     b16:	ef 91       	pop	r30
     b18:	bf 91       	pop	r27
     b1a:	af 91       	pop	r26
     b1c:	9f 91       	pop	r25
     b1e:	8f 91       	pop	r24
     b20:	7f 91       	pop	r23
     b22:	6f 91       	pop	r22
     b24:	5f 91       	pop	r21
     b26:	4f 91       	pop	r20
     b28:	3f 91       	pop	r19
     b2a:	2f 91       	pop	r18
     b2c:	0f 90       	pop	r0
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	0f 90       	pop	r0
     b32:	1f 90       	pop	r1
     b34:	18 95       	reti

00000b36 <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
     b36:	1f 92       	push	r1
     b38:	0f 92       	push	r0
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	0f 92       	push	r0
     b3e:	11 24       	eor	r1, r1
     b40:	2f 93       	push	r18
     b42:	3f 93       	push	r19
     b44:	4f 93       	push	r20
     b46:	5f 93       	push	r21
     b48:	6f 93       	push	r22
     b4a:	7f 93       	push	r23
     b4c:	8f 93       	push	r24
     b4e:	9f 93       	push	r25
     b50:	af 93       	push	r26
     b52:	bf 93       	push	r27
     b54:	ef 93       	push	r30
     b56:	ff 93       	push	r31
  USART_TXC();
     b58:	e0 91 71 01 	lds	r30, 0x0171
     b5c:	f0 91 72 01 	lds	r31, 0x0172
     b60:	09 95       	icall
}
     b62:	ff 91       	pop	r31
     b64:	ef 91       	pop	r30
     b66:	bf 91       	pop	r27
     b68:	af 91       	pop	r26
     b6a:	9f 91       	pop	r25
     b6c:	8f 91       	pop	r24
     b6e:	7f 91       	pop	r23
     b70:	6f 91       	pop	r22
     b72:	5f 91       	pop	r21
     b74:	4f 91       	pop	r20
     b76:	3f 91       	pop	r19
     b78:	2f 91       	pop	r18
     b7a:	0f 90       	pop	r0
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	0f 90       	pop	r0
     b80:	1f 90       	pop	r1
     b82:	18 95       	reti

00000b84 <__vector_21>:

void __vector_21(void) __attribute__((signal));
void __vector_21(void)
{
     b84:	1f 92       	push	r1
     b86:	0f 92       	push	r0
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	0f 92       	push	r0
     b8c:	11 24       	eor	r1, r1
     b8e:	2f 93       	push	r18
     b90:	3f 93       	push	r19
     b92:	4f 93       	push	r20
     b94:	5f 93       	push	r21
     b96:	6f 93       	push	r22
     b98:	7f 93       	push	r23
     b9a:	8f 93       	push	r24
     b9c:	9f 93       	push	r25
     b9e:	af 93       	push	r26
     ba0:	bf 93       	push	r27
     ba2:	ef 93       	push	r30
     ba4:	ff 93       	push	r31
  ADC_INT();
     ba6:	e0 91 69 01 	lds	r30, 0x0169
     baa:	f0 91 6a 01 	lds	r31, 0x016A
     bae:	09 95       	icall
}
     bb0:	ff 91       	pop	r31
     bb2:	ef 91       	pop	r30
     bb4:	bf 91       	pop	r27
     bb6:	af 91       	pop	r26
     bb8:	9f 91       	pop	r25
     bba:	8f 91       	pop	r24
     bbc:	7f 91       	pop	r23
     bbe:	6f 91       	pop	r22
     bc0:	5f 91       	pop	r21
     bc2:	4f 91       	pop	r20
     bc4:	3f 91       	pop	r19
     bc6:	2f 91       	pop	r18
     bc8:	0f 90       	pop	r0
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	0f 90       	pop	r0
     bce:	1f 90       	pop	r1
     bd0:	18 95       	reti

00000bd2 <__vector_22>:

void __vector_22(void) __attribute__((signal));
void __vector_22(void)
{
     bd2:	1f 92       	push	r1
     bd4:	0f 92       	push	r0
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	0f 92       	push	r0
     bda:	11 24       	eor	r1, r1
     bdc:	2f 93       	push	r18
     bde:	3f 93       	push	r19
     be0:	4f 93       	push	r20
     be2:	5f 93       	push	r21
     be4:	6f 93       	push	r22
     be6:	7f 93       	push	r23
     be8:	8f 93       	push	r24
     bea:	9f 93       	push	r25
     bec:	af 93       	push	r26
     bee:	bf 93       	push	r27
     bf0:	ef 93       	push	r30
     bf2:	ff 93       	push	r31
  EE_RDY();
     bf4:	e0 91 6b 01 	lds	r30, 0x016B
     bf8:	f0 91 6c 01 	lds	r31, 0x016C
     bfc:	09 95       	icall
}
     bfe:	ff 91       	pop	r31
     c00:	ef 91       	pop	r30
     c02:	bf 91       	pop	r27
     c04:	af 91       	pop	r26
     c06:	9f 91       	pop	r25
     c08:	8f 91       	pop	r24
     c0a:	7f 91       	pop	r23
     c0c:	6f 91       	pop	r22
     c0e:	5f 91       	pop	r21
     c10:	4f 91       	pop	r20
     c12:	3f 91       	pop	r19
     c14:	2f 91       	pop	r18
     c16:	0f 90       	pop	r0
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	0f 90       	pop	r0
     c1c:	1f 90       	pop	r1
     c1e:	18 95       	reti

00000c20 <__vector_23>:

void __vector_23(void) __attribute__((signal));
void __vector_23(void)
{
     c20:	1f 92       	push	r1
     c22:	0f 92       	push	r0
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	0f 92       	push	r0
     c28:	11 24       	eor	r1, r1
     c2a:	2f 93       	push	r18
     c2c:	3f 93       	push	r19
     c2e:	4f 93       	push	r20
     c30:	5f 93       	push	r21
     c32:	6f 93       	push	r22
     c34:	7f 93       	push	r23
     c36:	8f 93       	push	r24
     c38:	9f 93       	push	r25
     c3a:	af 93       	push	r26
     c3c:	bf 93       	push	r27
     c3e:	ef 93       	push	r30
     c40:	ff 93       	push	r31
  ANA_COMP();
     c42:	e0 91 65 01 	lds	r30, 0x0165
     c46:	f0 91 66 01 	lds	r31, 0x0166
     c4a:	09 95       	icall
}
     c4c:	ff 91       	pop	r31
     c4e:	ef 91       	pop	r30
     c50:	bf 91       	pop	r27
     c52:	af 91       	pop	r26
     c54:	9f 91       	pop	r25
     c56:	8f 91       	pop	r24
     c58:	7f 91       	pop	r23
     c5a:	6f 91       	pop	r22
     c5c:	5f 91       	pop	r21
     c5e:	4f 91       	pop	r20
     c60:	3f 91       	pop	r19
     c62:	2f 91       	pop	r18
     c64:	0f 90       	pop	r0
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	0f 90       	pop	r0
     c6a:	1f 90       	pop	r1
     c6c:	18 95       	reti

00000c6e <__vector_24>:

void __vector_24(void) __attribute__((signal));
void __vector_24(void)
{
     c6e:	1f 92       	push	r1
     c70:	0f 92       	push	r0
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	0f 92       	push	r0
     c76:	11 24       	eor	r1, r1
     c78:	2f 93       	push	r18
     c7a:	3f 93       	push	r19
     c7c:	4f 93       	push	r20
     c7e:	5f 93       	push	r21
     c80:	6f 93       	push	r22
     c82:	7f 93       	push	r23
     c84:	8f 93       	push	r24
     c86:	9f 93       	push	r25
     c88:	af 93       	push	r26
     c8a:	bf 93       	push	r27
     c8c:	ef 93       	push	r30
     c8e:	ff 93       	push	r31
  TWI_I2C();
     c90:	e0 91 4f 01 	lds	r30, 0x014F
     c94:	f0 91 50 01 	lds	r31, 0x0150
     c98:	09 95       	icall
}
     c9a:	ff 91       	pop	r31
     c9c:	ef 91       	pop	r30
     c9e:	bf 91       	pop	r27
     ca0:	af 91       	pop	r26
     ca2:	9f 91       	pop	r25
     ca4:	8f 91       	pop	r24
     ca6:	7f 91       	pop	r23
     ca8:	6f 91       	pop	r22
     caa:	5f 91       	pop	r21
     cac:	4f 91       	pop	r20
     cae:	3f 91       	pop	r19
     cb0:	2f 91       	pop	r18
     cb2:	0f 90       	pop	r0
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	0f 90       	pop	r0
     cb8:	1f 90       	pop	r1
     cba:	18 95       	reti

00000cbc <__vector_25>:

void __vector_25(void) __attribute__((signal));
void __vector_25(void)
{
     cbc:	1f 92       	push	r1
     cbe:	0f 92       	push	r0
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	0f 92       	push	r0
     cc4:	11 24       	eor	r1, r1
     cc6:	2f 93       	push	r18
     cc8:	3f 93       	push	r19
     cca:	4f 93       	push	r20
     ccc:	5f 93       	push	r21
     cce:	6f 93       	push	r22
     cd0:	7f 93       	push	r23
     cd2:	8f 93       	push	r24
     cd4:	9f 93       	push	r25
     cd6:	af 93       	push	r26
     cd8:	bf 93       	push	r27
     cda:	ef 93       	push	r30
     cdc:	ff 93       	push	r31
  SPM_RDY();
     cde:	e0 91 55 01 	lds	r30, 0x0155
     ce2:	f0 91 56 01 	lds	r31, 0x0156
     ce6:	09 95       	icall
}
     ce8:	ff 91       	pop	r31
     cea:	ef 91       	pop	r30
     cec:	bf 91       	pop	r27
     cee:	af 91       	pop	r26
     cf0:	9f 91       	pop	r25
     cf2:	8f 91       	pop	r24
     cf4:	7f 91       	pop	r23
     cf6:	6f 91       	pop	r22
     cf8:	5f 91       	pop	r21
     cfa:	4f 91       	pop	r20
     cfc:	3f 91       	pop	r19
     cfe:	2f 91       	pop	r18
     d00:	0f 90       	pop	r0
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	0f 90       	pop	r0
     d06:	1f 90       	pop	r1
     d08:	18 95       	reti

00000d0a <main>:
 */
#include "glasses_sm.h"
static uint32_t timespend=0;
int main(void)
{
system_init();
     d0a:	0e 94 45 01 	call	0x28a	; 0x28a <system_init>
	while(1)
    {
		//Pwm_Start(PWM_CH0,50,10);
		system_update();
     d0e:	0e 94 4c 01 	call	0x298	; 0x298 <system_update>
     d12:	fd cf       	rjmp	.-6      	; 0xd0e <main+0x4>

00000d14 <motor_init>:
ERROR_STATUS motor_init(void)
{
uint8_t ret =E_OK;


ret=DIO_init(&motor_Configuration_0);
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_init>
DIO_Write(GPIOD,PIN6,HIGH);
     d1c:	83 e0       	ldi	r24, 0x03	; 3
     d1e:	60 e4       	ldi	r22, 0x40	; 64
     d20:	4f ef       	ldi	r20, 0xFF	; 255
     d22:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
ret=Pwm_Init(&PWM_Configuration_0);
     d26:	8a e1       	ldi	r24, 0x1A	; 26
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	0e 94 31 07 	call	0xe62	; 0xe62 <Pwm_Init>
return ret;
}
     d2e:	08 95       	ret

00000d30 <motor_start_sm>:


ERROR_STATUS motor_start_sm(uint8_t state)
{
     d30:	cf 93       	push	r28
     d32:	c8 2f       	mov	r28, r24
  uint8_t ret=E_OK;
  static uint8_t speed=0;
    static uint16_t counter=0;
	 Pwm_Start(PWM_CH0,80,10);
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	60 e5       	ldi	r22, 0x50	; 80
     d38:	2a e0       	ldi	r18, 0x0A	; 10
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	40 e0       	ldi	r20, 0x00	; 0
     d3e:	50 e0       	ldi	r21, 0x00	; 0
     d40:	0e 94 3f 07 	call	0xe7e	; 0xe7e <Pwm_Start>
    if (timer2_interrupt_raised)
     d44:	80 91 47 01 	lds	r24, 0x0147
     d48:	88 23       	and	r24, r24
     d4a:	49 f0       	breq	.+18     	; 0xd5e <motor_start_sm+0x2e>
    {
	    counter++;
     d4c:	80 91 3e 01 	lds	r24, 0x013E
     d50:	90 91 3f 01 	lds	r25, 0x013F
     d54:	01 96       	adiw	r24, 0x01	; 1
     d56:	90 93 3f 01 	sts	0x013F, r25
     d5a:	80 93 3e 01 	sts	0x013E, r24
    }
switch (state) {
     d5e:	c3 30       	cpi	r28, 0x03	; 3
     d60:	89 f1       	breq	.+98     	; 0xdc4 <motor_start_sm+0x94>
     d62:	c4 30       	cpi	r28, 0x04	; 4
     d64:	28 f4       	brcc	.+10     	; 0xd70 <motor_start_sm+0x40>
     d66:	c1 30       	cpi	r28, 0x01	; 1
     d68:	71 f0       	breq	.+28     	; 0xd86 <motor_start_sm+0x56>
     d6a:	c2 30       	cpi	r28, 0x02	; 2
     d6c:	e8 f4       	brcc	.+58     	; 0xda8 <motor_start_sm+0x78>
     d6e:	09 c0       	rjmp	.+18     	; 0xd82 <motor_start_sm+0x52>
     d70:	c5 30       	cpi	r28, 0x05	; 5
     d72:	09 f4       	brne	.+2      	; 0xd76 <motor_start_sm+0x46>
     d74:	47 c0       	rjmp	.+142    	; 0xe04 <motor_start_sm+0xd4>
     d76:	c5 30       	cpi	r28, 0x05	; 5
     d78:	a8 f1       	brcs	.+106    	; 0xde4 <motor_start_sm+0xb4>
     d7a:	c6 30       	cpi	r28, 0x06	; 6
     d7c:	09 f0       	breq	.+2      	; 0xd80 <motor_start_sm+0x50>
     d7e:	62 c0       	rjmp	.+196    	; 0xe44 <motor_start_sm+0x114>
     d80:	51 c0       	rjmp	.+162    	; 0xe24 <motor_start_sm+0xf4>
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	6c c0       	rjmp	.+216    	; 0xe5e <motor_start_sm+0x12e>
  case MOTOR_STOP:

//DIO_Write(GPIOD,BIT7,LOW);
  break;
  case MOTOR_TWO_M:
 speed=10;
     d86:	8a e0       	ldi	r24, 0x0A	; 10
     d88:	80 93 40 01 	sts	0x0140, r24
  if(counter==100){
     d8c:	80 91 3e 01 	lds	r24, 0x013E
     d90:	90 91 3f 01 	lds	r25, 0x013F
     d94:	84 36       	cpi	r24, 0x64	; 100
     d96:	91 05       	cpc	r25, r1
     d98:	09 f0       	breq	.+2      	; 0xd9c <motor_start_sm+0x6c>
     d9a:	56 c0       	rjmp	.+172    	; 0xe48 <motor_start_sm+0x118>
  counter=0;
     d9c:	10 92 3f 01 	sts	0x013F, r1
     da0:	10 92 3e 01 	sts	0x013E, r1
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	5b c0       	rjmp	.+182    	; 0xe5e <motor_start_sm+0x12e>
}

  break;
  speed=20;
  case MOTOR_ONE_HALF_M:
  if(counter==50){
     da8:	80 91 3e 01 	lds	r24, 0x013E
     dac:	90 91 3f 01 	lds	r25, 0x013F
     db0:	82 33       	cpi	r24, 0x32	; 50
     db2:	91 05       	cpc	r25, r1
     db4:	09 f0       	breq	.+2      	; 0xdb8 <motor_start_sm+0x88>
     db6:	4a c0       	rjmp	.+148    	; 0xe4c <motor_start_sm+0x11c>
  counter=0;
     db8:	10 92 3f 01 	sts	0x013F, r1
     dbc:	10 92 3e 01 	sts	0x013E, r1
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	4d c0       	rjmp	.+154    	; 0xe5e <motor_start_sm+0x12e>
  //DIO_Write(GPIOD,BIT7,HIGH);
  }

  break;
  case MOTOR_ONE_M:
  speed=30;
     dc4:	8e e1       	ldi	r24, 0x1E	; 30
     dc6:	80 93 40 01 	sts	0x0140, r24
  if(counter==25){
     dca:	80 91 3e 01 	lds	r24, 0x013E
     dce:	90 91 3f 01 	lds	r25, 0x013F
     dd2:	89 31       	cpi	r24, 0x19	; 25
     dd4:	91 05       	cpc	r25, r1
     dd6:	e1 f5       	brne	.+120    	; 0xe50 <motor_start_sm+0x120>
  counter=0;
     dd8:	10 92 3f 01 	sts	0x013F, r1
     ddc:	10 92 3e 01 	sts	0x013E, r1
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	3d c0       	rjmp	.+122    	; 0xe5e <motor_start_sm+0x12e>
  counter=0;
 // DIO_Write(GPIOD,BIT7,HIGH);
}
  break;
  case MOTOR_HALF_M:
speed=50;
     de4:	82 e3       	ldi	r24, 0x32	; 50
     de6:	80 93 40 01 	sts	0x0140, r24
  if(counter==12){
     dea:	80 91 3e 01 	lds	r24, 0x013E
     dee:	90 91 3f 01 	lds	r25, 0x013F
     df2:	8c 30       	cpi	r24, 0x0C	; 12
     df4:	91 05       	cpc	r25, r1
     df6:	71 f5       	brne	.+92     	; 0xe54 <motor_start_sm+0x124>
  counter=0;
     df8:	10 92 3f 01 	sts	0x013F, r1
     dfc:	10 92 3e 01 	sts	0x013E, r1
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	2d c0       	rjmp	.+90     	; 0xe5e <motor_start_sm+0x12e>
}

  break;
  case MOTOR_30_CM:
  
speed=70;
     e04:	86 e4       	ldi	r24, 0x46	; 70
     e06:	80 93 40 01 	sts	0x0140, r24
  if(counter==7){
     e0a:	80 91 3e 01 	lds	r24, 0x013E
     e0e:	90 91 3f 01 	lds	r25, 0x013F
     e12:	87 30       	cpi	r24, 0x07	; 7
     e14:	91 05       	cpc	r25, r1
     e16:	01 f5       	brne	.+64     	; 0xe58 <motor_start_sm+0x128>
  counter=0;
     e18:	10 92 3f 01 	sts	0x013F, r1
     e1c:	10 92 3e 01 	sts	0x013E, r1
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	1d c0       	rjmp	.+58     	; 0xe5e <motor_start_sm+0x12e>
}

  break;
  case MOTOR_20_CM:

speed=90;
     e24:	8a e5       	ldi	r24, 0x5A	; 90
     e26:	80 93 40 01 	sts	0x0140, r24
  if(counter==2){
     e2a:	80 91 3e 01 	lds	r24, 0x013E
     e2e:	90 91 3f 01 	lds	r25, 0x013F
     e32:	82 30       	cpi	r24, 0x02	; 2
     e34:	91 05       	cpc	r25, r1
     e36:	91 f4       	brne	.+36     	; 0xe5c <motor_start_sm+0x12c>
  counter=0;
     e38:	10 92 3f 01 	sts	0x013F, r1
     e3c:	10 92 3e 01 	sts	0x013E, r1
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	0d c0       	rjmp	.+26     	; 0xe5e <motor_start_sm+0x12e>
 // DIO_Write(GPIOD,BIT7,HIGH);
}

  break;
  default:
ret=E_NOK;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	0b c0       	rjmp	.+22     	; 0xe5e <motor_start_sm+0x12e>
}


ERROR_STATUS motor_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	09 c0       	rjmp	.+18     	; 0xe5e <motor_start_sm+0x12e>
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	07 c0       	rjmp	.+14     	; 0xe5e <motor_start_sm+0x12e>
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	05 c0       	rjmp	.+10     	; 0xe5e <motor_start_sm+0x12e>
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	03 c0       	rjmp	.+6      	; 0xe5e <motor_start_sm+0x12e>
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	01 c0       	rjmp	.+2      	; 0xe5e <motor_start_sm+0x12e>
     e5c:	80 e0       	ldi	r24, 0x00	; 0
  break;
}


  return ret;
}
     e5e:	cf 91       	pop	r28
     e60:	08 95       	ret

00000e62 <Pwm_Init>:
/* Return type : void                                                            */
/*                                                                               */
/* Description: initialize the PWM configuration                                 */
/*********************************************************************************/
ERROR_STATUS Pwm_Init(Pwm_Cfg_s *Pwm_Cfg)
{
     e62:	fc 01       	movw	r30, r24
  uint8_t Ret=0;
  switch(Pwm_Cfg->Channel)
     e64:	80 81       	ld	r24, Z
     e66:	88 23       	and	r24, r24
     e68:	29 f4       	brne	.+10     	; 0xe74 <Pwm_Init+0x12>
    {
      case PWM_CH0:
      TCCR0|=T0_PWM_FAST |T0_NON_INVERTING;
     e6a:	84 b5       	in	r24, 0x24	; 36
     e6c:	95 b5       	in	r25, 0x25	; 37
     e6e:	83 68       	ori	r24, 0x83	; 131
     e70:	95 bd       	out	0x25, r25	; 37
     e72:	84 bd       	out	0x24, r24	; 36
      break;
      default:
      Ret=E_NOK;
      break;*/
    }
  sgl_Prescaler=Pwm_Cfg->Prescaler;
     e74:	81 81       	ldd	r24, Z+1	; 0x01
     e76:	80 93 41 01 	sts	0x0141, r24
  u32g_T1_Prescaler=en_prescal;
  OCR1A =u16_outputCompareA;
  OCR1B =u16_outputCompareB;
  TCNT1=u16_initialValue;
  */
}
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	08 95       	ret

00000e7e <Pwm_Start>:
/*-------------------------------------------------------                        */
/*((all this calculations are for phase correct mode))                           */
/*all this calculation for F_CPU 16MHz                                           */
/*********************************************************************************/
ERROR_STATUS Pwm_Start(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{uint8_t Ret=0;
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	96 2f       	mov	r25, r22
     e84:	ba 01       	movw	r22, r20
     e86:	a9 01       	movw	r20, r18
  float dutyReal;
uint32_t pwm_time_on = MAX_HOLD;

if(Frequncy <= 31372 && Frequncy > 3921 )
     e88:	8a 01       	movw	r16, r20
     e8a:	9b 01       	movw	r18, r22
     e8c:	02 55       	subi	r16, 0x52	; 82
     e8e:	1f 40       	sbci	r17, 0x0F	; 15
     e90:	20 40       	sbci	r18, 0x00	; 0
     e92:	30 40       	sbci	r19, 0x00	; 0
     e94:	0b 33       	cpi	r16, 0x3B	; 59
     e96:	eb e6       	ldi	r30, 0x6B	; 107
     e98:	1e 07       	cpc	r17, r30
     e9a:	e0 e0       	ldi	r30, 0x00	; 0
     e9c:	2e 07       	cpc	r18, r30
     e9e:	e0 e0       	ldi	r30, 0x00	; 0
     ea0:	3e 07       	cpc	r19, r30
     ea2:	18 f4       	brcc	.+6      	; 0xeaa <Pwm_Start+0x2c>
  sgl_Prescaler=PWM_PRESCALER_NO;
     ea4:	10 92 41 01 	sts	0x0141, r1
     ea8:	64 c0       	rjmp	.+200    	; 0xf72 <Pwm_Start+0xf4>
else if(Frequncy <= 3921 && Frequncy > 980)
     eaa:	8a 01       	movw	r16, r20
     eac:	9b 01       	movw	r18, r22
     eae:	05 5d       	subi	r16, 0xD5	; 213
     eb0:	13 40       	sbci	r17, 0x03	; 3
     eb2:	20 40       	sbci	r18, 0x00	; 0
     eb4:	30 40       	sbci	r19, 0x00	; 0
     eb6:	0d 37       	cpi	r16, 0x7D	; 125
     eb8:	eb e0       	ldi	r30, 0x0B	; 11
     eba:	1e 07       	cpc	r17, r30
     ebc:	e0 e0       	ldi	r30, 0x00	; 0
     ebe:	2e 07       	cpc	r18, r30
     ec0:	e0 e0       	ldi	r30, 0x00	; 0
     ec2:	3e 07       	cpc	r19, r30
     ec4:	20 f4       	brcc	.+8      	; 0xece <Pwm_Start+0x50>
  sgl_Prescaler=PWM_PRESCALER_8;
     ec6:	21 e0       	ldi	r18, 0x01	; 1
     ec8:	20 93 41 01 	sts	0x0141, r18
     ecc:	58 c0       	rjmp	.+176    	; 0xf7e <Pwm_Start+0x100>
else if(Frequncy <= 980 && Frequncy > 490)
     ece:	8a 01       	movw	r16, r20
     ed0:	9b 01       	movw	r18, r22
     ed2:	0b 5e       	subi	r16, 0xEB	; 235
     ed4:	11 40       	sbci	r17, 0x01	; 1
     ed6:	20 40       	sbci	r18, 0x00	; 0
     ed8:	30 40       	sbci	r19, 0x00	; 0
     eda:	0a 3e       	cpi	r16, 0xEA	; 234
     edc:	e1 e0       	ldi	r30, 0x01	; 1
     ede:	1e 07       	cpc	r17, r30
     ee0:	e0 e0       	ldi	r30, 0x00	; 0
     ee2:	2e 07       	cpc	r18, r30
     ee4:	e0 e0       	ldi	r30, 0x00	; 0
     ee6:	3e 07       	cpc	r19, r30
     ee8:	20 f4       	brcc	.+8      	; 0xef2 <Pwm_Start+0x74>
  sgl_Prescaler=PWM_PRESCALER_32;
     eea:	22 e0       	ldi	r18, 0x02	; 2
     eec:	20 93 41 01 	sts	0x0141, r18
     ef0:	4c c0       	rjmp	.+152    	; 0xf8a <Pwm_Start+0x10c>
else if(Frequncy <= 490 && Frequncy > 122)
     ef2:	8a 01       	movw	r16, r20
     ef4:	9b 01       	movw	r18, r22
     ef6:	0b 57       	subi	r16, 0x7B	; 123
     ef8:	10 40       	sbci	r17, 0x00	; 0
     efa:	20 40       	sbci	r18, 0x00	; 0
     efc:	30 40       	sbci	r19, 0x00	; 0
     efe:	00 37       	cpi	r16, 0x70	; 112
     f00:	e1 e0       	ldi	r30, 0x01	; 1
     f02:	1e 07       	cpc	r17, r30
     f04:	e0 e0       	ldi	r30, 0x00	; 0
     f06:	2e 07       	cpc	r18, r30
     f08:	e0 e0       	ldi	r30, 0x00	; 0
     f0a:	3e 07       	cpc	r19, r30
     f0c:	20 f4       	brcc	.+8      	; 0xf16 <Pwm_Start+0x98>
  sgl_Prescaler=PWM_PRESCALER_64;
     f0e:	23 e0       	ldi	r18, 0x03	; 3
     f10:	20 93 41 01 	sts	0x0141, r18
     f14:	45 c0       	rjmp	.+138    	; 0xfa0 <Pwm_Start+0x122>
else if(Frequncy <= 122 && Frequncy > 31)
     f16:	8a 01       	movw	r16, r20
     f18:	9b 01       	movw	r18, r22
     f1a:	00 52       	subi	r16, 0x20	; 32
     f1c:	10 40       	sbci	r17, 0x00	; 0
     f1e:	20 40       	sbci	r18, 0x00	; 0
     f20:	30 40       	sbci	r19, 0x00	; 0
     f22:	0b 35       	cpi	r16, 0x5B	; 91
     f24:	11 05       	cpc	r17, r1
     f26:	21 05       	cpc	r18, r1
     f28:	31 05       	cpc	r19, r1
     f2a:	20 f4       	brcc	.+8      	; 0xf34 <Pwm_Start+0xb6>
  sgl_Prescaler=PWM_PRESCALER_256;
     f2c:	24 e0       	ldi	r18, 0x04	; 4
     f2e:	20 93 41 01 	sts	0x0141, r18
     f32:	3c c0       	rjmp	.+120    	; 0xfac <Pwm_Start+0x12e>
else if(Frequncy <= 31 && Frequncy > 0)
     f34:	41 50       	subi	r20, 0x01	; 1
     f36:	50 40       	sbci	r21, 0x00	; 0
     f38:	60 40       	sbci	r22, 0x00	; 0
     f3a:	70 40       	sbci	r23, 0x00	; 0
     f3c:	4f 31       	cpi	r20, 0x1F	; 31
     f3e:	51 05       	cpc	r21, r1
     f40:	61 05       	cpc	r22, r1
     f42:	71 05       	cpc	r23, r1
     f44:	20 f4       	brcc	.+8      	; 0xf4e <Pwm_Start+0xd0>
  sgl_Prescaler=PWM_PRESCALER_1024;
     f46:	25 e0       	ldi	r18, 0x05	; 5
     f48:	20 93 41 01 	sts	0x0141, r18
     f4c:	35 c0       	rjmp	.+106    	; 0xfb8 <Pwm_Start+0x13a>
else{Ret=E_NOK;}
switch(sgl_Prescaler)
     f4e:	20 91 41 01 	lds	r18, 0x0141
     f52:	22 30       	cpi	r18, 0x02	; 2
     f54:	d1 f0       	breq	.+52     	; 0xf8a <Pwm_Start+0x10c>
     f56:	23 30       	cpi	r18, 0x03	; 3
     f58:	28 f4       	brcc	.+10     	; 0xf64 <Pwm_Start+0xe6>
     f5a:	22 23       	and	r18, r18
     f5c:	51 f0       	breq	.+20     	; 0xf72 <Pwm_Start+0xf4>
     f5e:	21 30       	cpi	r18, 0x01	; 1
     f60:	89 f5       	brne	.+98     	; 0xfc4 <Pwm_Start+0x146>
     f62:	0d c0       	rjmp	.+26     	; 0xf7e <Pwm_Start+0x100>
     f64:	24 30       	cpi	r18, 0x04	; 4
     f66:	11 f1       	breq	.+68     	; 0xfac <Pwm_Start+0x12e>
     f68:	24 30       	cpi	r18, 0x04	; 4
     f6a:	d0 f0       	brcs	.+52     	; 0xfa0 <Pwm_Start+0x122>
     f6c:	25 30       	cpi	r18, 0x05	; 5
     f6e:	51 f5       	brne	.+84     	; 0xfc4 <Pwm_Start+0x146>
     f70:	23 c0       	rjmp	.+70     	; 0xfb8 <Pwm_Start+0x13a>
{
  case PWM_PRESCALER_NO:
  {
    switch(Channel)
     f72:	88 23       	and	r24, r24
     f74:	39 f5       	brne	.+78     	; 0xfc4 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B |= PWM_PRESCALER_NO_CONFIG;
     f76:	85 b5       	in	r24, 0x25	; 37
     f78:	81 60       	ori	r24, 0x01	; 1
     f7a:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     f7c:	25 c0       	rjmp	.+74     	; 0xfc8 <Pwm_Start+0x14a>
  }


  case PWM_PRESCALER_8:
  {
    switch(Channel)
     f7e:	88 23       	and	r24, r24
     f80:	09 f5       	brne	.+66     	; 0xfc4 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_8_CONFIG;
     f82:	85 b5       	in	r24, 0x25	; 37
     f84:	82 60       	ori	r24, 0x02	; 2
     f86:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     f88:	1f c0       	rjmp	.+62     	; 0xfc8 <Pwm_Start+0x14a>
    break;
  }

  case PWM_PRESCALER_32:
  {
    switch(Channel)
     f8a:	83 30       	cpi	r24, 0x03	; 3
     f8c:	d9 f4       	brne	.+54     	; 0xfc4 <Pwm_Start+0x146>
    {
      case PWM_CH2:
      {TCCR2|=PWM_PRESCALER_32_CONFIG_T2;
     f8e:	e0 eb       	ldi	r30, 0xB0	; 176
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	91 81       	ldd	r25, Z+1	; 0x01
     f96:	83 60       	ori	r24, 0x03	; 3
     f98:	91 83       	std	Z+1, r25	; 0x01
     f9a:	80 83       	st	Z, r24
      Ret=E_OK;
      }
      break;
  */
      default:
      Ret=E_NOK;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	2f c0       	rjmp	.+94     	; 0xffe <Pwm_Start+0x180>
    break;
  }

  case PWM_PRESCALER_64:
  {
    switch(Channel)
     fa0:	88 23       	and	r24, r24
     fa2:	81 f4       	brne	.+32     	; 0xfc4 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_64_CONFIG;
     fa4:	85 b5       	in	r24, 0x25	; 37
     fa6:	83 60       	ori	r24, 0x03	; 3
     fa8:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     faa:	0e c0       	rjmp	.+28     	; 0xfc8 <Pwm_Start+0x14a>
    break;
  }

  case PWM_PRESCALER_256:
  {
    switch(Channel)
     fac:	88 23       	and	r24, r24
     fae:	51 f4       	brne	.+20     	; 0xfc4 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_64_CONFIG;
     fb0:	85 b5       	in	r24, 0x25	; 37
     fb2:	83 60       	ori	r24, 0x03	; 3
     fb4:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     fb6:	08 c0       	rjmp	.+16     	; 0xfc8 <Pwm_Start+0x14a>
  }

 
  case PWM_PRESCALER_1024:
  {
    switch(Channel)
     fb8:	88 23       	and	r24, r24
     fba:	21 f4       	brne	.+8      	; 0xfc4 <Pwm_Start+0x146>
    {
      case PWM_CH0:
      {
        TCCR0B|=PWM_PRESCALER_1024_CONFIG;
     fbc:	85 b5       	in	r24, 0x25	; 37
     fbe:	85 60       	ori	r24, 0x05	; 5
     fc0:	85 bd       	out	0x25, r24	; 37
        Ret=E_OK;
        break;
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <Pwm_Start+0x14a>



}

switch(Channel)
     fc4:	88 23       	and	r24, r24
     fc6:	d1 f4       	brne	.+52     	; 0xffc <Pwm_Start+0x17e>
    {
      case PWM_CH0:{
      pwm_time_on=MAX_HOLD;
      dutyReal=((float)Duty/(float)FULL_SPEED);
     fc8:	69 2f       	mov	r22, r25
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__floatunsisf>
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	48 ec       	ldi	r20, 0xC8	; 200
     fda:	52 e4       	ldi	r21, 0x42	; 66
     fdc:	0e 94 5f 0c 	call	0x18be	; 0x18be <__divsf3>
      pwm_time_on=(float)pwm_time_on*dutyReal;
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	4f e7       	ldi	r20, 0x7F	; 127
     fe6:	53 e4       	ldi	r21, 0x43	; 67
     fe8:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__mulsf3>
     fec:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
      OCR0=pwm_time_on;
     ff4:	98 bd       	out	0x28, r25	; 40
     ff6:	87 bd       	out	0x27, r24	; 39
      Ret=E_OK;
     ff8:	80 e0       	ldi	r24, 0x00	; 0
      break;
     ffa:	01 c0       	rjmp	.+2      	; 0xffe <Pwm_Start+0x180>
      Ret=E_OK;
      }
      break;
  */
      default:
      Ret=E_NOK;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
      break;
    }
sgl_is_started=1;
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	90 93 42 01 	sts	0x0142, r25
return Ret;
}
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	08 95       	ret

0000100a <Pwm_Update>:


ERROR_STATUS Pwm_Update(uint8_t Channel,uint8_t Duty,uint32_t Frequncy)
{
uint8_t Ret=0;
if (sgl_is_started == 1)
    100a:	90 91 42 01 	lds	r25, 0x0142
    100e:	91 30       	cpi	r25, 0x01	; 1
    1010:	21 f4       	brne	.+8      	; 0x101a <Pwm_Update+0x10>
{
  Pwm_Start( Channel,Duty,Frequncy);
    1012:	0e 94 3f 07 	call	0xe7e	; 0xe7e <Pwm_Start>
Ret=E_OK;
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	08 95       	ret
}else{Ret=E_NOK;}
    101a:	81 e0       	ldi	r24, 0x01	; 1


return Ret;
}
    101c:	08 95       	ret

0000101e <Pwm_Stop>:
/*********************************************************************************/

ERROR_STATUS Pwm_Stop(uint8_t Channel)
{
uint8_t Ret=0;
switch(Channel)
    101e:	83 30       	cpi	r24, 0x03	; 3
    1020:	18 f4       	brcc	.+6      	; 0x1028 <Pwm_Stop+0xa>
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	60 f4       	brcc	.+24     	; 0x103e <Pwm_Stop+0x20>
    1026:	03 c0       	rjmp	.+6      	; 0x102e <Pwm_Stop+0x10>
    1028:	83 30       	cpi	r24, 0x03	; 3
    102a:	d1 f4       	brne	.+52     	; 0x1060 <Pwm_Stop+0x42>
    102c:	0f c0       	rjmp	.+30     	; 0x104c <Pwm_Stop+0x2e>
{
  case PWM_CH0:
  TCCR0 &=TIMER_STOPT02;
    102e:	84 b5       	in	r24, 0x24	; 36
    1030:	95 b5       	in	r25, 0x25	; 37
    1032:	88 7f       	andi	r24, 0xF8	; 248
    1034:	90 70       	andi	r25, 0x00	; 0
    1036:	95 bd       	out	0x25, r25	; 37
    1038:	84 bd       	out	0x24, r24	; 36
  Ret=E_OK;
    103a:	80 e0       	ldi	r24, 0x00	; 0
  break;
    103c:	08 95       	ret

  case PWM_CH1A:
  case PWM_CH1B:
  TCCR0 &=TIMER_STOPT1;
    103e:	84 b5       	in	r24, 0x24	; 36
    1040:	95 b5       	in	r25, 0x25	; 37
    1042:	98 7f       	andi	r25, 0xF8	; 248
    1044:	95 bd       	out	0x25, r25	; 37
    1046:	84 bd       	out	0x24, r24	; 36
  Ret=E_OK;
    1048:	80 e0       	ldi	r24, 0x00	; 0
  break;
    104a:	08 95       	ret


  case PWM_CH2:
  TCCR2 &=TIMER_STOPT02;
    104c:	e0 eb       	ldi	r30, 0xB0	; 176
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	91 81       	ldd	r25, Z+1	; 0x01
    1054:	88 7f       	andi	r24, 0xF8	; 248
    1056:	90 70       	andi	r25, 0x00	; 0
    1058:	91 83       	std	Z+1, r25	; 0x01
    105a:	80 83       	st	Z, r24
  Ret=E_OK;
    105c:	80 e0       	ldi	r24, 0x00	; 0
  break;
    105e:	08 95       	ret
  default:
  Ret=E_NOK;
    1060:	81 e0       	ldi	r24, 0x01	; 1
  break;
}

return Ret;
}
    1062:	08 95       	ret

00001064 <speaker_init>:
static uint16_t counter=0;

ERROR_STATUS speaker_init(void)
{
  uint8_t ret =E_OK;
  	ret=DIO_init(&speaker_Configuration_0);
    1064:	83 e0       	ldi	r24, 0x03	; 3
    1066:	91 e0       	ldi	r25, 0x01	; 1
    1068:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_init>
  return ret;
}
    106c:	08 95       	ret

0000106e <speaker_start_sm>:

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
  
  if (timer2_interrupt_raised)
    106e:	90 91 47 01 	lds	r25, 0x0147
    1072:	99 23       	and	r25, r25
    1074:	51 f0       	breq	.+20     	; 0x108a <speaker_start_sm+0x1c>
  {
	  counter++;
    1076:	20 91 43 01 	lds	r18, 0x0143
    107a:	30 91 44 01 	lds	r19, 0x0144
    107e:	2f 5f       	subi	r18, 0xFF	; 255
    1080:	3f 4f       	sbci	r19, 0xFF	; 255
    1082:	30 93 44 01 	sts	0x0144, r19
    1086:	20 93 43 01 	sts	0x0143, r18
  }
switch (state) {
    108a:	83 30       	cpi	r24, 0x03	; 3
    108c:	09 f4       	brne	.+2      	; 0x1090 <speaker_start_sm+0x22>
    108e:	70 c0       	rjmp	.+224    	; 0x1170 <speaker_start_sm+0x102>
    1090:	84 30       	cpi	r24, 0x04	; 4
    1092:	30 f4       	brcc	.+12     	; 0x10a0 <speaker_start_sm+0x32>
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	d1 f0       	breq	.+52     	; 0x10cc <speaker_start_sm+0x5e>
    1098:	82 30       	cpi	r24, 0x02	; 2
    109a:	08 f0       	brcs	.+2      	; 0x109e <speaker_start_sm+0x30>
    109c:	40 c0       	rjmp	.+128    	; 0x111e <speaker_start_sm+0xb0>
    109e:	0a c0       	rjmp	.+20     	; 0x10b4 <speaker_start_sm+0x46>
    10a0:	85 30       	cpi	r24, 0x05	; 5
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <speaker_start_sm+0x38>
    10a4:	b7 c0       	rjmp	.+366    	; 0x1214 <speaker_start_sm+0x1a6>
    10a6:	85 30       	cpi	r24, 0x05	; 5
    10a8:	08 f4       	brcc	.+2      	; 0x10ac <speaker_start_sm+0x3e>
    10aa:	8b c0       	rjmp	.+278    	; 0x11c2 <speaker_start_sm+0x154>
    10ac:	86 30       	cpi	r24, 0x06	; 6
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <speaker_start_sm+0x44>
    10b0:	03 c1       	rjmp	.+518    	; 0x12b8 <speaker_start_sm+0x24a>
    10b2:	d9 c0       	rjmp	.+434    	; 0x1266 <speaker_start_sm+0x1f8>
	case SPEAKER_STOP:
		 DIO_Write(GPIOC,BIT3,LOW);
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	68 e0       	ldi	r22, 0x08	; 8
    10b8:	40 e0       	ldi	r20, 0x00	; 0
    10ba:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
		 DIO_Write(GPIOD,BIT7,LOW);
    10be:	83 e0       	ldi	r24, 0x03	; 3
    10c0:	60 e8       	ldi	r22, 0x80	; 128
    10c2:	40 e0       	ldi	r20, 0x00	; 0
    10c4:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    10c8:	80 e0       	ldi	r24, 0x00	; 0
  }
switch (state) {
	case SPEAKER_STOP:
		 DIO_Write(GPIOC,BIT3,LOW);
		 DIO_Write(GPIOD,BIT7,LOW);
	break;
    10ca:	08 95       	ret
	case SPEAKER_TWO_M:
		if(counter < 43)
    10cc:	80 91 43 01 	lds	r24, 0x0143
    10d0:	90 91 44 01 	lds	r25, 0x0144
    10d4:	8b 32       	cpi	r24, 0x2B	; 43
    10d6:	91 05       	cpc	r25, r1
    10d8:	60 f4       	brcc	.+24     	; 0x10f2 <speaker_start_sm+0x84>
		 {
			  DIO_Write(GPIOC,BIT3,LOW);
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	68 e0       	ldi	r22, 0x08	; 8
    10de:	40 e0       	ldi	r20, 0x00	; 0
    10e0:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
			  DIO_Write(GPIOD,BIT7,LOW);
    10e4:	83 e0       	ldi	r24, 0x03	; 3
    10e6:	60 e8       	ldi	r22, 0x80	; 128
    10e8:	40 e0       	ldi	r20, 0x00	; 0
    10ea:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	08 95       	ret
		if(counter < 43)
		 {
			  DIO_Write(GPIOC,BIT3,LOW);
			  DIO_Write(GPIOD,BIT7,LOW);
		}
		else if(counter >= 43 && counter <= 63)
    10f2:	8b 97       	sbiw	r24, 0x2b	; 43
    10f4:	85 31       	cpi	r24, 0x15	; 21
    10f6:	91 05       	cpc	r25, r1
    10f8:	60 f4       	brcc	.+24     	; 0x1112 <speaker_start_sm+0xa4>
		{
			DIO_Write(GPIOC,BIT3,HIGH);
    10fa:	82 e0       	ldi	r24, 0x02	; 2
    10fc:	68 e0       	ldi	r22, 0x08	; 8
    10fe:	4f ef       	ldi	r20, 0xFF	; 255
    1100:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
		    DIO_Write(GPIOD,BIT7,HIGH);
    1104:	83 e0       	ldi	r24, 0x03	; 3
    1106:	60 e8       	ldi	r22, 0x80	; 128
    1108:	4f ef       	ldi	r20, 0xFF	; 255
    110a:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	08 95       	ret
		{
			DIO_Write(GPIOC,BIT3,HIGH);
		    DIO_Write(GPIOD,BIT7,HIGH);
		
		
		}else{counter=0;}
    1112:	10 92 44 01 	sts	0x0144, r1
    1116:	10 92 43 01 	sts	0x0143, r1
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	08 95       	ret
		
		}else{counter=0;}
  
   break;
  case SPEAKER_ONE_HALF_M:
  if(counter < 37)
    111e:	80 91 43 01 	lds	r24, 0x0143
    1122:	90 91 44 01 	lds	r25, 0x0144
    1126:	85 32       	cpi	r24, 0x25	; 37
    1128:	91 05       	cpc	r25, r1
    112a:	60 f4       	brcc	.+24     	; 0x1144 <speaker_start_sm+0xd6>
  {
	  DIO_Write(GPIOC,BIT3,LOW);
    112c:	82 e0       	ldi	r24, 0x02	; 2
    112e:	68 e0       	ldi	r22, 0x08	; 8
    1130:	40 e0       	ldi	r20, 0x00	; 0
    1132:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
	  DIO_Write(GPIOD,BIT7,LOW);
    1136:	83 e0       	ldi	r24, 0x03	; 3
    1138:	60 e8       	ldi	r22, 0x80	; 128
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	08 95       	ret
  case SPEAKER_ONE_HALF_M:
  if(counter < 37)
  {
	  DIO_Write(GPIOC,BIT3,LOW);
	  DIO_Write(GPIOD,BIT7,LOW);
  }else if(counter >= 37 && counter <= 63)
    1144:	85 97       	sbiw	r24, 0x25	; 37
    1146:	8b 31       	cpi	r24, 0x1B	; 27
    1148:	91 05       	cpc	r25, r1
    114a:	60 f4       	brcc	.+24     	; 0x1164 <speaker_start_sm+0xf6>
  {  DIO_Write(GPIOC,BIT3,HIGH);
    114c:	82 e0       	ldi	r24, 0x02	; 2
    114e:	68 e0       	ldi	r22, 0x08	; 8
    1150:	4f ef       	ldi	r20, 0xFF	; 255
    1152:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
	  DIO_Write(GPIOD,BIT7,HIGH);
    1156:	83 e0       	ldi	r24, 0x03	; 3
    1158:	60 e8       	ldi	r22, 0x80	; 128
    115a:	4f ef       	ldi	r20, 0xFF	; 255
    115c:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	08 95       	ret
	  DIO_Write(GPIOD,BIT7,LOW);
  }else if(counter >= 37 && counter <= 63)
  {  DIO_Write(GPIOC,BIT3,HIGH);
	  DIO_Write(GPIOD,BIT7,HIGH);
	 
  }else{counter=0;}
    1164:	10 92 44 01 	sts	0x0144, r1
    1168:	10 92 43 01 	sts	0x0143, r1
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	08 95       	ret
	 
  }else{counter=0;}
  
  break;
  case SPEAKER_ONE_M:
  if(counter < 31)
    1170:	80 91 43 01 	lds	r24, 0x0143
    1174:	90 91 44 01 	lds	r25, 0x0144
    1178:	8f 31       	cpi	r24, 0x1F	; 31
    117a:	91 05       	cpc	r25, r1
    117c:	60 f4       	brcc	.+24     	; 0x1196 <speaker_start_sm+0x128>
  {
	  DIO_Write(GPIOC,BIT3,LOW);
    117e:	82 e0       	ldi	r24, 0x02	; 2
    1180:	68 e0       	ldi	r22, 0x08	; 8
    1182:	40 e0       	ldi	r20, 0x00	; 0
    1184:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
	  DIO_Write(GPIOD,BIT7,LOW);
    1188:	83 e0       	ldi	r24, 0x03	; 3
    118a:	60 e8       	ldi	r22, 0x80	; 128
    118c:	40 e0       	ldi	r20, 0x00	; 0
    118e:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	08 95       	ret
  case SPEAKER_ONE_M:
  if(counter < 31)
  {
	  DIO_Write(GPIOC,BIT3,LOW);
	  DIO_Write(GPIOD,BIT7,LOW);
  }else if(counter >= 31 && counter <= 63)
    1196:	4f 97       	sbiw	r24, 0x1f	; 31
    1198:	81 32       	cpi	r24, 0x21	; 33
    119a:	91 05       	cpc	r25, r1
    119c:	60 f4       	brcc	.+24     	; 0x11b6 <speaker_start_sm+0x148>
  {  DIO_Write(GPIOC,BIT3,HIGH);
    119e:	82 e0       	ldi	r24, 0x02	; 2
    11a0:	68 e0       	ldi	r22, 0x08	; 8
    11a2:	4f ef       	ldi	r20, 0xFF	; 255
    11a4:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
	  DIO_Write(GPIOD,BIT7,HIGH);  
    11a8:	83 e0       	ldi	r24, 0x03	; 3
    11aa:	60 e8       	ldi	r22, 0x80	; 128
    11ac:	4f ef       	ldi	r20, 0xFF	; 255
    11ae:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	08 95       	ret
	  DIO_Write(GPIOC,BIT3,LOW);
	  DIO_Write(GPIOD,BIT7,LOW);
  }else if(counter >= 31 && counter <= 63)
  {  DIO_Write(GPIOC,BIT3,HIGH);
	  DIO_Write(GPIOD,BIT7,HIGH);  
  }else{counter=0;}
    11b6:	10 92 44 01 	sts	0x0144, r1
    11ba:	10 92 43 01 	sts	0x0143, r1
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	08 95       	ret
  {  DIO_Write(GPIOC,BIT3,HIGH);
	  DIO_Write(GPIOD,BIT7,HIGH);  
  }else{counter=0;}
  break;
  case SPEAKER_HALF_M:
  if(counter < 25)
    11c2:	80 91 43 01 	lds	r24, 0x0143
    11c6:	90 91 44 01 	lds	r25, 0x0144
    11ca:	89 31       	cpi	r24, 0x19	; 25
    11cc:	91 05       	cpc	r25, r1
    11ce:	60 f4       	brcc	.+24     	; 0x11e8 <speaker_start_sm+0x17a>
  {
	  DIO_Write(GPIOC,BIT3,LOW);
    11d0:	82 e0       	ldi	r24, 0x02	; 2
    11d2:	68 e0       	ldi	r22, 0x08	; 8
    11d4:	40 e0       	ldi	r20, 0x00	; 0
    11d6:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
	  DIO_Write(GPIOD,BIT7,LOW);
    11da:	83 e0       	ldi	r24, 0x03	; 3
    11dc:	60 e8       	ldi	r22, 0x80	; 128
    11de:	40 e0       	ldi	r20, 0x00	; 0
    11e0:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	08 95       	ret
  case SPEAKER_HALF_M:
  if(counter < 25)
  {
	  DIO_Write(GPIOC,BIT3,LOW);
	  DIO_Write(GPIOD,BIT7,LOW);
  }else if(counter >= 25 && counter <= 63)
    11e8:	49 97       	sbiw	r24, 0x19	; 25
    11ea:	87 32       	cpi	r24, 0x27	; 39
    11ec:	91 05       	cpc	r25, r1
    11ee:	60 f4       	brcc	.+24     	; 0x1208 <speaker_start_sm+0x19a>
  {  DIO_Write(GPIOC,BIT3,HIGH);
    11f0:	82 e0       	ldi	r24, 0x02	; 2
    11f2:	68 e0       	ldi	r22, 0x08	; 8
    11f4:	4f ef       	ldi	r20, 0xFF	; 255
    11f6:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
	  DIO_Write(GPIOD,BIT7,HIGH);
    11fa:	83 e0       	ldi	r24, 0x03	; 3
    11fc:	60 e8       	ldi	r22, 0x80	; 128
    11fe:	4f ef       	ldi	r20, 0xFF	; 255
    1200:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	08 95       	ret
  }else if(counter >= 25 && counter <= 63)
  {  DIO_Write(GPIOC,BIT3,HIGH);
	  DIO_Write(GPIOD,BIT7,HIGH);
	  
  }else{
	  counter=0;
    1208:	10 92 44 01 	sts	0x0144, r1
    120c:	10 92 43 01 	sts	0x0143, r1
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	08 95       	ret
  }else{
	  counter=0;
	  }
    break;
  case SPEAKER_30_CM:
 if(counter < 19)
    1214:	80 91 43 01 	lds	r24, 0x0143
    1218:	90 91 44 01 	lds	r25, 0x0144
    121c:	83 31       	cpi	r24, 0x13	; 19
    121e:	91 05       	cpc	r25, r1
    1220:	60 f4       	brcc	.+24     	; 0x123a <speaker_start_sm+0x1cc>
 {
	 DIO_Write(GPIOC,BIT3,LOW);
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	68 e0       	ldi	r22, 0x08	; 8
    1226:	40 e0       	ldi	r20, 0x00	; 0
    1228:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
	 DIO_Write(GPIOD,BIT7,LOW);
    122c:	83 e0       	ldi	r24, 0x03	; 3
    122e:	60 e8       	ldi	r22, 0x80	; 128
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	08 95       	ret
  case SPEAKER_30_CM:
 if(counter < 19)
 {
	 DIO_Write(GPIOC,BIT3,LOW);
	 DIO_Write(GPIOD,BIT7,LOW);
 }else if(counter >= 19 && counter <= 63)
    123a:	43 97       	sbiw	r24, 0x13	; 19
    123c:	8d 32       	cpi	r24, 0x2D	; 45
    123e:	91 05       	cpc	r25, r1
    1240:	60 f4       	brcc	.+24     	; 0x125a <speaker_start_sm+0x1ec>
 {  DIO_Write(GPIOC,BIT3,HIGH);
    1242:	82 e0       	ldi	r24, 0x02	; 2
    1244:	68 e0       	ldi	r22, 0x08	; 8
    1246:	4f ef       	ldi	r20, 0xFF	; 255
    1248:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
	 DIO_Write(GPIOD,BIT7,HIGH);
    124c:	83 e0       	ldi	r24, 0x03	; 3
    124e:	60 e8       	ldi	r22, 0x80	; 128
    1250:	4f ef       	ldi	r20, 0xFF	; 255
    1252:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	08 95       	ret
	 DIO_Write(GPIOD,BIT7,LOW);
 }else if(counter >= 19 && counter <= 63)
 {  DIO_Write(GPIOC,BIT3,HIGH);
	 DIO_Write(GPIOD,BIT7,HIGH);
	 
 }else{counter=0;}
    125a:	10 92 44 01 	sts	0x0144, r1
    125e:	10 92 43 01 	sts	0x0143, r1
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	08 95       	ret
	 DIO_Write(GPIOD,BIT7,HIGH);
	 
 }else{counter=0;}
break;
  case SPEAKER_20_CM:
 if(counter < 13)
    1266:	80 91 43 01 	lds	r24, 0x0143
    126a:	90 91 44 01 	lds	r25, 0x0144
    126e:	8d 30       	cpi	r24, 0x0D	; 13
    1270:	91 05       	cpc	r25, r1
    1272:	60 f4       	brcc	.+24     	; 0x128c <speaker_start_sm+0x21e>
 {
	 DIO_Write(GPIOC,BIT3,LOW);
    1274:	82 e0       	ldi	r24, 0x02	; 2
    1276:	68 e0       	ldi	r22, 0x08	; 8
    1278:	40 e0       	ldi	r20, 0x00	; 0
    127a:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
	 DIO_Write(GPIOD,BIT7,LOW);
    127e:	83 e0       	ldi	r24, 0x03	; 3
    1280:	60 e8       	ldi	r22, 0x80	; 128
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	08 95       	ret
  case SPEAKER_20_CM:
 if(counter < 13)
 {
	 DIO_Write(GPIOC,BIT3,LOW);
	 DIO_Write(GPIOD,BIT7,LOW);
 }else if(counter >= 13 && counter <= 63)
    128c:	0d 97       	sbiw	r24, 0x0d	; 13
    128e:	83 33       	cpi	r24, 0x33	; 51
    1290:	91 05       	cpc	r25, r1
    1292:	60 f4       	brcc	.+24     	; 0x12ac <speaker_start_sm+0x23e>
 {  DIO_Write(GPIOC,BIT3,HIGH);
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	68 e0       	ldi	r22, 0x08	; 8
    1298:	4f ef       	ldi	r20, 0xFF	; 255
    129a:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
	 DIO_Write(GPIOD,BIT7,HIGH);
    129e:	83 e0       	ldi	r24, 0x03	; 3
    12a0:	60 e8       	ldi	r22, 0x80	; 128
    12a2:	4f ef       	ldi	r20, 0xFF	; 255
    12a4:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_Write>
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	08 95       	ret
	 DIO_Write(GPIOC,BIT3,LOW);
	 DIO_Write(GPIOD,BIT7,LOW);
 }else if(counter >= 13 && counter <= 63)
 {  DIO_Write(GPIOC,BIT3,HIGH);
	 DIO_Write(GPIOD,BIT7,HIGH);
 }else{counter=0;}
    12ac:	10 92 44 01 	sts	0x0144, r1
    12b0:	10 92 43 01 	sts	0x0143, r1
  return ret;
}

ERROR_STATUS speaker_start_sm(uint8_t state)
{
  uint8_t ret=E_OK;
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	08 95       	ret
 {  DIO_Write(GPIOC,BIT3,HIGH);
	 DIO_Write(GPIOD,BIT7,HIGH);
 }else{counter=0;}
break;
  default:
ret=E_NOK;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
  break;
}

return ret;
}
    12ba:	08 95       	ret

000012bc <timer0Set>:
}

}
void timer0Set(uint8_t u8_value)
{
TCNT0 =	u8_value;
    12bc:	86 bd       	out	0x26, r24	; 38
}
    12be:	08 95       	ret

000012c0 <timer0Read>:

uint8_t timer0Read(void)
{
	 return TCNT0;
    12c0:	86 b5       	in	r24, 0x26	; 38
}
    12c2:	08 95       	ret

000012c4 <timer0Start>:
Depending on prescaler	x     X    X

*/
void timer0Start(void)
{
	 TCCR0 &= (0xF8);
    12c4:	84 b5       	in	r24, 0x24	; 36
    12c6:	95 b5       	in	r25, 0x25	; 37
    12c8:	88 7f       	andi	r24, 0xF8	; 248
    12ca:	90 70       	andi	r25, 0x00	; 0
    12cc:	95 bd       	out	0x25, r25	; 37
    12ce:	84 bd       	out	0x24, r24	; 36
	 TCCR0 |= Prescaler_Value;
    12d0:	24 b5       	in	r18, 0x24	; 36
    12d2:	35 b5       	in	r19, 0x25	; 37
    12d4:	80 91 4e 01 	lds	r24, 0x014E
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	82 2b       	or	r24, r18
    12dc:	93 2b       	or	r25, r19
    12de:	95 bd       	out	0x25, r25	; 37
    12e0:	84 bd       	out	0x24, r24	; 36
}
    12e2:	08 95       	ret

000012e4 <timer0Stop>:
						      0     0    0
*/
void timer0Stop(void)
 {

TCCR0 &= (0xF8);
    12e4:	84 b5       	in	r24, 0x24	; 36
    12e6:	95 b5       	in	r25, 0x25	; 37
    12e8:	88 7f       	andi	r24, 0xF8	; 248
    12ea:	90 70       	andi	r25, 0x00	; 0
    12ec:	95 bd       	out	0x25, r25	; 37
    12ee:	84 bd       	out	0x24, r24	; 36

 }
    12f0:	08 95       	ret

000012f2 <timer0Init>:
uint8_t u8g_T1_Prescaler=0;
volatile uint8_t pwm_time_on=0,flag=0;
volatile uint8_t timer2_interrupt_raised = 0;
volatile uint16_t timer2_interrupt_counter =0;
void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal,uint8_t u8_initialValue, uint8_t u8_outputCompare,En_timer0Interrupt_t en_interruptMask)
{
    12f2:	ef 92       	push	r14
    12f4:	0f 93       	push	r16
    12f6:	1f 93       	push	r17
if(en_prescal == T0_NO_CLOCK)
    12f8:	44 23       	and	r20, r20
    12fa:	19 f4       	brne	.+6      	; 0x1302 <timer0Init+0x10>
{/*
if there is no clock the timer will be disabled
*/
timer0Stop();
    12fc:	0e 94 72 09 	call	0x12e4	; 0x12e4 <timer0Stop>
    1300:	5d c0       	rjmp	.+186    	; 0x13bc <timer0Init+0xca>
}
else
{
TCCR0 |= en_mode|en_prescal;
    1302:	e4 b5       	in	r30, 0x24	; 36
    1304:	f5 b5       	in	r31, 0x25	; 37
    1306:	84 2b       	or	r24, r20
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	8e 2b       	or	r24, r30
    130c:	9f 2b       	or	r25, r31
    130e:	95 bd       	out	0x25, r25	; 37
    1310:	84 bd       	out	0x24, r24	; 36
Prescaler_Value=en_prescal;
    1312:	40 93 4e 01 	sts	0x014E, r20
TCNT0 = u8_initialValue;
    1316:	26 bd       	out	0x26, r18	; 38
switch(en_OC0){
    1318:	60 31       	cpi	r22, 0x10	; 16
    131a:	89 f0       	breq	.+34     	; 0x133e <timer0Init+0x4c>
    131c:	61 31       	cpi	r22, 0x11	; 17
    131e:	18 f4       	brcc	.+6      	; 0x1326 <timer0Init+0x34>
    1320:	66 23       	and	r22, r22
    1322:	31 f0       	breq	.+12     	; 0x1330 <timer0Init+0x3e>
    1324:	1d c0       	rjmp	.+58     	; 0x1360 <timer0Init+0x6e>
    1326:	60 32       	cpi	r22, 0x20	; 32
    1328:	81 f0       	breq	.+32     	; 0x134a <timer0Init+0x58>
    132a:	60 33       	cpi	r22, 0x30	; 48
    132c:	c9 f4       	brne	.+50     	; 0x1360 <timer0Init+0x6e>
    132e:	13 c0       	rjmp	.+38     	; 0x1356 <timer0Init+0x64>
	case  T0_OC0_DIS:
	{
	TCCR0 &= 0xCF;
    1330:	84 b5       	in	r24, 0x24	; 36
    1332:	95 b5       	in	r25, 0x25	; 37
    1334:	8f 7c       	andi	r24, 0xCF	; 207
    1336:	90 70       	andi	r25, 0x00	; 0
    1338:	95 bd       	out	0x25, r25	; 37
    133a:	84 bd       	out	0x24, r24	; 36
		break;
    133c:	11 c0       	rjmp	.+34     	; 0x1360 <timer0Init+0x6e>
	}
	case T0_OC0_TOGGLE:
	{
		TCCR0|=T0_OC0_TOGGLE;
    133e:	84 b5       	in	r24, 0x24	; 36
    1340:	95 b5       	in	r25, 0x25	; 37
    1342:	80 61       	ori	r24, 0x10	; 16
    1344:	95 bd       	out	0x25, r25	; 37
    1346:	84 bd       	out	0x24, r24	; 36
		break;
    1348:	0b c0       	rjmp	.+22     	; 0x1360 <timer0Init+0x6e>
	}
	case  T0_OC0_CLEAR:
	{
	TCCR0 |= T0_OC0_CLEAR;
    134a:	84 b5       	in	r24, 0x24	; 36
    134c:	95 b5       	in	r25, 0x25	; 37
    134e:	80 62       	ori	r24, 0x20	; 32
    1350:	95 bd       	out	0x25, r25	; 37
    1352:	84 bd       	out	0x24, r24	; 36

		break;
    1354:	05 c0       	rjmp	.+10     	; 0x1360 <timer0Init+0x6e>
	}
	case T0_OC0_SET:
	{
		TCCR0 |=T0_OC0_SET;
    1356:	84 b5       	in	r24, 0x24	; 36
    1358:	95 b5       	in	r25, 0x25	; 37
    135a:	80 63       	ori	r24, 0x30	; 48
    135c:	95 bd       	out	0x25, r25	; 37
    135e:	84 bd       	out	0x24, r24	; 36
		break;
	}

}
OCR0  =u8_outputCompare;
    1360:	10 e0       	ldi	r17, 0x00	; 0
    1362:	18 bd       	out	0x28, r17	; 40
    1364:	07 bd       	out	0x27, r16	; 39
switch(en_interruptMask){
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	e8 16       	cp	r14, r24
    136a:	79 f0       	breq	.+30     	; 0x138a <timer0Init+0x98>
    136c:	e8 16       	cp	r14, r24
    136e:	20 f0       	brcs	.+8      	; 0x1378 <timer0Init+0x86>
    1370:	82 e0       	ldi	r24, 0x02	; 2
    1372:	e8 16       	cp	r14, r24
    1374:	19 f5       	brne	.+70     	; 0x13bc <timer0Init+0xca>
    1376:	14 c0       	rjmp	.+40     	; 0x13a0 <timer0Init+0xae>
case  T0_POLLING:{
pooling=0;
    1378:	10 92 4d 01 	sts	0x014D, r1
G_interrupt_Disable();
    137c:	0e 94 b2 02 	call	0x564	; 0x564 <G_interrupt_Disable>
TIMSK0 &= T0_POLLING;
    1380:	ee e6       	ldi	r30, 0x6E	; 110
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	10 82       	st	Z, r1
break;
    1388:	19 c0       	rjmp	.+50     	; 0x13bc <timer0Init+0xca>
}
case T0_INTERRUPT_NORMAL :
{pooling=1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	80 93 4d 01 	sts	0x014D, r24
G_interrupt_Enable();
    1390:	0e 94 97 02 	call	0x52e	; 0x52e <G_interrupt_Enable>
TIMSK0 |= T0_INTERRUPT_NORMAL;
    1394:	ee e6       	ldi	r30, 0x6E	; 110
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	81 60       	ori	r24, 0x01	; 1
    139c:	80 83       	st	Z, r24
break;
    139e:	0e c0       	rjmp	.+28     	; 0x13bc <timer0Init+0xca>
}
case T0_INTERRUPT_CMP:
{pooling=1;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	80 93 4d 01 	sts	0x014D, r24
//G_interrupt_Enable();
SET_BIT(SREG,7);
    13a6:	8f b7       	in	r24, 0x3f	; 63
    13a8:	80 68       	ori	r24, 0x80	; 128
    13aa:	8f bf       	out	0x3f, r24	; 63
TIMSK0 |= T0_INTERRUPT_NORMAL;
    13ac:	ee e6       	ldi	r30, 0x6E	; 110
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	81 60       	ori	r24, 0x01	; 1
    13b4:	80 83       	st	Z, r24
TIMSK0 |=T0_INTERRUPT_CMP;
    13b6:	80 81       	ld	r24, Z
    13b8:	82 60       	ori	r24, 0x02	; 2
    13ba:	80 83       	st	Z, r24
}
}

}

}
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	ef 90       	pop	r14
    13c2:	08 95       	ret

000013c4 <timer0DelayMs>:
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
    13c4:	ac 01       	movw	r20, r24
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	41 15       	cp	r20, r1
    13cc:	51 05       	cpc	r21, r1
    13ce:	61 05       	cpc	r22, r1
    13d0:	71 05       	cpc	r23, r1
    13d2:	71 f0       	breq	.+28     	; 0x13f0 <timer0DelayMs+0x2c>
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	dc 01       	movw	r26, r24
{
	while ((TIFR0&0x01)==0);
    13da:	a8 9b       	sbis	0x15, 0	; 21
    13dc:	fe cf       	rjmp	.-4      	; 0x13da <timer0DelayMs+0x16>
	TIFR0 |=0x01;
    13de:	a8 9a       	sbi	0x15, 0	; 21
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
    13e0:	01 96       	adiw	r24, 0x01	; 1
    13e2:	a1 1d       	adc	r26, r1
    13e4:	b1 1d       	adc	r27, r1
    13e6:	84 17       	cp	r24, r20
    13e8:	95 07       	cpc	r25, r21
    13ea:	a6 07       	cpc	r26, r22
    13ec:	b7 07       	cpc	r27, r23
    13ee:	a8 f3       	brcs	.-22     	; 0x13da <timer0DelayMs+0x16>
    13f0:	08 95       	ret

000013f2 <timer0DelayUs>:
 at pooling _no prescaling
 240at TCNT0

 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	a1 05       	cpc	r26, r1
    13fa:	b1 05       	cpc	r27, r1
    13fc:	31 f0       	breq	.+12     	; 0x140a <timer0DelayUs+0x18>
	{
	timer0Set(240);
    13fe:	80 ef       	ldi	r24, 0xF0	; 240
    1400:	0e 94 5e 09 	call	0x12bc	; 0x12bc <timer0Set>
	while(timer0Read()<=255);
    1404:	0e 94 60 09 	call	0x12c0	; 0x12c0 <timer0Read>
    1408:	fd cf       	rjmp	.-6      	; 0x1404 <timer0DelayUs+0x12>
	//while(u32_ovf_counter <= (8*u32_delay_in_us/1000));
	}
	TIFR0 |=(1<<TOV0);/*Clear the flag*/
    140a:	a8 9a       	sbi	0x15, 0	; 21
}/*1*/
    140c:	08 95       	ret

0000140e <timer0SwPWM>:
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    140e:	cf 92       	push	r12
    1410:	df 92       	push	r13
    1412:	ef 92       	push	r14
    1414:	ff 92       	push	r15
    1416:	cf 93       	push	r28
    1418:	c8 2f       	mov	r28, r24
float dutyReal;
pwm_time_on=MAX_HOLD;
    141a:	8f ef       	ldi	r24, 0xFF	; 255
    141c:	80 93 49 01 	sts	0x0149, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
    1420:	60 91 49 01 	lds	r22, 0x0149
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__floatunsisf>
    142e:	6b 01       	movw	r12, r22
    1430:	7c 01       	movw	r14, r24
}/*1*/
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
    1432:	6c 2f       	mov	r22, r28
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__floatunsisf>
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	48 ec       	ldi	r20, 0xC8	; 200
    1444:	52 e4       	ldi	r21, 0x42	; 66
    1446:	0e 94 5f 0c 	call	0x18be	; 0x18be <__divsf3>
    144a:	9b 01       	movw	r18, r22
    144c:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
    144e:	c7 01       	movw	r24, r14
    1450:	b6 01       	movw	r22, r12
    1452:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__mulsf3>
    1456:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    145a:	60 93 49 01 	sts	0x0149, r22
switch(pooling)
    145e:	80 91 4d 01 	lds	r24, 0x014D
    1462:	88 23       	and	r24, r24
    1464:	19 f0       	breq	.+6      	; 0x146c <timer0SwPWM+0x5e>
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	09 f5       	brne	.+66     	; 0x14ac <timer0SwPWM+0x9e>
    146a:	19 c0       	rjmp	.+50     	; 0x149e <timer0SwPWM+0x90>
{
	case 0:
	{
	timer0Start();
    146c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <timer0Start>
	timer0Set(pwm_time_on);
    1470:	80 91 49 01 	lds	r24, 0x0149
    1474:	0e 94 5e 09 	call	0x12bc	; 0x12bc <timer0Set>
	//freq 50KHZ is the Max frequency possible
	while ((TIFR0 &0x01)==0);
    1478:	a8 9b       	sbis	0x15, 0	; 21
    147a:	fe cf       	rjmp	.-4      	; 0x1478 <timer0SwPWM+0x6a>
	TIFR0 |=0x01;
    147c:	a8 9a       	sbi	0x15, 0	; 21
	PORTC_DATA |=0xff;
    147e:	88 b1       	in	r24, 0x08	; 8
    1480:	8f ef       	ldi	r24, 0xFF	; 255
    1482:	88 b9       	out	0x08, r24	; 8
	timer0Start();
    1484:	0e 94 62 09 	call	0x12c4	; 0x12c4 <timer0Start>
	timer0Set(MAX_HOLD-pwm_time_on);
    1488:	80 91 49 01 	lds	r24, 0x0149
    148c:	80 95       	com	r24
    148e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <timer0Set>
	//freq
	while ((TIFR0 & 0x01)==0);
    1492:	a8 9b       	sbis	0x15, 0	; 21
    1494:	fe cf       	rjmp	.-4      	; 0x1492 <timer0SwPWM+0x84>
	TIFR0 |=0x01;
    1496:	a8 9a       	sbi	0x15, 0	; 21
	PORTC_DATA &=0x00;
    1498:	88 b1       	in	r24, 0x08	; 8
    149a:	18 b8       	out	0x08, r1	; 8

break;
    149c:	07 c0       	rjmp	.+14     	; 0x14ac <timer0SwPWM+0x9e>
}
case 1:
{
timer0Start();
    149e:	0e 94 62 09 	call	0x12c4	; 0x12c4 <timer0Start>
OCR0=pwm_time_on;
    14a2:	80 91 49 01 	lds	r24, 0x0149
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	98 bd       	out	0x28, r25	; 40
    14aa:	87 bd       	out	0x27, r24	; 39
break;
}

}

}
    14ac:	cf 91       	pop	r28
    14ae:	ff 90       	pop	r15
    14b0:	ef 90       	pop	r14
    14b2:	df 90       	pop	r13
    14b4:	cf 90       	pop	r12
    14b6:	08 95       	ret

000014b8 <Timer_interrupt_COMP_routine>:



void Timer_interrupt_COMP_routine(void)
{
	PORTD_DATA ^=0xff;
    14b8:	8b b1       	in	r24, 0x0b	; 11
    14ba:	80 95       	com	r24
    14bc:	8b b9       	out	0x0b, r24	; 11

}
    14be:	08 95       	ret

000014c0 <timer1Set>:
	}

*/
void timer1Set(uint16_t u16_value)
{
TCNT1=u16_value;
    14c0:	90 93 85 00 	sts	0x0085, r25
    14c4:	80 93 84 00 	sts	0x0084, r24
}
    14c8:	08 95       	ret

000014ca <timer1Read>:
 * Description:
 * @return TCNT1
 */
uint16_t timer1Read(void)
{
return TCNT1;
    14ca:	80 91 84 00 	lds	r24, 0x0084
    14ce:	90 91 85 00 	lds	r25, 0x0085
}
    14d2:	08 95       	ret

000014d4 <timer1Start>:
 * Description:
 * @param
 */
void timer1Start(void)
{
TCCR1B |=u8g_T1_Prescaler;
    14d4:	e1 e8       	ldi	r30, 0x81	; 129
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	90 81       	ld	r25, Z
    14da:	80 91 4a 01 	lds	r24, 0x014A
    14de:	89 2b       	or	r24, r25
    14e0:	80 83       	st	Z, r24
}
    14e2:	08 95       	ret

000014e4 <timer1Stop>:
 * Description:
 * @param
 */
void timer1Stop(void)
{
TCCR1B &=0xfff8;
    14e4:	e1 e8       	ldi	r30, 0x81	; 129
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	88 7f       	andi	r24, 0xF8	; 248
    14ec:	80 83       	st	Z, r24
/*Keep all sittings as it is and put zeros in cs10,cs11,cs12*/
}
    14ee:	08 95       	ret

000014f0 <timer1DelayMs>:
 */
void timer1DelayMs(uint16_t u16_delay_in_ms)
{


}
    14f0:	08 95       	ret

000014f2 <timer1DelayUs>:
 */
void timer1DelayUs(uint32_t u32_delay_in_us)
{


}
    14f2:	08 95       	ret

000014f4 <timer1SwPWM>:
 */
void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{


}
    14f4:	08 95       	ret

000014f6 <timer2Set>:
* Description:
* @param value
*/
void timer2Set(uint8_t u8_a_value)
{
TCNT2=u8_a_value;
    14f6:	80 93 b2 00 	sts	0x00B2, r24
}
    14fa:	08 95       	ret

000014fc <timer2Read>:
/**
* Description:
* @return
*/
uint8_t timer2Read(void){
return TCNT2;
    14fc:	80 91 b2 00 	lds	r24, 0x00B2
}
    1500:	08 95       	ret

00001502 <timer2Start>:
/**
* Description:
*/
void timer2Start(void)
{
TCCR2B &= 0xf8;
    1502:	e1 eb       	ldi	r30, 0xB1	; 177
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	88 7f       	andi	r24, 0xF8	; 248
    150a:	80 83       	st	Z, r24
TCCR2B |= Prescaler_Value2;
    150c:	90 81       	ld	r25, Z
    150e:	80 91 4b 01 	lds	r24, 0x014B
    1512:	89 2b       	or	r24, r25
    1514:	80 83       	st	Z, r24
}
    1516:	08 95       	ret

00001518 <timer2Stop>:
/**
* Description:
*/
void timer2Stop(void)
{
TCCR2B &= 0xf8;
    1518:	e1 eb       	ldi	r30, 0xB1	; 177
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	88 7f       	andi	r24, 0xF8	; 248
    1520:	80 83       	st	Z, r24

}
    1522:	08 95       	ret

00001524 <timer2Init>:


}

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC,En_timer2perscaler_t en_prescal2, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
    1524:	cf 92       	push	r12
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
if(en_prescal2 == T2_NO_CLOCK)
    152a:	44 23       	and	r20, r20
    152c:	19 f4       	brne	.+6      	; 0x1534 <timer2Init+0x10>
{/*
if there is no clock the timer will be disabled
*/
timer2Stop();
    152e:	0e 94 8c 0a 	call	0x1518	; 0x1518 <timer2Stop>
    1532:	5e c0       	rjmp	.+188    	; 0x15f0 <timer2Init+0xcc>
}
else
{
TCCR2A |= en_mode;
    1534:	e0 eb       	ldi	r30, 0xB0	; 176
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	90 81       	ld	r25, Z
    153a:	89 2b       	or	r24, r25
    153c:	80 83       	st	Z, r24
TCCR2B |= en_prescal2 ;
    153e:	e1 eb       	ldi	r30, 0xB1	; 177
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	84 2b       	or	r24, r20
    1546:	80 83       	st	Z, r24

Prescaler_Value2=en_prescal2;
    1548:	40 93 4b 01 	sts	0x014B, r20
TCNT2 = u8_initialValue;
    154c:	20 93 b2 00 	sts	0x00B2, r18
switch(en_OC){
    1550:	60 34       	cpi	r22, 0x40	; 64
    1552:	81 f0       	breq	.+32     	; 0x1574 <timer2Init+0x50>
    1554:	61 34       	cpi	r22, 0x41	; 65
    1556:	18 f4       	brcc	.+6      	; 0x155e <timer2Init+0x3a>
    1558:	66 23       	and	r22, r22
    155a:	31 f0       	breq	.+12     	; 0x1568 <timer2Init+0x44>
    155c:	1c c0       	rjmp	.+56     	; 0x1596 <timer2Init+0x72>
    155e:	60 38       	cpi	r22, 0x80	; 128
    1560:	79 f0       	breq	.+30     	; 0x1580 <timer2Init+0x5c>
    1562:	60 3a       	cpi	r22, 0xA0	; 160
    1564:	c1 f4       	brne	.+48     	; 0x1596 <timer2Init+0x72>
    1566:	12 c0       	rjmp	.+36     	; 0x158c <timer2Init+0x68>
	case  T2_OC2A_DIS:
	{
	TCCR2B &= 0xFC;
    1568:	e1 eb       	ldi	r30, 0xB1	; 177
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	8c 7f       	andi	r24, 0xFC	; 252
    1570:	80 83       	st	Z, r24
		break;
    1572:	11 c0       	rjmp	.+34     	; 0x1596 <timer2Init+0x72>
	}
	case T2_OC2A_TOGGLE:
	{
		TCCR2A |=T2_OC2A_TOGGLE;
    1574:	e0 eb       	ldi	r30, 0xB0	; 176
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	80 64       	ori	r24, 0x40	; 64
    157c:	80 83       	st	Z, r24
		break;
    157e:	0b c0       	rjmp	.+22     	; 0x1596 <timer2Init+0x72>
	}
	case  T2_OC2A_CLEAR:
	{
	TCCR2A |= T2_OC2A_CLEAR;
    1580:	e0 eb       	ldi	r30, 0xB0	; 176
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	80 68       	ori	r24, 0x80	; 128
    1588:	80 83       	st	Z, r24

		break;
    158a:	05 c0       	rjmp	.+10     	; 0x1596 <timer2Init+0x72>
	}
	case T2_OC2A_SET:
	{
		TCCR2A |=T2_OC2A_SET;
    158c:	e0 eb       	ldi	r30, 0xB0	; 176
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	80 6a       	ori	r24, 0xA0	; 160
    1594:	80 83       	st	Z, r24
		break;
	}

}
OCR2  = u8_outputCompare;
    1596:	10 e0       	ldi	r17, 0x00	; 0
    1598:	10 93 b4 00 	sts	0x00B4, r17
    159c:	00 93 b3 00 	sts	0x00B3, r16
switch(en_interruptMask){
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	c8 16       	cp	r12, r24
    15a4:	69 f0       	breq	.+26     	; 0x15c0 <timer2Init+0x9c>
    15a6:	c8 16       	cp	r12, r24
    15a8:	20 f0       	brcs	.+8      	; 0x15b2 <timer2Init+0x8e>
    15aa:	83 e0       	ldi	r24, 0x03	; 3
    15ac:	c8 16       	cp	r12, r24
    15ae:	01 f5       	brne	.+64     	; 0x15f0 <timer2Init+0xcc>
    15b0:	12 c0       	rjmp	.+36     	; 0x15d6 <timer2Init+0xb2>
case  T2_POLLING:
pooling_2=0;
    15b2:	10 92 4c 01 	sts	0x014C, r1
TIMSK2 &= T2_POLLING;
    15b6:	e0 e7       	ldi	r30, 0x70	; 112
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	10 82       	st	Z, r1
break;
    15be:	18 c0       	rjmp	.+48     	; 0x15f0 <timer2Init+0xcc>
case T2_INTERRUPT_NORMAL :
{
	pooling_2=1;
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	80 93 4c 01 	sts	0x014C, r24
G_interrupt_Enable();
    15c6:	0e 94 97 02 	call	0x52e	; 0x52e <G_interrupt_Enable>
TIMSK2 |= T2_INTERRUPT_NORMAL;
    15ca:	e0 e7       	ldi	r30, 0x70	; 112
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	81 60       	ori	r24, 0x01	; 1
    15d2:	80 83       	st	Z, r24

break;
    15d4:	0d c0       	rjmp	.+26     	; 0x15f0 <timer2Init+0xcc>
}
case T2_INTERRUPT_CMP:
{
	pooling_2=1;
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	80 93 4c 01 	sts	0x014C, r24
G_interrupt_Enable();
    15dc:	0e 94 97 02 	call	0x52e	; 0x52e <G_interrupt_Enable>
//SET_BIT(SREG,7);
TIMSK2 |=T2_INTERRUPT_NORMAL;
    15e0:	e0 e7       	ldi	r30, 0x70	; 112
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	81 60       	ori	r24, 0x01	; 1
    15e8:	80 83       	st	Z, r24
TIMSK2 |=T2_INTERRUPT_CMP;
    15ea:	80 81       	ld	r24, Z
    15ec:	83 60       	ori	r24, 0x03	; 3
    15ee:	80 83       	st	Z, r24

}



}
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	cf 90       	pop	r12
    15f6:	08 95       	ret

000015f8 <timer2DelayMs>:
		Prescalercounst=1;
		break;

		}*/
void timer2DelayMs(uint16_t u16_delay_in_ms)
{
    15f8:	0f 93       	push	r16
    15fa:	1f 93       	push	r17
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	00 d0       	rcall	.+0      	; 0x1602 <timer2DelayMs+0xa>
    1602:	00 d0       	rcall	.+0      	; 0x1604 <timer2DelayMs+0xc>
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	8c 01       	movw	r16, r24
	volatile uint16_t count=0;
    160a:	1a 82       	std	Y+2, r1	; 0x02
    160c:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t Prescalercounst=0,set_timer2=0;
    160e:	1b 82       	std	Y+3, r1	; 0x03
    1610:	1c 82       	std	Y+4, r1	; 0x04
	switch(Prescaler_Value2)
    1612:	80 91 4b 01 	lds	r24, 0x014B
    1616:	84 30       	cpi	r24, 0x04	; 4
    1618:	f9 f0       	breq	.+62     	; 0x1658 <timer2DelayMs+0x60>
    161a:	85 30       	cpi	r24, 0x05	; 5
    161c:	38 f4       	brcc	.+14     	; 0x162c <timer2DelayMs+0x34>
    161e:	82 30       	cpi	r24, 0x02	; 2
    1620:	89 f0       	breq	.+34     	; 0x1644 <timer2DelayMs+0x4c>
    1622:	83 30       	cpi	r24, 0x03	; 3
    1624:	a0 f4       	brcc	.+40     	; 0x164e <timer2DelayMs+0x56>
    1626:	81 30       	cpi	r24, 0x01	; 1
    1628:	51 f5       	brne	.+84     	; 0x167e <timer2DelayMs+0x86>
    162a:	07 c0       	rjmp	.+14     	; 0x163a <timer2DelayMs+0x42>
    162c:	86 30       	cpi	r24, 0x06	; 6
    162e:	f1 f0       	breq	.+60     	; 0x166c <timer2DelayMs+0x74>
    1630:	86 30       	cpi	r24, 0x06	; 6
    1632:	b8 f0       	brcs	.+46     	; 0x1662 <timer2DelayMs+0x6a>
    1634:	87 30       	cpi	r24, 0x07	; 7
    1636:	19 f5       	brne	.+70     	; 0x167e <timer2DelayMs+0x86>
    1638:	1e c0       	rjmp	.+60     	; 0x1676 <timer2DelayMs+0x7e>
	{
		case T2_PRESCALER_NO:{
		Prescalercounst=58;
    163a:	8a e3       	ldi	r24, 0x3A	; 58
    163c:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=10;
    163e:	8a e0       	ldi	r24, 0x0A	; 10
    1640:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    1642:	1d c0       	rjmp	.+58     	; 0x167e <timer2DelayMs+0x86>
		case T2_PRESCALER_8:
		{Prescalercounst=8;
    1644:	88 e0       	ldi	r24, 0x08	; 8
    1646:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=12;
    1648:	8c e0       	ldi	r24, 0x0C	; 12
    164a:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    164c:	18 c0       	rjmp	.+48     	; 0x167e <timer2DelayMs+0x86>
		case T2_PRESCALER_32:
		{Prescalercounst=2;
    164e:	82 e0       	ldi	r24, 0x02	; 2
    1650:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=8;
    1652:	88 e0       	ldi	r24, 0x08	; 8
    1654:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    1656:	13 c0       	rjmp	.+38     	; 0x167e <timer2DelayMs+0x86>
		case T2_PRESCALER_64:
		{Prescalercounst=1;
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=6;
    165c:	86 e0       	ldi	r24, 0x06	; 6
    165e:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    1660:	0e c0       	rjmp	.+28     	; 0x167e <timer2DelayMs+0x86>
		case T2_PRESCALER_128:
		{Prescalercounst=1;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=131;
    1666:	83 e8       	ldi	r24, 0x83	; 131
    1668:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    166a:	09 c0       	rjmp	.+18     	; 0x167e <timer2DelayMs+0x86>
		case T2_PRESCALER_256:
		{Prescalercounst=1;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=194;
    1670:	82 ec       	ldi	r24, 0xC2	; 194
    1672:	8c 83       	std	Y+4, r24	; 0x04
		break;}
    1674:	04 c0       	rjmp	.+8      	; 0x167e <timer2DelayMs+0x86>
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=240;
    167a:	80 ef       	ldi	r24, 0xF0	; 240
    167c:	8c 83       	std	Y+4, r24	; 0x04
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
    167e:	1a 82       	std	Y+2, r1	; 0x02
    1680:	19 82       	std	Y+1, r1	; 0x01
    1682:	2b 81       	ldd	r18, Y+3	; 0x03
    1684:	49 81       	ldd	r20, Y+1	; 0x01
    1686:	5a 81       	ldd	r21, Y+2	; 0x02
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	02 9f       	mul	r16, r18
    168c:	c0 01       	movw	r24, r0
    168e:	03 9f       	mul	r16, r19
    1690:	90 0d       	add	r25, r0
    1692:	12 9f       	mul	r17, r18
    1694:	90 0d       	add	r25, r0
    1696:	11 24       	eor	r1, r1
    1698:	48 17       	cp	r20, r24
    169a:	59 07       	cpc	r21, r25
    169c:	c8 f4       	brcc	.+50     	; 0x16d0 <timer2DelayMs+0xd8>
	{
		timer2Set(set_timer2);//10 for no prescaler....12 for 8 prescaler .... 8 for 32 prescaler ....6 for prescaler 64 .....
    169e:	8c 81       	ldd	r24, Y+4	; 0x04
    16a0:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <timer2Set>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR2 & 0x01)==0);
    16a4:	b8 9b       	sbis	0x17, 0	; 23
    16a6:	fe cf       	rjmp	.-4      	; 0x16a4 <timer2DelayMs+0xac>
		TIFR2 |=0x01;
    16a8:	b8 9a       	sbi	0x17, 0	; 23
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
		set_timer2=240;
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	9a 81       	ldd	r25, Y+2	; 0x02
    16ae:	01 96       	adiw	r24, 0x01	; 1
    16b0:	9a 83       	std	Y+2, r25	; 0x02
    16b2:	89 83       	std	Y+1, r24	; 0x01
    16b4:	2b 81       	ldd	r18, Y+3	; 0x03
    16b6:	49 81       	ldd	r20, Y+1	; 0x01
    16b8:	5a 81       	ldd	r21, Y+2	; 0x02
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	02 9f       	mul	r16, r18
    16be:	c0 01       	movw	r24, r0
    16c0:	03 9f       	mul	r16, r19
    16c2:	90 0d       	add	r25, r0
    16c4:	12 9f       	mul	r17, r18
    16c6:	90 0d       	add	r25, r0
    16c8:	11 24       	eor	r1, r1
    16ca:	48 17       	cp	r20, r24
    16cc:	59 07       	cpc	r21, r25
    16ce:	38 f3       	brcs	.-50     	; 0x169e <timer2DelayMs+0xa6>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR2 & 0x01)==0);
		TIFR2 |=0x01;

	}
}
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	08 95       	ret

000016e2 <timer2DelayUs>:

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
    16e2:	cf 92       	push	r12
    16e4:	df 92       	push	r13
    16e6:	ef 92       	push	r14
    16e8:	ff 92       	push	r15
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <timer2DelayUs+0xe>
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	6b 01       	movw	r12, r22
    16f6:	7c 01       	movw	r14, r24
	volatile uint16_t count =0;
    16f8:	1a 82       	std	Y+2, r1	; 0x02
    16fa:	19 82       	std	Y+1, r1	; 0x01
	for (count=0;count<u16_delay_in_us;count++)
    16fc:	1a 82       	std	Y+2, r1	; 0x02
    16fe:	19 82       	std	Y+1, r1	; 0x01
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	9a 81       	ldd	r25, Y+2	; 0x02
    1704:	a0 e0       	ldi	r26, 0x00	; 0
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	8c 15       	cp	r24, r12
    170a:	9d 05       	cpc	r25, r13
    170c:	ae 05       	cpc	r26, r14
    170e:	bf 05       	cpc	r27, r15
    1710:	a0 f4       	brcc	.+40     	; 0x173a <timer2DelayUs+0x58>
	{
		timer2Set(254);//254 for no prescaler
    1712:	8e ef       	ldi	r24, 0xFE	; 254
    1714:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <timer2Set>
		while ((TIFR2 & 0x01)==0);
    1718:	b8 9b       	sbis	0x17, 0	; 23
    171a:	fe cf       	rjmp	.-4      	; 0x1718 <timer2DelayUs+0x36>
		TIFR2 |=0x01;
    171c:	b8 9a       	sbi	0x17, 0	; 23

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
	volatile uint16_t count =0;
	for (count=0;count<u16_delay_in_us;count++)
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	9a 81       	ldd	r25, Y+2	; 0x02
    1722:	01 96       	adiw	r24, 0x01	; 1
    1724:	9a 83       	std	Y+2, r25	; 0x02
    1726:	89 83       	std	Y+1, r24	; 0x01
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	9a 81       	ldd	r25, Y+2	; 0x02
    172c:	a0 e0       	ldi	r26, 0x00	; 0
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	8c 15       	cp	r24, r12
    1732:	9d 05       	cpc	r25, r13
    1734:	ae 05       	cpc	r26, r14
    1736:	bf 05       	cpc	r27, r15
    1738:	60 f3       	brcs	.-40     	; 0x1712 <timer2DelayUs+0x30>
		while ((TIFR2 & 0x01)==0);
		TIFR2 |=0x01;

	}

}
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	ff 90       	pop	r15
    1744:	ef 90       	pop	r14
    1746:	df 90       	pop	r13
    1748:	cf 90       	pop	r12
    174a:	08 95       	ret

0000174c <timer2SwPWM>:
/**
* Description:
* @param dutyCycle
*/
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    174c:	cf 92       	push	r12
    174e:	df 92       	push	r13
    1750:	ef 92       	push	r14
    1752:	ff 92       	push	r15
    1754:	cf 93       	push	r28
    1756:	c8 2f       	mov	r28, r24

float dutyReal;
pwm_time_on=MAX_HOLD;
    1758:	8f ef       	ldi	r24, 0xFF	; 255
    175a:	80 93 49 01 	sts	0x0149, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
    175e:	60 91 49 01 	lds	r22, 0x0149
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__floatunsisf>
    176c:	6b 01       	movw	r12, r22
    176e:	7c 01       	movw	r14, r24
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{

float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
    1770:	6c 2f       	mov	r22, r28
    1772:	70 e0       	ldi	r23, 0x00	; 0
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <__floatunsisf>
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	48 ec       	ldi	r20, 0xC8	; 200
    1782:	52 e4       	ldi	r21, 0x42	; 66
    1784:	0e 94 5f 0c 	call	0x18be	; 0x18be <__divsf3>
    1788:	9b 01       	movw	r18, r22
    178a:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
    178c:	c7 01       	movw	r24, r14
    178e:	b6 01       	movw	r22, r12
    1790:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__mulsf3>
    1794:	0e 94 c7 0c 	call	0x198e	; 0x198e <__fixunssfsi>
    1798:	60 93 49 01 	sts	0x0149, r22
switch(pooling_2)
    179c:	80 91 4c 01 	lds	r24, 0x014C
    17a0:	88 23       	and	r24, r24
    17a2:	19 f0       	breq	.+6      	; 0x17aa <timer2SwPWM+0x5e>
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	19 f5       	brne	.+70     	; 0x17ee <timer2SwPWM+0xa2>
    17a8:	19 c0       	rjmp	.+50     	; 0x17dc <timer2SwPWM+0x90>
{
	case 0:
	{
		timer2Start();
    17aa:	0e 94 81 0a 	call	0x1502	; 0x1502 <timer2Start>
		timer2Set(pwm_time_on);
    17ae:	80 91 49 01 	lds	r24, 0x0149
    17b2:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <timer2Set>
		//freq 50KHZ is the Max frequency possible
		while ((TIFR2 & 0x01)==0);
    17b6:	b8 9b       	sbis	0x17, 0	; 23
    17b8:	fe cf       	rjmp	.-4      	; 0x17b6 <timer2SwPWM+0x6a>
		TIFR2 |=0x01;
    17ba:	b8 9a       	sbi	0x17, 0	; 23
		PORTC_DATA |=0xff;
    17bc:	88 b1       	in	r24, 0x08	; 8
    17be:	8f ef       	ldi	r24, 0xFF	; 255
    17c0:	88 b9       	out	0x08, r24	; 8
		timer2Start();
    17c2:	0e 94 81 0a 	call	0x1502	; 0x1502 <timer2Start>
		timer2Set(MAX_HOLD-pwm_time_on);
    17c6:	80 91 49 01 	lds	r24, 0x0149
    17ca:	80 95       	com	r24
    17cc:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <timer2Set>
		//freq
		while ((TIFR2 & 0x01)==0);
    17d0:	b8 9b       	sbis	0x17, 0	; 23
    17d2:	fe cf       	rjmp	.-4      	; 0x17d0 <timer2SwPWM+0x84>
		TIFR2 |=0x01;
    17d4:	b8 9a       	sbi	0x17, 0	; 23
		PORTC_DATA &=0x00;
    17d6:	88 b1       	in	r24, 0x08	; 8
    17d8:	18 b8       	out	0x08, r1	; 8

		break;
    17da:	09 c0       	rjmp	.+18     	; 0x17ee <timer2SwPWM+0xa2>
	}
	case 1:
	{
		timer2Start();
    17dc:	0e 94 81 0a 	call	0x1502	; 0x1502 <timer2Start>
		OCR2=pwm_time_on;
    17e0:	80 91 49 01 	lds	r24, 0x0149
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	90 93 b4 00 	sts	0x00B4, r25
    17ea:	80 93 b3 00 	sts	0x00B3, r24
	}

}


}
    17ee:	cf 91       	pop	r28
    17f0:	ff 90       	pop	r15
    17f2:	ef 90       	pop	r14
    17f4:	df 90       	pop	r13
    17f6:	cf 90       	pop	r12
    17f8:	08 95       	ret

000017fa <Timer2_interrupt_COMP_routine>:
void Timer2_interrupt_COMP_routine(void)
{



}
    17fa:	08 95       	ret

000017fc <Timer2_interrupt_routine>:
void Timer2_interrupt_routine(void)
{ 
timer2_interrupt_raised=1;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	80 93 47 01 	sts	0x0147, r24
timer2_interrupt_counter++;
    1802:	80 91 45 01 	lds	r24, 0x0145
    1806:	90 91 46 01 	lds	r25, 0x0146
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	90 93 46 01 	sts	0x0146, r25
    1810:	80 93 45 01 	sts	0x0145, r24
}
    1814:	08 95       	ret

00001816 <Us_Init>:
 *                                                                                                  *
 *                                                                                                  *
 ***************************************************************************************************/

ERROR_STATUS Us_Init(void)
{uint8_t Ret;
    1816:	cf 92       	push	r12
    1818:	ef 92       	push	r14
    181a:	0f 93       	push	r16
    181c:	cf 93       	push	r28
Ret=DIO_init(&US_Configuration);
    181e:	81 e2       	ldi	r24, 0x21	; 33
    1820:	91 e0       	ldi	r25, 0x01	; 1
    1822:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_init>
Ret=Icu_Init(&ICU_Configuration);
    1826:	8c e0       	ldi	r24, 0x0C	; 12
    1828:	91 e0       	ldi	r25, 0x01	; 1
    182a:	0e 94 98 01 	call	0x330	; 0x330 <Icu_Init>
    182e:	c8 2f       	mov	r28, r24
timer2Init(T2_NORMAL_MODE,T2_OC2B_CLEAR,T2_PRESCALER_1024,0,0,0,T2_INTERRUPT_NORMAL);
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	60 e2       	ldi	r22, 0x20	; 32
    1834:	47 e0       	ldi	r20, 0x07	; 7
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	00 e0       	ldi	r16, 0x00	; 0
    183a:	ee 24       	eor	r14, r14
    183c:	cc 24       	eor	r12, r12
    183e:	c3 94       	inc	r12
    1840:	0e 94 92 0a 	call	0x1524	; 0x1524 <timer2Init>
return Ret;
}
    1844:	8c 2f       	mov	r24, r28
    1846:	cf 91       	pop	r28
    1848:	0f 91       	pop	r16
    184a:	ef 90       	pop	r14
    184c:	cf 90       	pop	r12
    184e:	08 95       	ret

00001850 <Us_Trigger>:
ERROR_STATUS Us_Trigger(void)
{uint8_t Ret=0;
if(timer2_interrupt_raised){
    1850:	80 91 47 01 	lds	r24, 0x0147
    1854:	88 23       	and	r24, r24
    1856:	99 f0       	breq	.+38     	; 0x187e <Us_Trigger+0x2e>
timer2_interrupt_raised=0;
    1858:	10 92 47 01 	sts	0x0147, r1
Ret=DIO_Toggle(GPIOD,BIT1);
    185c:	83 e0       	ldi	r24, 0x03	; 3
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	62 e0       	ldi	r22, 0x02	; 2
    1862:	70 e0       	ldi	r23, 0x00	; 0
    1864:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    1868:	82 e3       	ldi	r24, 0x32	; 50
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	01 97       	sbiw	r24, 0x01	; 1
for (int i=0;i<50;i++)
    186e:	f1 f7       	brne	.-4      	; 0x186c <Us_Trigger+0x1c>
{;/*a pulse for 10 Micro seconds*/
}
Ret=DIO_Toggle(GPIOD,BIT1);
    1870:	83 e0       	ldi	r24, 0x03	; 3
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	62 e0       	ldi	r22, 0x02	; 2
    1876:	70 e0       	ldi	r23, 0x00	; 0
    1878:	0e 94 28 01 	call	0x250	; 0x250 <DIO_Toggle>
    187c:	08 95       	ret
Ret=Icu_Init(&ICU_Configuration);
timer2Init(T2_NORMAL_MODE,T2_OC2B_CLEAR,T2_PRESCALER_1024,0,0,0,T2_INTERRUPT_NORMAL);
return Ret;
}
ERROR_STATUS Us_Trigger(void)
{uint8_t Ret=0;
    187e:	80 e0       	ldi	r24, 0x00	; 0
{;/*a pulse for 10 Micro seconds*/
}
Ret=DIO_Toggle(GPIOD,BIT1);
}
return Ret;
}
    1880:	08 95       	ret

00001882 <Us_GetDistance>:


ERROR_STATUS Us_GetDistance(uint16_t *Distance)
{uint8_t Ret=0;
    1882:	0f 93       	push	r16
    1884:	1f 93       	push	r17
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	00 d0       	rcall	.+0      	; 0x188c <Us_GetDistance+0xa>
    188c:	00 d0       	rcall	.+0      	; 0x188e <Us_GetDistance+0xc>
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	8c 01       	movw	r16, r24
	uint32_t u32l_Time;
	Ret=Icu_ReadTime(ICU_CH2,ICU_RISE_TO_FALL,&u32l_Time);
    1894:	82 e0       	ldi	r24, 0x02	; 2
    1896:	61 e0       	ldi	r22, 0x01	; 1
    1898:	ae 01       	movw	r20, r28
    189a:	4f 5f       	subi	r20, 0xFF	; 255
    189c:	5f 4f       	sbci	r21, 0xFF	; 255
    189e:	0e 94 c7 01 	call	0x38e	; 0x38e <Icu_ReadTime>
	*Distance=u32l_Time;
    18a2:	29 81       	ldd	r18, Y+1	; 0x01
    18a4:	3a 81       	ldd	r19, Y+2	; 0x02
    18a6:	f8 01       	movw	r30, r16
    18a8:	31 83       	std	Z+1, r19	; 0x01
    18aa:	20 83       	st	Z, r18
	return Ret;
}
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	08 95       	ret

000018be <__divsf3>:
    18be:	0c d0       	rcall	.+24     	; 0x18d8 <__divsf3x>
    18c0:	e6 c0       	rjmp	.+460    	; 0x1a8e <__fp_round>
    18c2:	de d0       	rcall	.+444    	; 0x1a80 <__fp_pscB>
    18c4:	40 f0       	brcs	.+16     	; 0x18d6 <__divsf3+0x18>
    18c6:	d5 d0       	rcall	.+426    	; 0x1a72 <__fp_pscA>
    18c8:	30 f0       	brcs	.+12     	; 0x18d6 <__divsf3+0x18>
    18ca:	21 f4       	brne	.+8      	; 0x18d4 <__divsf3+0x16>
    18cc:	5f 3f       	cpi	r21, 0xFF	; 255
    18ce:	19 f0       	breq	.+6      	; 0x18d6 <__divsf3+0x18>
    18d0:	c7 c0       	rjmp	.+398    	; 0x1a60 <__fp_inf>
    18d2:	51 11       	cpse	r21, r1
    18d4:	10 c1       	rjmp	.+544    	; 0x1af6 <__fp_szero>
    18d6:	ca c0       	rjmp	.+404    	; 0x1a6c <__fp_nan>

000018d8 <__divsf3x>:
    18d8:	eb d0       	rcall	.+470    	; 0x1ab0 <__fp_split3>
    18da:	98 f3       	brcs	.-26     	; 0x18c2 <__divsf3+0x4>

000018dc <__divsf3_pse>:
    18dc:	99 23       	and	r25, r25
    18de:	c9 f3       	breq	.-14     	; 0x18d2 <__divsf3+0x14>
    18e0:	55 23       	and	r21, r21
    18e2:	b1 f3       	breq	.-20     	; 0x18d0 <__divsf3+0x12>
    18e4:	95 1b       	sub	r25, r21
    18e6:	55 0b       	sbc	r21, r21
    18e8:	bb 27       	eor	r27, r27
    18ea:	aa 27       	eor	r26, r26
    18ec:	62 17       	cp	r22, r18
    18ee:	73 07       	cpc	r23, r19
    18f0:	84 07       	cpc	r24, r20
    18f2:	38 f0       	brcs	.+14     	; 0x1902 <__divsf3_pse+0x26>
    18f4:	9f 5f       	subi	r25, 0xFF	; 255
    18f6:	5f 4f       	sbci	r21, 0xFF	; 255
    18f8:	22 0f       	add	r18, r18
    18fa:	33 1f       	adc	r19, r19
    18fc:	44 1f       	adc	r20, r20
    18fe:	aa 1f       	adc	r26, r26
    1900:	a9 f3       	breq	.-22     	; 0x18ec <__divsf3_pse+0x10>
    1902:	33 d0       	rcall	.+102    	; 0x196a <__divsf3_pse+0x8e>
    1904:	0e 2e       	mov	r0, r30
    1906:	3a f0       	brmi	.+14     	; 0x1916 <__divsf3_pse+0x3a>
    1908:	e0 e8       	ldi	r30, 0x80	; 128
    190a:	30 d0       	rcall	.+96     	; 0x196c <__divsf3_pse+0x90>
    190c:	91 50       	subi	r25, 0x01	; 1
    190e:	50 40       	sbci	r21, 0x00	; 0
    1910:	e6 95       	lsr	r30
    1912:	00 1c       	adc	r0, r0
    1914:	ca f7       	brpl	.-14     	; 0x1908 <__divsf3_pse+0x2c>
    1916:	29 d0       	rcall	.+82     	; 0x196a <__divsf3_pse+0x8e>
    1918:	fe 2f       	mov	r31, r30
    191a:	27 d0       	rcall	.+78     	; 0x196a <__divsf3_pse+0x8e>
    191c:	66 0f       	add	r22, r22
    191e:	77 1f       	adc	r23, r23
    1920:	88 1f       	adc	r24, r24
    1922:	bb 1f       	adc	r27, r27
    1924:	26 17       	cp	r18, r22
    1926:	37 07       	cpc	r19, r23
    1928:	48 07       	cpc	r20, r24
    192a:	ab 07       	cpc	r26, r27
    192c:	b0 e8       	ldi	r27, 0x80	; 128
    192e:	09 f0       	breq	.+2      	; 0x1932 <__divsf3_pse+0x56>
    1930:	bb 0b       	sbc	r27, r27
    1932:	80 2d       	mov	r24, r0
    1934:	bf 01       	movw	r22, r30
    1936:	ff 27       	eor	r31, r31
    1938:	93 58       	subi	r25, 0x83	; 131
    193a:	5f 4f       	sbci	r21, 0xFF	; 255
    193c:	2a f0       	brmi	.+10     	; 0x1948 <__divsf3_pse+0x6c>
    193e:	9e 3f       	cpi	r25, 0xFE	; 254
    1940:	51 05       	cpc	r21, r1
    1942:	68 f0       	brcs	.+26     	; 0x195e <__divsf3_pse+0x82>
    1944:	8d c0       	rjmp	.+282    	; 0x1a60 <__fp_inf>
    1946:	d7 c0       	rjmp	.+430    	; 0x1af6 <__fp_szero>
    1948:	5f 3f       	cpi	r21, 0xFF	; 255
    194a:	ec f3       	brlt	.-6      	; 0x1946 <__divsf3_pse+0x6a>
    194c:	98 3e       	cpi	r25, 0xE8	; 232
    194e:	dc f3       	brlt	.-10     	; 0x1946 <__divsf3_pse+0x6a>
    1950:	86 95       	lsr	r24
    1952:	77 95       	ror	r23
    1954:	67 95       	ror	r22
    1956:	b7 95       	ror	r27
    1958:	f7 95       	ror	r31
    195a:	9f 5f       	subi	r25, 0xFF	; 255
    195c:	c9 f7       	brne	.-14     	; 0x1950 <__divsf3_pse+0x74>
    195e:	88 0f       	add	r24, r24
    1960:	91 1d       	adc	r25, r1
    1962:	96 95       	lsr	r25
    1964:	87 95       	ror	r24
    1966:	97 f9       	bld	r25, 7
    1968:	08 95       	ret
    196a:	e1 e0       	ldi	r30, 0x01	; 1
    196c:	66 0f       	add	r22, r22
    196e:	77 1f       	adc	r23, r23
    1970:	88 1f       	adc	r24, r24
    1972:	bb 1f       	adc	r27, r27
    1974:	62 17       	cp	r22, r18
    1976:	73 07       	cpc	r23, r19
    1978:	84 07       	cpc	r24, r20
    197a:	ba 07       	cpc	r27, r26
    197c:	20 f0       	brcs	.+8      	; 0x1986 <__divsf3_pse+0xaa>
    197e:	62 1b       	sub	r22, r18
    1980:	73 0b       	sbc	r23, r19
    1982:	84 0b       	sbc	r24, r20
    1984:	ba 0b       	sbc	r27, r26
    1986:	ee 1f       	adc	r30, r30
    1988:	88 f7       	brcc	.-30     	; 0x196c <__divsf3_pse+0x90>
    198a:	e0 95       	com	r30
    198c:	08 95       	ret

0000198e <__fixunssfsi>:
    198e:	98 d0       	rcall	.+304    	; 0x1ac0 <__fp_splitA>
    1990:	88 f0       	brcs	.+34     	; 0x19b4 <__fixunssfsi+0x26>
    1992:	9f 57       	subi	r25, 0x7F	; 127
    1994:	90 f0       	brcs	.+36     	; 0x19ba <__fixunssfsi+0x2c>
    1996:	b9 2f       	mov	r27, r25
    1998:	99 27       	eor	r25, r25
    199a:	b7 51       	subi	r27, 0x17	; 23
    199c:	a0 f0       	brcs	.+40     	; 0x19c6 <__fixunssfsi+0x38>
    199e:	d1 f0       	breq	.+52     	; 0x19d4 <__fixunssfsi+0x46>
    19a0:	66 0f       	add	r22, r22
    19a2:	77 1f       	adc	r23, r23
    19a4:	88 1f       	adc	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	1a f0       	brmi	.+6      	; 0x19b0 <__fixunssfsi+0x22>
    19aa:	ba 95       	dec	r27
    19ac:	c9 f7       	brne	.-14     	; 0x19a0 <__fixunssfsi+0x12>
    19ae:	12 c0       	rjmp	.+36     	; 0x19d4 <__fixunssfsi+0x46>
    19b0:	b1 30       	cpi	r27, 0x01	; 1
    19b2:	81 f0       	breq	.+32     	; 0x19d4 <__fixunssfsi+0x46>
    19b4:	9f d0       	rcall	.+318    	; 0x1af4 <__fp_zero>
    19b6:	b1 e0       	ldi	r27, 0x01	; 1
    19b8:	08 95       	ret
    19ba:	9c c0       	rjmp	.+312    	; 0x1af4 <__fp_zero>
    19bc:	67 2f       	mov	r22, r23
    19be:	78 2f       	mov	r23, r24
    19c0:	88 27       	eor	r24, r24
    19c2:	b8 5f       	subi	r27, 0xF8	; 248
    19c4:	39 f0       	breq	.+14     	; 0x19d4 <__fixunssfsi+0x46>
    19c6:	b9 3f       	cpi	r27, 0xF9	; 249
    19c8:	cc f3       	brlt	.-14     	; 0x19bc <__fixunssfsi+0x2e>
    19ca:	86 95       	lsr	r24
    19cc:	77 95       	ror	r23
    19ce:	67 95       	ror	r22
    19d0:	b3 95       	inc	r27
    19d2:	d9 f7       	brne	.-10     	; 0x19ca <__fixunssfsi+0x3c>
    19d4:	3e f4       	brtc	.+14     	; 0x19e4 <__fixunssfsi+0x56>
    19d6:	90 95       	com	r25
    19d8:	80 95       	com	r24
    19da:	70 95       	com	r23
    19dc:	61 95       	neg	r22
    19de:	7f 4f       	sbci	r23, 0xFF	; 255
    19e0:	8f 4f       	sbci	r24, 0xFF	; 255
    19e2:	9f 4f       	sbci	r25, 0xFF	; 255
    19e4:	08 95       	ret

000019e6 <__floatunsisf>:
    19e6:	e8 94       	clt
    19e8:	09 c0       	rjmp	.+18     	; 0x19fc <__floatsisf+0x12>

000019ea <__floatsisf>:
    19ea:	97 fb       	bst	r25, 7
    19ec:	3e f4       	brtc	.+14     	; 0x19fc <__floatsisf+0x12>
    19ee:	90 95       	com	r25
    19f0:	80 95       	com	r24
    19f2:	70 95       	com	r23
    19f4:	61 95       	neg	r22
    19f6:	7f 4f       	sbci	r23, 0xFF	; 255
    19f8:	8f 4f       	sbci	r24, 0xFF	; 255
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	99 23       	and	r25, r25
    19fe:	a9 f0       	breq	.+42     	; 0x1a2a <__floatsisf+0x40>
    1a00:	f9 2f       	mov	r31, r25
    1a02:	96 e9       	ldi	r25, 0x96	; 150
    1a04:	bb 27       	eor	r27, r27
    1a06:	93 95       	inc	r25
    1a08:	f6 95       	lsr	r31
    1a0a:	87 95       	ror	r24
    1a0c:	77 95       	ror	r23
    1a0e:	67 95       	ror	r22
    1a10:	b7 95       	ror	r27
    1a12:	f1 11       	cpse	r31, r1
    1a14:	f8 cf       	rjmp	.-16     	; 0x1a06 <__floatsisf+0x1c>
    1a16:	fa f4       	brpl	.+62     	; 0x1a56 <__floatsisf+0x6c>
    1a18:	bb 0f       	add	r27, r27
    1a1a:	11 f4       	brne	.+4      	; 0x1a20 <__floatsisf+0x36>
    1a1c:	60 ff       	sbrs	r22, 0
    1a1e:	1b c0       	rjmp	.+54     	; 0x1a56 <__floatsisf+0x6c>
    1a20:	6f 5f       	subi	r22, 0xFF	; 255
    1a22:	7f 4f       	sbci	r23, 0xFF	; 255
    1a24:	8f 4f       	sbci	r24, 0xFF	; 255
    1a26:	9f 4f       	sbci	r25, 0xFF	; 255
    1a28:	16 c0       	rjmp	.+44     	; 0x1a56 <__floatsisf+0x6c>
    1a2a:	88 23       	and	r24, r24
    1a2c:	11 f0       	breq	.+4      	; 0x1a32 <__floatsisf+0x48>
    1a2e:	96 e9       	ldi	r25, 0x96	; 150
    1a30:	11 c0       	rjmp	.+34     	; 0x1a54 <__floatsisf+0x6a>
    1a32:	77 23       	and	r23, r23
    1a34:	21 f0       	breq	.+8      	; 0x1a3e <__floatsisf+0x54>
    1a36:	9e e8       	ldi	r25, 0x8E	; 142
    1a38:	87 2f       	mov	r24, r23
    1a3a:	76 2f       	mov	r23, r22
    1a3c:	05 c0       	rjmp	.+10     	; 0x1a48 <__floatsisf+0x5e>
    1a3e:	66 23       	and	r22, r22
    1a40:	71 f0       	breq	.+28     	; 0x1a5e <__floatsisf+0x74>
    1a42:	96 e8       	ldi	r25, 0x86	; 134
    1a44:	86 2f       	mov	r24, r22
    1a46:	70 e0       	ldi	r23, 0x00	; 0
    1a48:	60 e0       	ldi	r22, 0x00	; 0
    1a4a:	2a f0       	brmi	.+10     	; 0x1a56 <__floatsisf+0x6c>
    1a4c:	9a 95       	dec	r25
    1a4e:	66 0f       	add	r22, r22
    1a50:	77 1f       	adc	r23, r23
    1a52:	88 1f       	adc	r24, r24
    1a54:	da f7       	brpl	.-10     	; 0x1a4c <__floatsisf+0x62>
    1a56:	88 0f       	add	r24, r24
    1a58:	96 95       	lsr	r25
    1a5a:	87 95       	ror	r24
    1a5c:	97 f9       	bld	r25, 7
    1a5e:	08 95       	ret

00001a60 <__fp_inf>:
    1a60:	97 f9       	bld	r25, 7
    1a62:	9f 67       	ori	r25, 0x7F	; 127
    1a64:	80 e8       	ldi	r24, 0x80	; 128
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	08 95       	ret

00001a6c <__fp_nan>:
    1a6c:	9f ef       	ldi	r25, 0xFF	; 255
    1a6e:	80 ec       	ldi	r24, 0xC0	; 192
    1a70:	08 95       	ret

00001a72 <__fp_pscA>:
    1a72:	00 24       	eor	r0, r0
    1a74:	0a 94       	dec	r0
    1a76:	16 16       	cp	r1, r22
    1a78:	17 06       	cpc	r1, r23
    1a7a:	18 06       	cpc	r1, r24
    1a7c:	09 06       	cpc	r0, r25
    1a7e:	08 95       	ret

00001a80 <__fp_pscB>:
    1a80:	00 24       	eor	r0, r0
    1a82:	0a 94       	dec	r0
    1a84:	12 16       	cp	r1, r18
    1a86:	13 06       	cpc	r1, r19
    1a88:	14 06       	cpc	r1, r20
    1a8a:	05 06       	cpc	r0, r21
    1a8c:	08 95       	ret

00001a8e <__fp_round>:
    1a8e:	09 2e       	mov	r0, r25
    1a90:	03 94       	inc	r0
    1a92:	00 0c       	add	r0, r0
    1a94:	11 f4       	brne	.+4      	; 0x1a9a <__fp_round+0xc>
    1a96:	88 23       	and	r24, r24
    1a98:	52 f0       	brmi	.+20     	; 0x1aae <__fp_round+0x20>
    1a9a:	bb 0f       	add	r27, r27
    1a9c:	40 f4       	brcc	.+16     	; 0x1aae <__fp_round+0x20>
    1a9e:	bf 2b       	or	r27, r31
    1aa0:	11 f4       	brne	.+4      	; 0x1aa6 <__fp_round+0x18>
    1aa2:	60 ff       	sbrs	r22, 0
    1aa4:	04 c0       	rjmp	.+8      	; 0x1aae <__fp_round+0x20>
    1aa6:	6f 5f       	subi	r22, 0xFF	; 255
    1aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aaa:	8f 4f       	sbci	r24, 0xFF	; 255
    1aac:	9f 4f       	sbci	r25, 0xFF	; 255
    1aae:	08 95       	ret

00001ab0 <__fp_split3>:
    1ab0:	57 fd       	sbrc	r21, 7
    1ab2:	90 58       	subi	r25, 0x80	; 128
    1ab4:	44 0f       	add	r20, r20
    1ab6:	55 1f       	adc	r21, r21
    1ab8:	59 f0       	breq	.+22     	; 0x1ad0 <__fp_splitA+0x10>
    1aba:	5f 3f       	cpi	r21, 0xFF	; 255
    1abc:	71 f0       	breq	.+28     	; 0x1ada <__fp_splitA+0x1a>
    1abe:	47 95       	ror	r20

00001ac0 <__fp_splitA>:
    1ac0:	88 0f       	add	r24, r24
    1ac2:	97 fb       	bst	r25, 7
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	61 f0       	breq	.+24     	; 0x1ae0 <__fp_splitA+0x20>
    1ac8:	9f 3f       	cpi	r25, 0xFF	; 255
    1aca:	79 f0       	breq	.+30     	; 0x1aea <__fp_splitA+0x2a>
    1acc:	87 95       	ror	r24
    1ace:	08 95       	ret
    1ad0:	12 16       	cp	r1, r18
    1ad2:	13 06       	cpc	r1, r19
    1ad4:	14 06       	cpc	r1, r20
    1ad6:	55 1f       	adc	r21, r21
    1ad8:	f2 cf       	rjmp	.-28     	; 0x1abe <__fp_split3+0xe>
    1ada:	46 95       	lsr	r20
    1adc:	f1 df       	rcall	.-30     	; 0x1ac0 <__fp_splitA>
    1ade:	08 c0       	rjmp	.+16     	; 0x1af0 <__fp_splitA+0x30>
    1ae0:	16 16       	cp	r1, r22
    1ae2:	17 06       	cpc	r1, r23
    1ae4:	18 06       	cpc	r1, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	f1 cf       	rjmp	.-30     	; 0x1acc <__fp_splitA+0xc>
    1aea:	86 95       	lsr	r24
    1aec:	71 05       	cpc	r23, r1
    1aee:	61 05       	cpc	r22, r1
    1af0:	08 94       	sec
    1af2:	08 95       	ret

00001af4 <__fp_zero>:
    1af4:	e8 94       	clt

00001af6 <__fp_szero>:
    1af6:	bb 27       	eor	r27, r27
    1af8:	66 27       	eor	r22, r22
    1afa:	77 27       	eor	r23, r23
    1afc:	cb 01       	movw	r24, r22
    1afe:	97 f9       	bld	r25, 7
    1b00:	08 95       	ret

00001b02 <__mulsf3>:
    1b02:	0b d0       	rcall	.+22     	; 0x1b1a <__mulsf3x>
    1b04:	c4 cf       	rjmp	.-120    	; 0x1a8e <__fp_round>
    1b06:	b5 df       	rcall	.-150    	; 0x1a72 <__fp_pscA>
    1b08:	28 f0       	brcs	.+10     	; 0x1b14 <__mulsf3+0x12>
    1b0a:	ba df       	rcall	.-140    	; 0x1a80 <__fp_pscB>
    1b0c:	18 f0       	brcs	.+6      	; 0x1b14 <__mulsf3+0x12>
    1b0e:	95 23       	and	r25, r21
    1b10:	09 f0       	breq	.+2      	; 0x1b14 <__mulsf3+0x12>
    1b12:	a6 cf       	rjmp	.-180    	; 0x1a60 <__fp_inf>
    1b14:	ab cf       	rjmp	.-170    	; 0x1a6c <__fp_nan>
    1b16:	11 24       	eor	r1, r1
    1b18:	ee cf       	rjmp	.-36     	; 0x1af6 <__fp_szero>

00001b1a <__mulsf3x>:
    1b1a:	ca df       	rcall	.-108    	; 0x1ab0 <__fp_split3>
    1b1c:	a0 f3       	brcs	.-24     	; 0x1b06 <__mulsf3+0x4>

00001b1e <__mulsf3_pse>:
    1b1e:	95 9f       	mul	r25, r21
    1b20:	d1 f3       	breq	.-12     	; 0x1b16 <__mulsf3+0x14>
    1b22:	95 0f       	add	r25, r21
    1b24:	50 e0       	ldi	r21, 0x00	; 0
    1b26:	55 1f       	adc	r21, r21
    1b28:	62 9f       	mul	r22, r18
    1b2a:	f0 01       	movw	r30, r0
    1b2c:	72 9f       	mul	r23, r18
    1b2e:	bb 27       	eor	r27, r27
    1b30:	f0 0d       	add	r31, r0
    1b32:	b1 1d       	adc	r27, r1
    1b34:	63 9f       	mul	r22, r19
    1b36:	aa 27       	eor	r26, r26
    1b38:	f0 0d       	add	r31, r0
    1b3a:	b1 1d       	adc	r27, r1
    1b3c:	aa 1f       	adc	r26, r26
    1b3e:	64 9f       	mul	r22, r20
    1b40:	66 27       	eor	r22, r22
    1b42:	b0 0d       	add	r27, r0
    1b44:	a1 1d       	adc	r26, r1
    1b46:	66 1f       	adc	r22, r22
    1b48:	82 9f       	mul	r24, r18
    1b4a:	22 27       	eor	r18, r18
    1b4c:	b0 0d       	add	r27, r0
    1b4e:	a1 1d       	adc	r26, r1
    1b50:	62 1f       	adc	r22, r18
    1b52:	73 9f       	mul	r23, r19
    1b54:	b0 0d       	add	r27, r0
    1b56:	a1 1d       	adc	r26, r1
    1b58:	62 1f       	adc	r22, r18
    1b5a:	83 9f       	mul	r24, r19
    1b5c:	a0 0d       	add	r26, r0
    1b5e:	61 1d       	adc	r22, r1
    1b60:	22 1f       	adc	r18, r18
    1b62:	74 9f       	mul	r23, r20
    1b64:	33 27       	eor	r19, r19
    1b66:	a0 0d       	add	r26, r0
    1b68:	61 1d       	adc	r22, r1
    1b6a:	23 1f       	adc	r18, r19
    1b6c:	84 9f       	mul	r24, r20
    1b6e:	60 0d       	add	r22, r0
    1b70:	21 1d       	adc	r18, r1
    1b72:	82 2f       	mov	r24, r18
    1b74:	76 2f       	mov	r23, r22
    1b76:	6a 2f       	mov	r22, r26
    1b78:	11 24       	eor	r1, r1
    1b7a:	9f 57       	subi	r25, 0x7F	; 127
    1b7c:	50 40       	sbci	r21, 0x00	; 0
    1b7e:	8a f0       	brmi	.+34     	; 0x1ba2 <__mulsf3_pse+0x84>
    1b80:	e1 f0       	breq	.+56     	; 0x1bba <__mulsf3_pse+0x9c>
    1b82:	88 23       	and	r24, r24
    1b84:	4a f0       	brmi	.+18     	; 0x1b98 <__mulsf3_pse+0x7a>
    1b86:	ee 0f       	add	r30, r30
    1b88:	ff 1f       	adc	r31, r31
    1b8a:	bb 1f       	adc	r27, r27
    1b8c:	66 1f       	adc	r22, r22
    1b8e:	77 1f       	adc	r23, r23
    1b90:	88 1f       	adc	r24, r24
    1b92:	91 50       	subi	r25, 0x01	; 1
    1b94:	50 40       	sbci	r21, 0x00	; 0
    1b96:	a9 f7       	brne	.-22     	; 0x1b82 <__mulsf3_pse+0x64>
    1b98:	9e 3f       	cpi	r25, 0xFE	; 254
    1b9a:	51 05       	cpc	r21, r1
    1b9c:	70 f0       	brcs	.+28     	; 0x1bba <__mulsf3_pse+0x9c>
    1b9e:	60 cf       	rjmp	.-320    	; 0x1a60 <__fp_inf>
    1ba0:	aa cf       	rjmp	.-172    	; 0x1af6 <__fp_szero>
    1ba2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ba4:	ec f3       	brlt	.-6      	; 0x1ba0 <__mulsf3_pse+0x82>
    1ba6:	98 3e       	cpi	r25, 0xE8	; 232
    1ba8:	dc f3       	brlt	.-10     	; 0x1ba0 <__mulsf3_pse+0x82>
    1baa:	86 95       	lsr	r24
    1bac:	77 95       	ror	r23
    1bae:	67 95       	ror	r22
    1bb0:	b7 95       	ror	r27
    1bb2:	f7 95       	ror	r31
    1bb4:	e7 95       	ror	r30
    1bb6:	9f 5f       	subi	r25, 0xFF	; 255
    1bb8:	c1 f7       	brne	.-16     	; 0x1baa <__mulsf3_pse+0x8c>
    1bba:	fe 2b       	or	r31, r30
    1bbc:	88 0f       	add	r24, r24
    1bbe:	91 1d       	adc	r25, r1
    1bc0:	96 95       	lsr	r25
    1bc2:	87 95       	ror	r24
    1bc4:	97 f9       	bld	r25, 7
    1bc6:	08 95       	ret

00001bc8 <_exit>:
    1bc8:	f8 94       	cli

00001bca <__stop_program>:
    1bca:	ff cf       	rjmp	.-2      	; 0x1bca <__stop_program>
